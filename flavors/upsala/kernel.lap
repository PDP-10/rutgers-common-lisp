
;;; CLC v1.5 compiling SS:<VICTOR.FLAVORS>KERNEL.CLISP.6

(in-package "FLAVOR-INTERNALS" :use (quote ("LISP" "SYSTEM")) :nicknames (quote ("FI"))) 
(export (quote (pointer-to-fixnum iv-env make-iv-env iv-env-vector make-instance-descriptor instance-descriptor-env instance-descriptor-type instance-descriptor-default-handler instance-descriptor-instantiated-p handle-message unhandle-message do-handlers get-handler get-message instantiate-instance-descriptor resize-instances freeze-instances unfreeze-instances defun-default-handler internal-define-method method-apply method-call define-set-method define-get-method method-defined-p method-called-methods send alloc-instance get-self %instance-ref instance-ref slot-unbound-p iv-bound-p instancep self instance-descriptor do-instance-resizing))) 

#_(lap #0_extract-doc-and-declares expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(declare)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o6 -6 q)
             (movem o6 -5 q)
             (movem nil -4 q)
(label 7)    (move o1 -5 q)
             (call endp 1)
             (jumpn1 o1 10)
             (move o1 -5 q)
             (move o1 0 o1)
             (call stringp 1)
             (jumpn o1 11)
             (move o1 -5 q)
             (move o1 0 o1)
             (call listp 1)
             (jumpe1 o1 13)
             (move o1 -5 q)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call eq 2)
             (skipe nil o1)
(label 13)
(label 11)
(label 10)   (jrst 8)
             (move o1 -4 q)
             (call nreverse 1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (movei n 2)
             (jrst 3)
(label 8)    (move o1 -5 q)
             (move o1 1 o1)
             (movem o1 -3 q)
             (move o1 -5 q)
             (move o1 0 o1)
             (movem o1 -2 q)
             (move o2 -4 q)
             (move o1 -2 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o6 -3 q)
             (movem o6 -5 q)
             (move o6 -2 q)
             (movem o6 -4 q)
             (jrst 7)
(label 3)    (adjsp q -7)
             (popj p)
)

(%put (quote extract-doc-and-declares) (quote lisp::%args-documentation) (quote (forms))) 
(%put (quote extract-doc-and-declares) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_self-and-descriptor macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." self-and-descriptor let inst get-self ((values inst (%instance-ref inst 0))))
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call length 1)
             (movem o1 -5 q)
             (move o2 (constant 0))
             (move o1 -5 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -6 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -6 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -3 q)
             (move o3 (constant 6))
             (move o1 (constant 3))
             (move o2 -3 q)
             (call list* 3)
(label 3)    (adjsp q -7)
             (popj p)
)

(%put (quote self-and-descriptor) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote self-and-descriptor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_private-structure-printer expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_("#<~A ~A>")
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (movem o3 -5 q)
             (move o1 -7 q)
             (call type-of 1)
             (movem o1 -2 q)
             (move o1 -7 q)
             (call system::%cl-pointer-to-fixnum 1)
             (move o4 o1)
             (move o1 -6 q)
             (move o2 (constant 0))
             (move o3 -2 q)
             (call format 4)
             (adjsp q -8)
             (popj p)
)

(%put (quote private-structure-printer) (quote lisp::%args-documentation) (quote (object stream depth))) 
(%put (quote private-structure-printer) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_make-iv-env expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 -2 1 0 iv-env 2 t)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -4 q)
             (move o3 (constant 2))
             (move o1 -4 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -4 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -4 q)
             (movem o6 -5 q)
             (move o3 -6 q)
             (move o1 -5 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
             (move o3 (constant 6))
             (move o1 -5 q)
             (move o2 (constant 5))
             (call lisp::%sp-svset 3)
             (move o1 -5 q)
             (movei n 1)
             (adjsp q -7)
             (popj p)
)

(%put (quote make-iv-env) (quote lisp::%args-documentation) (quote (vector))) 
(%put (quote make-iv-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_iv-env-bindings* expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote iv-env-bindings*) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote iv-env-bindings*) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_iv-env-vector expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote iv-env-vector) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote iv-env-vector) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(setf (symbol-function (quote copy-iv-env)) (function lisp::built-in-copier)) 

#_(lap #0_iv-env-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 iv-env lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote iv-env-p) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote iv-env-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(remprop (quote iv-env-bindings*) (quote lisp::setf-inverse)) 
(%put (quote iv-env-bindings*) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote iv-env-bindings*) (quote lisp::%setf-documentation)) 
(quote iv-env-bindings*) 
(%put (quote iv-env) (quote lisp::structure-print) (quote private-structure-printer)) 
(%put (quote iv-env) (quote lisp::defstruct-description) (quote (iv-env vector ((:print-function private-structure-printer) (:constructor make-iv-env (vector))) 3 iv-env- (make-iv-env (vector)) (iv-env-bindings* iv-env-vector) (bindings* vector) (t nil) (nil (:read-only t)) ((iv-env-bindings* . 2) (iv-env-vector . 1)) nil ((:bindings* . 2) (:vector . 1))))) 
(quote iv-env) 

#_(lap #0_iv-env-bindings expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(0 iv 2)
       (code-start)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call flavor-internals::iv-env-bindings* 1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (call listp 1)
             (jumpe o1 4)
             (move o1 -11 q)
             (movei n 1)
             (jrst 3)
(label 4)    (move o6 -12 q)
             (movem o6 -10 q)
             (move o1 -12 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -8 q)
             (movem nil -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -5 q)
(label 10)   (move o2 -5 q)
             (move o1 -6 q)
             (call < 2)
             (jumpn o1 11)
             (jrst 6)
(label 11)   (move o2 -6 q)
             (move o1 -8 q)
             (call aref 2)
             (movem o1 -4 q)
             (move o2 -6 q)
             (move o1 -8 q)
             (call aref 2)
             (move o2 o1)
             (move o1 (constant 1))
             (call list 2)
             (move o2 o1)
             (move o1 -4 q)
             (call list 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -4 q)
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -6 q)
             (jrst 10)
(label 6)    (move o6 -7 q)
             (movem o6 -9 q)
             (move o3 -9 q)
             (move o1 -10 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
(label 3)    (adjsp q -13)
             (popj p)
)

(%put (quote iv-env-bindings) (quote lisp::%args-documentation) (quote (env))) 
(%put (quote iv-env-bindings) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_internal-make-id expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(6 3 5 1 0 flavor-send 2 :size 30 :test eq 4)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (movem o3 -8 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -7 q)
             (move o3 -8 q)
             (move o1 -7 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 -9 q)
             (move o1 -7 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
             (move o3 -10 q)
             (move o1 -7 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o3 (constant 5))
             (move o1 -7 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (move o4 (constant 10))
             (move o1 (constant 7))
             (move o2 (constant 8))
             (move o3 (constant 9))
             (call make-hash-table 4)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o3 nil)
             (move o1 -7 q)
             (move o2 (constant 11))
             (call lisp::%sp-svset 3)
             (move o1 -7 q)
             (movei n 1)
             (adjsp q -11)
             (popj p)
)

(%put (quote internal-make-id) (quote lisp::%args-documentation) (quote (type env default-entry))) 
(%put (quote internal-make-id) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-env expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(5)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-env) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-instantiated-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-instantiated-p) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-instantiated-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-default-entry expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-default-entry) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-default-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-table expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-table) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-table) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-type expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-type) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-type) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_instance-descriptor-send-fn expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(0)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-descriptor-send-fn) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-descriptor-send-fn) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_copy-instance-descriptor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 2)
             (movem o1 -1 q)
             (move o1 -1 q)
             (call copy-seq 1)
             (adjsp q -2)
             (popj p)
)

(%put (quote copy-instance-descriptor) (quote lisp::%args-documentation) (quote (structure))) 
(%put (quote copy-instance-descriptor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(remprop (quote instance-descriptor-send-fn) (quote lisp::setf-inverse)) 
(%put (quote instance-descriptor-send-fn) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 0 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-descriptor-send-fn) (quote lisp::%setf-documentation)) 
(quote instance-descriptor-send-fn) 
(remprop (quote instance-descriptor-type) (quote lisp::setf-inverse)) 
(%put (quote instance-descriptor-type) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 1 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-descriptor-type) (quote lisp::%setf-documentation)) 
(quote instance-descriptor-type) 
(remprop (quote instance-descriptor-table) (quote lisp::setf-inverse)) 
(%put (quote instance-descriptor-table) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-descriptor-table) (quote lisp::%setf-documentation)) 
(quote instance-descriptor-table) 
(remprop (quote instance-descriptor-default-entry) (quote lisp::setf-inverse)) 
(%put (quote instance-descriptor-default-entry) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 3 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-descriptor-default-entry) (quote lisp::%setf-documentation)) 
(quote instance-descriptor-default-entry) 
(remprop (quote instance-descriptor-instantiated-p) (quote lisp::setf-inverse)) 
(%put (quote instance-descriptor-instantiated-p) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 4 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-descriptor-instantiated-p) (quote lisp::%setf-documentation)) 
(quote instance-descriptor-instantiated-p) 
(quote instance-descriptor) 

#_(lap #0_make-instance-descriptor expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(:function)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (movem o3 -5 q)
             (move o2 -5 q)
             (move o1 (constant 0))
             (call flavor-internals::make-entry 2)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call flavor-internals::internal-make-id 3)
             (adjsp q -8)
             (popj p)
)

(%put (quote make-instance-descriptor) (quote lisp::%args-documentation) (quote (type env default-handler))) 
(%put (quote make-instance-descriptor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_make-entry expr
       (entry-points (2 3 4 5 6 7 8) rest)
       #0_(3 ((:cmap . 2) (:map . 1) (:function . 0)) "Unknown option to DefStruct constructor.")
       (code-start)
(label 2)    (move o1 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest1)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest2)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest3)
             (jrst 1)
(label 6)    (movei w2 4)
             (icall rest4)
             (jrst 1)
(label 7)    (movei w2 5)
             (icall rest5)
             (jrst 1)
(label 8)    (movei w2 0)
             (icall restx)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -6 q)
             (movem nil -5 q)
(label 14)   (skipe nil -7 q)
             (jrst 15)
             (move o1 -6 q)
             (movei n 1)
             (jrst 10)
(label 15)   (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 18)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 -4 q)
             (call lisp::%sp-svset 3)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -5 q)
             (jrst 17)
(label 18)   (move o1 (constant 2))
             (call error 1)
(label 17)   (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -7 q)
             (jrst 14)
(label 10)   (adjsp q -9)
             (popj p)
)

(%put (quote make-entry) (quote lisp::%args-documentation) (quote (&rest lisp::initial-values))) 
(%put (quote make-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_entry-cmap expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote entry-cmap) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote entry-cmap) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_entry-map expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote entry-map) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote entry-map) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_entry-function expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(0)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote entry-function) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote entry-function) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_copy-entry expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 2)
             (movem o1 -1 q)
             (move o1 -1 q)
             (call copy-seq 1)
             (adjsp q -2)
             (popj p)
)

(%put (quote copy-entry) (quote lisp::%args-documentation) (quote (structure))) 
(%put (quote copy-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(remprop (quote entry-function) (quote lisp::setf-inverse)) 
(%put (quote entry-function) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 0 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote entry-function) (quote lisp::%setf-documentation)) 
(quote entry-function) 
(remprop (quote entry-map) (quote lisp::setf-inverse)) 
(%put (quote entry-map) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 1 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote entry-map) (quote lisp::%setf-documentation)) 
(quote entry-map) 
(remprop (quote entry-cmap) (quote lisp::setf-inverse)) 
(%put (quote entry-cmap) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote entry-cmap) (quote lisp::%setf-documentation)) 
(quote entry-cmap) 
(quote entry) 

#_(lap #0_make-method expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(5 -2 1 0 method 4 3 2)
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (movem o2 -8 q)
             (movem o3 -7 q)
             (movem o4 -6 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -4 q)
             (move o3 (constant 2))
             (move o1 -4 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -4 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -4 q)
             (movem o6 -5 q)
             (move o3 -6 q)
             (move o1 -5 q)
             (move o2 (constant 5))
             (call lisp::%sp-svset 3)
             (move o3 -7 q)
             (move o1 -5 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o3 -8 q)
             (move o1 -5 q)
             (move o2 (constant 7))
             (call lisp::%sp-svset 3)
             (move o3 -9 q)
             (move o1 -5 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
             (move o1 -5 q)
             (movei n 1)
             (adjsp q -10)
             (popj p)
)

(%put (quote make-method) (quote lisp::%args-documentation) (quote (fn-name calls ivs current-symbol))) 
(%put (quote make-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_method-current-symbol expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-current-symbol) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-current-symbol) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_method-ivs expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-ivs) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-ivs) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_method-calls expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-calls) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-calls) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_method-fn-name expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-fn-name) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-fn-name) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(setf (symbol-function (quote copy-method)) (function lisp::built-in-copier)) 

#_(lap #0_methodp expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 method lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote methodp) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote methodp) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(remprop (quote method-fn-name) (quote lisp::setf-inverse)) 
(%put (quote method-fn-name) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 1 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-fn-name) (quote lisp::%setf-documentation)) 
(quote method-fn-name) 
(remprop (quote method-calls) (quote lisp::setf-inverse)) 
(%put (quote method-calls) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-calls) (quote lisp::%setf-documentation)) 
(quote method-calls) 
(remprop (quote method-ivs) (quote lisp::setf-inverse)) 
(%put (quote method-ivs) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 3 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-ivs) (quote lisp::%setf-documentation)) 
(quote method-ivs) 
(remprop (quote method-current-symbol) (quote lisp::setf-inverse)) 
(%put (quote method-current-symbol) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 4 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-current-symbol) (quote lisp::%setf-documentation)) 
(quote method-current-symbol) 
(%put (quote method) (quote lisp::structure-print) (quote private-structure-printer)) 
(%put (quote method) (quote lisp::defstruct-description) (quote (method vector ((:print-function private-structure-printer) (:predicate methodp) (:constructor make-method (fn-name calls ivs current-symbol))) 5 method- (make-method (fn-name calls ivs current-symbol)) (method-current-symbol method-ivs method-calls method-fn-name) (current-symbol ivs calls fn-name) (nil nil nil nil) (nil nil nil nil) ((method-current-symbol . 4) (method-ivs . 3) (method-calls . 2) (method-fn-name . 1)) nil ((:current-symbol . 4) (:ivs . 3) (:calls . 2) (:fn-name . 1))))) 
(quote method) 

#_(lap #0_method-called-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 2)
             (movem o1 -1 q)
             (move o1 -1 q)
             (call symbol-value 1)
             (call flavor-internals::method-calls 1)
             (adjsp q -2)
             (popj p)
)

(%put (quote method-called-methods) (quote lisp::%args-documentation) (quote (method))) 
(%put (quote method-called-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_method-defined-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 2)
             (movem o1 -1 q)
             (move o1 -1 q)
             (call symbol-value 1)
             (call flavor-internals::methodp 1)
             (adjsp q -2)
             (popj p)
)

(%put (quote method-defined-p) (quote lisp::%args-documentation) (quote (method-fn-name))) 
(%put (quote method-defined-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_funcall-entry macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." funcall-entry funcall entry-function)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -10 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o6 (constant 3))
             (movem o6 -5 q)
             (move o2 -7 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -4 q)
             (move o6 -9 q)
             (movem o6 -3 q)
             (move o6 -8 q)
             (movem o6 -2 q)
             (move o6 -7 q)
             (movem o6 -1 q)
             (push q -6 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (move o3 -4 q)
             (move o4 -3 q)
             (move o5 -2 q)
             (call list* 6)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote funcall-entry) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote funcall-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_apply-entry macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." apply-entry apply entry-function)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -10 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o6 (constant 3))
             (movem o6 -5 q)
             (move o2 -7 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -4 q)
             (move o6 -9 q)
             (movem o6 -3 q)
             (move o6 -8 q)
             (movem o6 -2 q)
             (move o6 -7 q)
             (movem o6 -1 q)
             (push q -6 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (move o3 -4 q)
             (move o4 -3 q)
             (move o5 -2 q)
             (call list* 6)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote apply-entry) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote apply-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote get-message) (quote lisp::%fun-documentation) (quote "Used in the body of a default handler, returns the message
    that invoked this handler.")) 

#_(lap #0_get-message macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1 "Macro ~S cannot be called with ~S args." get-message %message)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call length 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call > 2)
             (jumpe o1 4)
             (move o1 -4 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 (constant 3))
             (movei n 1)
(label 3)    (adjsp q -5)
             (popj p)
)

(%put (quote get-message) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote get-message) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(remprop (quote get-message) (quote lisp::setf-inverse)) 
(%put (quote get-message) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist new) (let* nil (declare (ignore lisp::%access-arglist) (ignore new)) (error "Cannot setf get-message.")))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote get-message) (quote lisp::%setf-documentation)) 
(quote get-message) 
(%put (quote defun-default-handler) (quote lisp::%fun-documentation) (quote "Twiddles args so the function can be called as a default handler.
    Also makes (get-message) work in the body.")) 

#_(lap #0_defun-default-handler macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." defun-default-handler defun self %message %entry progn)
       (code-start)
(label 1)    (adjsp q 16)
             (movem o1 -15 q)
             (move o1 -15 q)
             (call length 1)
             (movem o1 -14 q)
             (move o2 (constant 0))
             (move o1 -14 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -15 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -15 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o1 -15 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o1 -15 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call flavor-internals::extract-doc-and-declares 1)
             (adjust-values 2)
             (movem o1 -11 q)
             (movem o2 -10 q)
             (move o4 -13 q)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 (constant 6))
             (call list* 4)
             (movem o1 -7 q)
             (move o2 -10 q)
             (move o1 (constant 7))
             (call cons 2)
             (move o4 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 (constant 6))
             (call list 4)
             (move o2 o1)
             (move o1 -11 q)
             (call append 2)
             (move o4 o1)
             (move o1 (constant 3))
             (move o2 -14 q)
             (move o3 -7 q)
             (call list* 4)
(label 3)    (adjsp q -16)
             (popj p)
)

(%put (quote defun-default-handler) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defun-default-handler) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_flavor-send expr
       (entry-points (2-few 2-few 2 3 4 5 6) rest)
       #0_(0 "Internal error: resizing #<Random Instance ~S> didn't work.")
       (code-start)
(label 2)    (move o3 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest3)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest4)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest5)
             (jrst 1)
(label 6)    (movei w2 2)
             (icall restx)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (movem o3 -10 q)
             (move o6 -12 q)
             (movem o6 -8 q)
(label 12)   (move o1 -8 q)
             (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call system:instancep 1)
             (jumpe o1 13)
             (move o6 -7 q)
             (movem o6 -8 q)
             (jrst 14)
(label 13)   (move o6 -8 q)
             (movem o6 -9 q)
             (jrst 8)
(label 14)   (jrst 12)
(label 8)    (move o1 -9 q)
             (call system::%instance-vector 1)
             (movem o1 -7 q)
             (move o2 (constant 0))
             (move o1 -7 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -9 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -9 q)
             (movem o2 -8 q)
             (move o1 -8 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call hash-table-p 1)
             (jumpn o1 16)
             (move o1 -12 q)
             (call flavor-internals:do-instance-resizing 1)
             (move o6 -12 q)
             (movem o6 -5 q)
(label 21)   (move o1 -5 q)
             (call system::%instance-vector 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call aref 2)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call system:instancep 1)
             (jumpe o1 22)
             (move o6 -4 q)
             (movem o6 -5 q)
             (jrst 23)
(label 22)   (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 17)
(label 23)   (jrst 21)
(label 17)   (move o1 -6 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -6 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -9 q)
             (movem o2 -8 q)
             (move o1 -8 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call hash-table-p 1)
             (jumpn o1 25)
             (move o1 -12 q)
             (call system::%cl-pointer-to-fixnum 1)
             (move o2 o1)
             (move o1 (constant 1))
             (call error 2)
(label 25)
(label 16)   (move o1 -8 q)
             (call flavor-internals::instance-descriptor-default-entry 1)
             (move o3 o1)
             (move o1 -11 q)
             (move o2 -7 q)
             (call gethash 3)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call flavor-internals::entry-function 1)
             (movem o1 -5 q)
             (move o5 -10 q)
             (move o1 -5 q)
             (move o2 -9 q)
             (move o3 -11 q)
             (move o4 -6 q)
             (call apply 5)
             (adjsp q -13)
             (popj p)
)

(%put (quote flavor-send) (quote lisp::%args-documentation) (quote (instance message &rest args))) 
(%put (quote flavor-send) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote handle-message) (quote lisp::%fun-documentation) (quote "The method must be defined before it can be a handler.
  (via internal-define-method or define-set-method or define-get-method).")) 

#_(lap #0_handle-message expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(:function)
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (movem o2 -10 q)
             (movem o3 -9 q)
             (move o1 -10 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 4)
             (move o2 -9 q)
             (move o1 (constant 0))
             (call flavor-internals::make-entry 2)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -10 q)
             (call flavor-internals::do-map-method 2)
             (move o6 -11 q)
             (movem o6 -6 q)
             (move o1 -10 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call lisp::%puthash 3)
(label 4)    (move o1 -9 q)
             (movei n 1)
             (adjsp q -12)
             (popj p)
)

(%put (quote handle-message) (quote lisp::%args-documentation) (quote (message instance-descriptor method))) 
(%put (quote handle-message) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote unhandle-message) (quote lisp::%fun-documentation) (quote "Makes the given message unhandled.")) 

#_(lap #0_unhandle-message expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (movem o2 -4 q)
             (move o1 -4 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -3 q)
             (skipn nil -3 q)
             (jrst 4)
             (move o2 -3 q)
             (move o1 -5 q)
             (call remhash 2)
             (jrst 3)
(label 4)    (move o1 nil)
             (movei n 1)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote unhandle-message) (quote lisp::%args-documentation) (quote (message instance-descriptor))) 
(%put (quote unhandle-message) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote get-handler) (quote lisp::%fun-documentation) (quote "Returns the method-function-name of the method that handles message
  for instance or instance-descriptor inst-or-desc.")) 

#_(lap #0_get-handler expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(0 "Internal error: resizing #<Random Instance ~S> didn't work.")
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (movem nil -8 q)
             (move o1 -9 q)
             (call system:instancep 1)
             (jumpe o1 4)
             (move o6 -9 q)
             (movem o6 -6 q)
(label 9)    (move o1 -6 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call system:instancep 1)
             (jumpe o1 10)
             (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 11)
(label 10)   (move o6 -6 q)
             (movem o6 -7 q)
             (jrst 5)
(label 11)   (jrst 9)
(label 5)    (move o1 -7 q)
             (call system::%instance-vector 1)
             (movem o1 -5 q)
             (move o2 (constant 0))
             (move o1 -5 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -7 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (move o1 -6 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call hash-table-p 1)
             (jumpn o1 13)
             (move o1 -7 q)
             (call flavor-internals:do-instance-resizing 1)
             (move o6 -7 q)
             (movem o6 -4 q)
(label 18)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 0))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 19)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 20)
(label 19)   (move o6 -4 q)
             (movem o6 -5 q)
             (jrst 14)
(label 20)   (jrst 18)
(label 14)   (move o1 -5 q)
             (call system::%instance-vector 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -5 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (move o1 -6 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call hash-table-p 1)
             (jumpn o1 22)
             (move o1 -9 q)
             (call system::%cl-pointer-to-fixnum 1)
             (move o2 o1)
             (move o1 (constant 1))
             (call error 2)
(label 22)
(label 13)   (jrst 3)
(label 4)    (move o1 -9 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -8 q)
(label 3)    (move o2 -8 q)
             (move o1 -10 q)
             (call gethash 2)
             (movem o1 -7 q)
             (skipn nil -7 q)
             (jrst 27)
             (move o1 -7 q)
             (call flavor-internals::entry-function 1)
             (call symbol-value 1)
             (call flavor-internals::method-fn-name 1)
             (jrst 28)
(label 27)   (move o1 nil)
             (movei n 1)
(label 28)   (adjsp q -11)
             (popj p)
)

(%put (quote get-handler) (quote lisp::%args-documentation) (quote (message inst-or-desc))) 
(%put (quote get-handler) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote do-handlers) (quote lisp::%fun-documentation) (quote "(((message method-fn-name) instance-descriptor) . body)
  Does the body for each handler, with message and method-fn-name bound to
  each successive handler binding.")) 

#_(lap #0_do-handlers macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." do-handlers block let table instance-descriptor-table unless (null table) maphash function lambda (entry) ((method-fn-name (symbol-value (entry-function entry)))) (table))
       (code-start)
(label 1)    (adjsp q 19)
             (movem o1 -18 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -17 q)
             (move o2 (constant 0))
             (move o1 -17 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -18 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -18 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -17 q)
             (move o1 -18 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -16 q)
             (move o1 -18 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -15 q)
             (move o1 -18 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -14 q)
             (move o2 -15 q)
             (move o1 (constant 6))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 5))
             (call list 2)
             (call list 1)
             (movem o1 -10 q)
             (move o2 (constant 12))
             (move o1 -17 q)
             (call cons 2)
             (movem o1 -4 q)
             (move o2 (constant 13))
             (move o1 -16 q)
             (call cons 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 -14 q)
             (move o1 (constant 4))
             (move o2 -2 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 11))
             (move o2 -4 q)
             (call list 3)
             (move o2 o1)
             (move o1 (constant 10))
             (call list 2)
             (movem o1 -6 q)
             (move o3 (constant 14))
             (move o1 (constant 9))
             (move o2 -6 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 -10 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 nil)
             (call list 3)
(label 3)    (adjsp q -19)
             (popj p)
)

(%put (quote do-handlers) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote do-handlers) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote instantiate-instance-descriptor) (quote lisp::%fun-documentation) (quote "Returns the new instance, all ivs set to unbound.")) 

#_(lap #0_instantiate-instance-descriptor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(:initial-element system::unbound 0 t 4)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call flavor-internals:instance-descriptor-env 1)
             (call flavor-internals:iv-env-vector 1)
             (call length 1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call 1+ 1)
             (movem o1 -4 q)
             (move o3 (constant 1))
             (move o1 -4 q)
             (move o2 (constant 0))
             (call make-array 3)
             (movem o1 -5 q)
             (move o3 -8 q)
             (move o1 -5 q)
             (move o2 (constant 2))
             (call lisp::%aset 3)
             (move o1 -5 q)
             (call system::internal-make-instance 1)
             (movem o1 -6 q)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o6 (constant 3))
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (move o1 -6 q)
             (movei n 1)
             (adjsp q -9)
             (popj p)
)

(%put (quote instantiate-instance-descriptor) (quote lisp::%args-documentation) (quote (instance-descriptor))) 
(%put (quote instantiate-instance-descriptor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote resize-instances) (quote lisp::%fun-documentation) (quote "Basically just changes the instance to be of a new instance-descriptor.
  Those slots not present in the previous descriptor get set to unbound.
  The function, which probably doesn't get called immediately, should
  (when it IS called) try to set the unbound variables to some reasonable
  value.")) 

#_(lap #0_resize-instances expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(4 2)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (movem o2 -7 q)
             (movem o3 -6 q)
             (move o6 -7 q)
             (movem o6 -5 q)
             (move o1 -8 q)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 0))
             (call lisp::%sp-svset 3)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o2 -6 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (adjsp q -9)
             (popj p)
)

(%put (quote resize-instances) (quote lisp::%args-documentation) (quote (instance-descriptor new-descriptor function))) 
(%put (quote resize-instances) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_do-instance-resizing expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(0 :initial-element system::unbound)
       (code-start)
(label 1)    (adjsp q 22)
             (movem o1 -21 q)
             (move o6 -21 q)
             (movem o6 -19 q)
(label 7)    (move o1 -19 q)
             (call system::%instance-vector 1)
             (movem o1 -17 q)
             (move o2 (constant 0))
             (move o1 -17 q)
             (call aref 2)
             (movem o1 -18 q)
             (move o1 -18 q)
             (call system:instancep 1)
             (jumpe o1 8)
             (move o6 -18 q)
             (movem o6 -19 q)
             (jrst 9)
(label 8)    (move o6 -19 q)
             (movem o6 -20 q)
             (jrst 3)
(label 9)    (jrst 7)
(label 3)    (move o1 -20 q)
             (call system::%instance-vector 1)
             (movem o1 -18 q)
             (move o2 (constant 0))
             (move o1 -18 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -20 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -20 q)
             (movem o2 -19 q)
             (move o1 -19 q)
             (call flavor-internals::instance-descriptor-table 1)
             (move o1 0 o1)
             (movem o1 -18 q)
             (move o1 -19 q)
             (call flavor-internals::instance-descriptor-table 1)
             (move o1 1 o1)
             (movem o1 -17 q)
             (move o1 -19 q)
             (call flavor-internals:instance-descriptor-env 1)
             (movem o1 -16 q)
             (move o1 -18 q)
             (call flavor-internals:instance-descriptor-env 1)
             (movem o1 -15 q)
             (move o1 -16 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -14 q)
             (move o1 -15 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -13 q)
             (move o1 -13 q)
             (call length 1)
             (call 1+ 1)
             (movem o1 -10 q)
             (move o3 (constant 2))
             (move o1 -10 q)
             (move o2 (constant 1))
             (call make-array 3)
             (movem o1 -11 q)
             (move o3 -18 q)
             (move o1 -11 q)
             (move o2 (constant 0))
             (call lisp::%aset 3)
             (move o1 -11 q)
             (call system::internal-make-instance 1)
             (movem o1 -12 q)
             (move o6 (constant 0))
             (movem o6 -11 q)
             (move o1 -13 q)
             (call length 1)
             (movem o1 -10 q)
(label 14)   (move o2 -10 q)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 15)
             (jrst 10)
(label 15)   (move o2 -11 q)
             (move o1 -13 q)
             (call aref 2)
             (movem o1 -9 q)
             (move o2 -14 q)
             (move o1 -9 q)
             (call position 2)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 17)
             (move o6 -12 q)
             (movem o6 -7 q)
             (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -6 q)
             (move o1 -20 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call 1+ 1)
             (move o2 o1)
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
(label 23)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 0))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 24)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 25)
(label 24)   (move o1 -4 q)
             (jrst 19)
(label 25)   (jrst 23)
(label 19)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o3 -5 q)
             (move o1 -4 q)
             (move o2 -6 q)
             (call lisp::%aset 3)
(label 17)   (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -11 q)
             (jrst 14)
(label 10)   (move o6 -21 q)
             (movem o6 -11 q)
             (move o6 (constant 0))
             (movem o6 -10 q)
             (move o6 -12 q)
             (movem o6 -9 q)
             (move o6 -11 q)
             (movem o6 -8 q)
(label 30)   (move o1 -8 q)
             (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call system:instancep 1)
             (jumpe o1 31)
             (move o6 -7 q)
             (movem o6 -8 q)
             (jrst 32)
(label 31)   (move o1 -8 q)
             (jrst 26)
(label 32)   (jrst 30)
(label 26)   (call system::%instance-vector 1)
             (movem o1 -8 q)
             (move o3 -9 q)
             (move o1 -8 q)
             (move o2 -10 q)
             (call lisp::%aset 3)
             (move o2 -12 q)
             (move o1 -17 q)
             (call funcall 2)
             (move o1 -12 q)
             (movei n 1)
             (adjsp q -22)
             (popj p)
)

(%put (quote do-instance-resizing) (quote lisp::%args-documentation) (quote (instance))) 
(%put (quote do-instance-resizing) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_freeze-entry expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(non-method 0)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (move o1 -9 q)
             (call flavor-internals::entry-function 1)
             (call symbol-function 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call eq 2)
             (jumpe o1 4)
             (move o2 -9 q)
             (move o1 -10 q)
             (call flavor-internals::do-map-method 2)
(label 4)    (move o1 -9 q)
             (call flavor-internals::entry-function 1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call symbol-name 1)
             (call make-symbol 1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (call symbol-function 1)
             (move o2 o1)
             (move o1 -7 q)
             (call %sp-set-definition 2)
             (move o1 -8 q)
             (call symbol-value 1)
             (move o2 o1)
             (move o1 -7 q)
             (call set 2)
             (move o6 -9 q)
             (movem o6 -6 q)
             (move o6 -7 q)
             (movem o6 -5 q)
             (move o3 -5 q)
             (move o1 -6 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o1 -9 q)
             (call flavor-internals::entry-cmap 1)
             (movem o1 -8 q)
             (move o6 (constant 1))
             (movem o6 -7 q)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -6 q)
(label 10)   (move o2 -6 q)
             (move o1 -7 q)
             (call < 2)
             (jumpn o1 11)
             (move o1 nil)
             (movei n 1)
             (jrst 6)
(label 11)   (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -10 q)
             (call flavor-internals::freeze-entry 2)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o1 -7 q)
             (call 1+ 1)
             (movem o1 -7 q)
             (jrst 10)
(label 6)    (adjsp q -11)
             (popj p)
)

(%put (quote freeze-entry) (quote lisp::%args-documentation) (quote (id entry))) 
(%put (quote freeze-entry) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote freeze-instances) (quote lisp::%fun-documentation) (quote "Makes the instances of this instance-descriptor deaf to changes in 
  method definition.  Use unfreeze-instance to wake it up again.")) 

#_(lap #0_freeze-instances expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(0 5 compiler::delkey compiler::nilkey)
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (move o1 -11 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -10 q)
             (move o2 (constant 0))
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -9 q)
             (move o2 (constant 1))
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -8 q)
             (movem nil -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
             (move o6 -9 q)
             (movem o6 -5 q)
(label 7)    (move o2 -9 q)
             (move o1 -6 q)
             (call eq 2)
             (jumpe o1 8)
             (move o1 nil)
             (movei n 1)
             (jrst 3)
(label 8)    (move o2 -6 q)
             (move o1 -8 q)
             (call lisp::%sp-svref 2)
             (movem o1 -7 q)
             (skipn nil -7 q)
             (jrst 12)
             (move o2 (special 2))
             (move o1 -7 q)
             (call eq 2)
             (skipe nil o1)
(label 12)   (jrst 11)
             (move o2 (special 3))
             (move o1 -7 q)
             (call eq 2)
             (jumpe o1 13)
             (movem nil -7 q)
(label 13)   (move o6 -7 q)
             (movem o6 -4 q)
             (move o2 -5 q)
             (move o1 -8 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 -3 q)
             (move o1 -11 q)
             (call flavor-internals::freeze-entry 2)
(label 11)   (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -4 q)
             (move o1 -5 q)
             (call 1+ 1)
             (movem o1 -3 q)
             (move o6 -4 q)
             (movem o6 -6 q)
             (move o6 -3 q)
             (movem o6 -5 q)
             (jrst 7)
(label 3)    (adjsp q -12)
             (popj p)
)

(%put (quote freeze-instances) (quote lisp::%args-documentation) (quote (instance-descriptor))) 
(%put (quote freeze-instances) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote unfreeze-instances) (quote lisp::%fun-documentation) (quote "Undoes freeze-instances.")) 

#_(lap #0_unfreeze-instances expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(instance-descriptor 0 5 compiler::delkey compiler::nilkey)
       (code-start)
(label 1)    (adjsp q 11)
             (spec-bind (special 0))
             (movem o1 (special 0))
             (move o1 (special 0))
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -10 q)
             (move o2 (constant 1))
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -9 q)
             (move o2 (constant 2))
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -8 q)
             (movem nil -7 q)
             (move o6 (constant 1))
             (movem o6 -6 q)
             (move o6 -9 q)
             (movem o6 -5 q)
(label 7)    (move o2 -9 q)
             (move o1 -6 q)
             (call eq 2)
             (jumpe o1 8)
             (move o1 nil)
             (movei n 1)
             (jrst 3)
(label 8)    (move o2 -6 q)
             (move o1 -8 q)
             (call lisp::%sp-svref 2)
             (movem o1 -7 q)
             (skipn nil -7 q)
             (jrst 12)
             (move o2 (special 3))
             (move o1 -7 q)
             (call eq 2)
             (skipe nil o1)
(label 12)   (jrst 11)
             (move o2 (special 4))
             (move o1 -7 q)
             (call eq 2)
             (jumpe o1 13)
             (movem nil -7 q)
(label 13)   (move o6 -7 q)
             (movem o6 -4 q)
             (move o2 -5 q)
             (move o1 -8 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o6 (special 0))
             (movem o6 -2 q)
             (move o2 -3 q)
             (move o1 -2 q)
             (call flavor-internals::do-map-method 2)
(label 11)   (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -4 q)
             (move o1 -5 q)
             (call 1+ 1)
             (movem o1 -3 q)
             (move o6 -4 q)
             (movem o6 -6 q)
             (move o6 -3 q)
             (movem o6 -5 q)
             (jrst 7)
(label 3)    (unbind 1)
             (adjsp q -11)
             (popj p)
)

(%put (quote unfreeze-instances) (quote lisp::%args-documentation) (quote (instance-descriptor))) 
(%put (quote unfreeze-instances) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_non-method expr
       (entry-points (2-few 2-few 2-few 2 3 4 5) rest)
       #0_(0 "Internal bogusness: ~S handler for ~S frozen unmapped." "Undefined method ~A.")
       (code-start)
(label 2)    (move o4 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest4)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest5)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall restx)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (movem o3 -10 q)
             (movem o4 -9 q)
             (move o6 -12 q)
             (movem o6 -7 q)
(label 11)   (move o1 -7 q)
             (call system::%instance-vector 1)
             (movem o1 -5 q)
             (move o2 (constant 0))
             (move o1 -5 q)
             (call aref 2)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call system:instancep 1)
             (jumpe o1 12)
             (move o6 -6 q)
             (movem o6 -7 q)
             (jrst 13)
(label 12)   (move o6 -7 q)
             (movem o6 -8 q)
             (jrst 7)
(label 13)   (jrst 11)
(label 7)    (move o1 -8 q)
             (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -8 q)
             (movei n 2)
             (adjust-values 2)
             (movem o1 -8 q)
             (movem o2 -7 q)
             (move o1 -10 q)
             (call flavor-internals::entry-function 1)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call symbolp 1)
             (jumpn o1 15)
             (move o3 -12 q)
             (move o1 (constant 1))
             (move o2 -11 q)
             (call error 3)
             (jrst 14)
(label 15)   (move o1 -6 q)
             (call symbol-value 1)
             (call flavor-internals::method-current-symbol 1)
             (move o2 o1)
             (move o1 -6 q)
             (call eq 2)
             (jumpe o1 16)
             (move o2 -6 q)
             (move o1 (constant 2))
             (call error 2)
             (jrst 14)
(label 16)   (move o2 -10 q)
             (move o1 -7 q)
             (call flavor-internals::do-map-method 2)
             (move o1 -10 q)
             (call flavor-internals::entry-function 1)
             (movem o1 -5 q)
             (move o5 -9 q)
             (move o1 -5 q)
             (move o2 -12 q)
             (move o3 -11 q)
             (move o4 -10 q)
             (call apply 5)
(label 14)   (adjsp q -13)
             (popj p)
)

(%put (quote non-method) (quote lisp::%args-documentation) (quote (self %message %entry &rest args))) 
(%put (quote non-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_map-ivs macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." map-ivs let ivs instance-ivs ((let ((res (if ivs (make-array (length ivs))))) (dotimes (i (length ivs)) (let ((pos (position (aref ivs i) instance-ivs))) (setf (aref res i) (if pos (1+ pos))))) res)))
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -6 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 -3 q)
             (call list 2)
             (movem o1 -3 q)
             (move o3 (constant 6))
             (move o1 (constant 3))
             (move o2 -3 q)
             (call list* 3)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote map-ivs) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote map-ivs) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_do-map-method expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(0 map :function 2 1)
       (code-start)
(label 1)    (adjsp q 18)
             (movem o1 -17 q)
             (movem o2 -16 q)
             (move o1 -16 q)
             (call flavor-internals::entry-function 1)
             (call symbol-value 1)
             (movem o1 -15 q)
             (move o1 -15 q)
             (call flavor-internals::method-ivs 1)
             (movem o1 -14 q)
             (move o1 -15 q)
             (call flavor-internals::method-calls 1)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavor-internals:instance-descriptor-env 1)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -12 q)
             (skipn nil -13 q)
             (jrst 3)
             (move o1 -13 q)
             (call length 1)
             (call make-array 1)
             (movem o1 -11 q)
             (jrst 4)
(label 3)    (movem nil -11 q)
(label 4)    (move o6 -14 q)
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (skipn nil -9 q)
             (jrst 5)
             (move o1 -9 q)
             (call length 1)
             (call make-array 1)
             (movem o1 -7 q)
             (jrst 6)
(label 5)    (movem nil -7 q)
(label 6)    (move o6 (constant 0))
             (movem o6 -6 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -5 q)
(label 11)   (move o2 -5 q)
             (move o1 -6 q)
             (call < 2)
             (jumpn o1 12)
             (jrst 7)
(label 12)   (move o2 -6 q)
             (move o1 -9 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o2 -8 q)
             (move o1 -3 q)
             (call position 2)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 14)
             (move o1 -4 q)
             (call 1+ 1)
             (move o3 o1)
             (jrst 15)
(label 14)   (move o3 nil)
(label 15)   (move o1 -7 q)
             (move o2 -6 q)
             (call lisp::%aset 3)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -6 q)
             (jrst 11)
(label 7)    (move o6 -7 q)
             (movem o6 -10 q)
             (move o1 -16 q)
             (call flavor-internals::entry-function 1)
             (call symbol-value 1)
             (call flavor-internals::method-current-symbol 1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (spec-bind (special 1))
             (movem o1 (special 1))
             (move o1 -13 q)
             (call length 1)
             (call 1- 1)
             (movem o1 -8 q)
             (move o6 -13 q)
             (movem o6 -7 q)
(label 20)   (skipe nil -7 q)
             (jrst 21)
             (jrst 16)
(label 21)   (move o1 -7 q)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 (constant 2))
             (call flavor-internals::make-entry 2)
             (movem o1 -6 q)
             (move o2 -6 q)
             (move o1 -17 q)
             (call flavor-internals::do-map-method 2)
             (move o3 -6 q)
             (move o1 -11 q)
             (move o2 -8 q)
             (call lisp::%aset 3)
             (move o1 -8 q)
             (call 1- 1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o6 -6 q)
             (movem o6 -8 q)
             (move o6 -5 q)
             (movem o6 -7 q)
             (jrst 20)
(label 16)   (move o6 -16 q)
             (movem o6 -8 q)
             (move o6 -11 q)
             (movem o6 -7 q)
             (move o3 -7 q)
             (move o1 -8 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -16 q)
             (movem o6 -8 q)
             (move o6 (special 1))
             (movem o6 -7 q)
             (move o3 -7 q)
             (move o1 -8 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (move o6 -16 q)
             (movem o6 -8 q)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o3 -7 q)
             (move o1 -8 q)
             (move o2 (constant 0))
             (call lisp::%sp-svset 3)
             (unbind 1)
             (adjsp q -18)
             (popj p)
)

(%put (quote do-map-method) (quote lisp::%args-documentation) (quote (id entry))) 
(%put (quote do-map-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_remap-method expr
       (entry-points (2-few 1 3 2-many 2-many 2-many 2-many))
       #0_(non-method 4)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call symbol-value 1)
             (call flavor-internals::method-current-symbol 1)
             (call symbol-function 1)
             (move o2 o1)
             (movem o2 -9 q)
             (jrst 2)
(label 3)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
(label 2)    (move o1 -10 q)
             (call symbol-value 1)
             (movem o1 -8 q)
             (move o1 -10 q)
             (call symbol-name 1)
             (call make-symbol 1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (call flavor-internals::method-current-symbol 1)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call symbol-value 1)
             (move o2 o1)
             (move o1 -7 q)
             (call set 2)
             (move o2 -9 q)
             (move o1 -7 q)
             (call %sp-set-definition 2)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call %sp-set-definition 2)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (adjsp q -11)
             (popj p)
)

(%put (quote remap-method) (quote lisp::%args-documentation) (quote (method-fn-name &optional (new-function-object (symbol-function (method-current-symbol (symbol-value method-fn-name))))))) 
(%put (quote remap-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_update-method expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(non-method 3 2)
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (movem o2 -8 q)
             (movem o3 -7 q)
             (move o1 -9 q)
             (call boundp 1)
             (jumpe o1 3)
             (move o1 -9 q)
             (call symbol-value 1)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call flavor-internals::method-ivs 1)
             (move o2 o1)
             (move o1 -8 q)
             (call equalp 2)
             (jumpe o1 7)
             (move o1 -6 q)
             (call flavor-internals::method-calls 1)
             (move o2 o1)
             (move o1 -7 q)
             (call equalp 2)
             (skipn nil o1)
(label 7)    (jrst 5)
             (move o1 -6 q)
             (call flavor-internals::method-current-symbol 1)
             (move o2 o1)
             (move o1 -9 q)
             (call eq 2)
             (jumpn o1 10)
             (move o1 -6 q)
             (call flavor-internals::method-current-symbol 1)
             (movem o1 -5 q)
             (move o1 -9 q)
             (call symbol-function 1)
             (move o2 o1)
             (move o1 -5 q)
             (call %sp-set-definition 2)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call %sp-set-definition 2)
             (jrst 9)
(label 10)   (move o1 nil)
             (movei n 1)
(label 9)    (jrst 6)
(label 5)    (move o6 -6 q)
             (movem o6 -5 q)
             (move o6 -8 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o6 -6 q)
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
             (move o1 -9 q)
             (call symbol-function 1)
             (move o2 o1)
             (move o1 -9 q)
             (call flavor-internals::remap-method 2)
(label 6)    (jrst 4)
(label 3)    (move o4 -9 q)
             (move o1 -9 q)
             (move o2 -7 q)
             (move o3 -8 q)
             (call flavor-internals::make-method 4)
             (movem o1 -6 q)
             (move o2 -6 q)
             (move o1 -9 q)
             (call set 2)
(label 4)    (adjsp q -10)
             (popj p)
)

(%put (quote update-method) (quote lisp::%args-documentation) (quote (fn-name ivs called-methods))) 
(%put (quote update-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote *calling-ivs*) (quote lisp::globally-special) t) 
(or (boundp (quote *calling-ivs*)) (setq *calling-ivs* nil)) 
(quote *calling-ivs*) 
(%put (quote *calling-method*) (quote lisp::globally-special) t) 
(or (boundp (quote *calling-method*)) (setq *calling-method* nil)) 
(quote *calling-method*) 
(%put (quote *called-methods*) (quote lisp::globally-special) t) 
(or (boundp (quote *called-methods*)) (setq *called-methods* nil)) 
(quote *called-methods*) 
(%put (quote internal-define-method) (quote lisp::%fun-documentation) (quote "Method-fn-name is a method-function-name (i.e. a symbol nobody else knows about).
  Env is an iv-environment. Args is the arglist.
  Body is a list of forms.

  Expands to a form that, when evaluated, defines a handler.")) 

#_(lap #0_internal-define-method macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(5 "Macro ~S cannot be called with ~S args." internal-define-method compiler-let *calling-method* quote *calling-ivs* ((*called-methods* nil)) *called-methods* symbol-macro-let %calling-method %calling-ivs defun-default-handler install-method)
       (code-start)
(label 1)    (adjsp q 17)
             (movem o1 -16 q)
             (move o1 -16 q)
             (call length 1)
             (movem o1 -15 q)
             (move o2 (constant 0))
             (move o1 -15 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -16 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -16 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -15 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -12 q)
             (move o6 (constant 3))
             (movem o6 -11 q)
             (move o2 -15 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -10 q)
             (move o1 -14 q)
             (call flavor-internals:iv-env-vector 1)
             (move o2 o1)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -9 q)
             (move o3 (constant 7))
             (move o1 -10 q)
             (move o2 -9 q)
             (call list* 3)
             (movem o1 -10 q)
             (move o6 (constant 6))
             (movem o6 -9 q)
             (move o6 (constant 4))
             (movem o6 -8 q)
             (move o6 (constant 8))
             (movem o6 -7 q)
             (move o2 -15 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 10))
             (call list 2)
             (movem o1 -5 q)
             (move o1 -14 q)
             (call flavor-internals:iv-env-vector 1)
             (move o2 o1)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 11))
             (call list 2)
             (movem o1 -4 q)
             (move o1 -14 q)
             (call flavor-internals::iv-env-bindings 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call list* 3)
             (movem o1 -5 q)
             (move o4 -12 q)
             (move o1 (constant 12))
             (move o2 -15 q)
             (move o3 -13 q)
             (call list* 4)
             (movem o1 -4 q)
             (move o2 -15 q)
             (move o1 (constant 13))
             (call list 2)
             (move o4 o1)
             (move o1 (constant 9))
             (move o2 -5 q)
             (move o3 -4 q)
             (call list 4)
             (push q o1)
             (move o1 -12 q)
             (move o2 -11 q)
             (move o3 -10 q)
             (move o4 -9 q)
             (move o5 -8 q)
             (call list 6)
(label 3)    (adjsp q -17)
             (popj p)
)

(%put (quote internal-define-method) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote internal-define-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_iv macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." iv *calling-method* %instance-ref self svref (entry-map %entry) *calling-ivs* position quote (%calling-ivs))
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -9 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (skipn nil (special 3))
             (jrst 6)
             (move o2 (special 8))
             (move o1 -8 q)
             (call position 2)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 (constant 7))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list 3)
             (jrst 7)
(label 6)    (move o2 -8 q)
             (move o1 (constant 10))
             (call list 2)
             (movem o1 -2 q)
             (move o3 (constant 11))
             (move o1 (constant 9))
             (move o2 -2 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 (constant 7))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list 3)
(label 7)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote iv) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote iv) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_iv-bound-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." iv-bound-p *calling-method* slot-unbound-p self svref (entry-map %entry) *calling-ivs* position quote (%calling-ivs))
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -9 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (skipn nil (special 3))
             (jrst 6)
             (move o2 (special 8))
             (move o1 -8 q)
             (call position 2)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 (constant 7))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list 3)
             (jrst 7)
(label 6)    (move o2 -8 q)
             (move o1 (constant 10))
             (call list 2)
             (movem o1 -2 q)
             (move o3 (constant 11))
             (move o1 (constant 9))
             (move o2 -2 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 (constant 7))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list 3)
(label 7)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote iv-bound-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote iv-bound-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_find-method macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." find-method *calling-method* interpreter-find-method quote (%calling-method self %entry))
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (skipn nil (special 3))
             (jrst 6)
             (move o1 -4 q)
             (call flavor-internals::compiler-find-method 1)
             (jrst 7)
(label 6)    (move o2 -4 q)
             (move o1 (constant 5))
             (call list 2)
             (movem o1 -2 q)
             (move o3 (constant 6))
             (move o1 (constant 4))
             (move o2 -2 q)
             (call list* 3)
(label 7)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote find-method) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote find-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_interpreter-find-method expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(0 2)
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (movem o2 -10 q)
             (movem o3 -9 q)
             (movem o4 -8 q)
             (move o1 -10 q)
             (call symbol-value 1)
             (call flavor-internals::method-calls 1)
             (movem o1 -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
(label 7)    (skipe nil -7 q)
             (jrst 8)
             (move o1 -10 q)
             (call flavor-internals::remap-method 1)
             (move o1 -10 q)
             (call symbol-value 1)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call flavor-internals::method-calls 1)
             (move o2 o1)
             (move o1 -11 q)
             (call cons 2)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o6 -9 q)
             (movem o6 -5 q)
(label 14)   (move o1 -5 q)
             (call system::%instance-vector 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call aref 2)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call system:instancep 1)
             (jumpe o1 15)
             (move o6 -4 q)
             (movem o6 -5 q)
             (jrst 16)
(label 15)   (move o1 -5 q)
             (jrst 10)
(label 16)   (jrst 14)
(label 10)   (call system::%instance-vector 1)
             (movem o1 -5 q)
             (move o2 (constant 0))
             (move o1 -5 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o2 -8 q)
             (move o1 -5 q)
             (call flavor-internals::do-map-method 2)
             (move o1 -6 q)
             (movei n 1)
             (jrst 3)
(label 8)    (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -11 q)
             (move o1 -5 q)
             (call eq 2)
             (jumpe o1 17)
             (move o1 -7 q)
             (move o1 1 o1)
             (call length 1)
             (jrst 3)
(label 17)   (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -4 q)
             (move o6 -5 q)
             (movem o6 -7 q)
             (move o6 -4 q)
             (movem o6 -6 q)
             (jrst 7)
(label 3)    (adjsp q -12)
             (popj p)
)

(%put (quote interpreter-find-method) (quote lisp::%args-documentation) (quote (method caller self %entry))) 
(%put (quote interpreter-find-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_compiler-find-method expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(*called-methods* 0)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o6 (special 0))
             (movem o6 -4 q)
             (move o6 (constant 1))
             (movem o6 -3 q)
(label 7)    (skipe nil -4 q)
             (jrst 8)
             (move o2 (special 0))
             (move o1 -5 q)
             (call cons 2)
             (movem o1 (special 0))
             (move o1 -3 q)
             (movei n 1)
             (jrst 3)
(label 8)    (move o1 -4 q)
             (move o1 0 o1)
             (movem o1 -2 q)
             (move o2 -5 q)
             (move o1 -2 q)
             (call eq 2)
             (jumpe o1 10)
             (move o1 -4 q)
             (move o1 1 o1)
             (call length 1)
             (jrst 3)
(label 10)   (move o1 -4 q)
             (move o1 1 o1)
             (movem o1 -2 q)
             (move o1 -3 q)
             (call 1+ 1)
             (movem o1 -1 q)
             (move o6 -2 q)
             (movem o6 -4 q)
             (move o6 -1 q)
             (movem o6 -3 q)
             (jrst 7)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote compiler-find-method) (quote lisp::%args-documentation) (quote (method))) 
(%put (quote compiler-find-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 

#_(lap #0_install-method macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." install-method update-method quote *calling-ivs* #() *called-methods*)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o2 -6 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -4 q)
             (move o2 (special 5))
             (jumpn o2 6)
             (move o2 (constant 6))
(label 6)    (move o1 (constant 4))
             (call list 2)
             (movem o1 -3 q)
             (move o2 (special 7))
             (move o1 (constant 4))
             (call list 2)
             (move o4 o1)
             (move o1 (constant 3))
             (move o2 -4 q)
             (move o3 -3 q)
             (call list 4)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote install-method) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote install-method) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote method-call) (quote lisp::%fun-documentation) (quote "Macro used inside internal-define-method, analogous to funcall.
  Call like (method-call method-fn-name arg1 arg2...).")) 

#_(lap #0_method-call macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." method-call let* slot find-method ((entry (aref (entry-cmap %entry) slot))) funcall-entry self (get-message) entry)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -10 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o2 -9 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -6 q)
             (move o2 (constant 6))
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -6 q)
             (move o5 -8 q)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (move o3 (constant 9))
             (move o4 (constant 10))
             (call list* 5)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list 3)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote method-call) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote method-call) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote method-apply) (quote lisp::%fun-documentation) (quote "Macro used inside internal-define-method, analogous to apply.
  Call like (method-apply method-fn-name arg1 arg2).")) 

#_(lap #0_method-apply macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." method-apply let* slot find-method ((entry (aref (entry-cmap %entry) slot))) apply-entry self (get-message) entry)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -10 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o2 -9 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -6 q)
             (move o2 (constant 6))
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -6 q)
             (move o5 -8 q)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (move o3 (constant 9))
             (move o4 (constant 10))
             (call list* 5)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list 3)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote method-apply) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote method-apply) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>KERNEL.CLISP.6")) 
(%put (quote define-set-method) (quote lisp::%fun-documentation) (quote "Defines a method that sets the given variable name.")) 
;;;**************** KLUDGE!!! /Victor

(defun define-set-method (method-fn-name var)
  "Defines a method that sets the given variable name."
  (let ((vec (make-array 1 :initial-element var)))
    (defun-default-handler random-setter (new)
      (setf (%instance-ref self (svref (entry-map %entry) 0)) new))
    (setf (symbol-function method-fn-name)
	  (symbol-function 'random-setter))
    (update-method method-fn-name vec nil)))

(defun define-get-method (method-fn-name var)
  "Defines a method that returns the given named variable."
  (let ((vec (make-array 1 :initial-element var)))
    (defun-default-handler random-getter ()
      (%instance-ref self (svref (entry-map %entry) 0)))
    (setf (symbol-function method-fn-name)
	  (symbol-function 'random-getter))
    (update-method method-fn-name vec nil)))
