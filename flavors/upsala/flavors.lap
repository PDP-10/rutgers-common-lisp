
;;; CLC v1.5 compiling SS:<VICTOR.FLAVORS>F1.CLISP.1

(in-package (quote user::flavors)) 
(use-package (quote flavor-internals)) 
(export (quote (send self instancep symeval-in-instance set-in-instance get-handler-for iv-bound-p vanilla-flavor *all-flavor-names* *undefined-flavor-names* *flavor-compile-methods* *default-combination* *dirty-flavors* cleanup-all-flavors cleanup-flavor without-cleaning-flavors defflavor undefflavor defmethod defwrapper defwhopper continue-whopper lexpr-continue-whopper continue-whopper-all undefmethod recompile-flavor make-instance flavor-allowed-init-keywords flavor-allows-init-keyword-p compile-flavor compiler-compile-flavors reconstruct-defflavor method-list call-methods wrapper-mix defcombination-ordering defcombination order-methods order-wrappers))) 
(shadow (quote (nreversef))) 

#_(lap #0_extract-doc-and-declares expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(declare)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o6 -6 q)
             (movem o6 -5 q)
             (movem nil -4 q)
(label 7)    (move o1 -5 q)
             (call endp 1)
             (jumpn1 o1 10)
             (move o1 -5 q)
             (move o1 0 o1)
             (call stringp 1)
             (jumpn o1 11)
             (move o1 -5 q)
             (move o1 0 o1)
             (call listp 1)
             (jumpe1 o1 13)
             (move o1 -5 q)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call eq 2)
             (skipe nil o1)
(label 13)
(label 11)
(label 10)   (jrst 8)
             (move o1 -4 q)
             (call nreverse 1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (movei n 2)
             (jrst 3)
(label 8)    (move o1 -5 q)
             (move o1 1 o1)
             (movem o1 -3 q)
             (move o1 -5 q)
             (move o1 0 o1)
             (movem o1 -2 q)
             (move o2 -4 q)
             (move o1 -2 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o6 -3 q)
             (movem o6 -5 q)
             (move o6 -2 q)
             (movem o6 -4 q)
             (jrst 7)
(label 3)    (adjsp q -7)
             (popj p)
)

(%put (quote extract-doc-and-declares) (quote lisp::%args-documentation) (quote (forms))) 
(%put (quote extract-doc-and-declares) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_mydlet macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." mydlet pop progn let*)
       (code-start)
(label 1)    (adjsp q 16)
             (movem o1 -15 q)
             (move o1 -15 q)
             (call length 1)
             (movem o1 -14 q)
             (move o2 (constant 0))
             (move o1 -14 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -15 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -15 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o1 -15 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -13 q)
             (movem nil -12 q)
             (move o6 -14 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 10)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 11)
             (jrst 6)
(label 11)   (move o1 -10 q)
             (move o1 0 o1)
             (jumpe o1 14)
             (call gensym 0)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -8 q)
             (move o2 -12 q)
             (move o1 -8 q)
             (call cons 2)
             (movem o1 -12 q)
             (move o1 nil)
             (call list 1)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -6 q)
(label 19)   (skipe nil -6 q)
             (jrst 20)
             (jrst 15)
(label 20)   (move o6 -7 q)
             (movem o6 -5 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -9 q)
             (move o1 (constant 3))
             (call list 2)
             (move o2 o1)
             (move o1 -4 q)
             (call list 2)
             (movem o1 -3 q)
             (move o2 -12 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call list 1)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -5 q)
             (call rplacd 2)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (jrst 19)
(label 15)
(label 14)   (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 10)
(label 6)    (skipe nil -12 q)
             (jrst 26)
             (move o2 -13 q)
             (move o1 (constant 4))
             (call cons 2)
             (jrst 25)
(label 26)   (move o1 -12 q)
             (call nreverse 1)
             (movem o1 -10 q)
             (move o3 -13 q)
             (move o1 (constant 5))
             (move o2 -10 q)
             (call list* 3)
(label 25)
(label 3)    (adjsp q -16)
             (popj p)
)

(%put (quote mydlet) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote mydlet) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_private-structure-printer expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_("#<~A ~A>")
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (movem o3 -5 q)
             (move o1 -7 q)
             (call type-of 1)
             (movem o1 -2 q)
             (move o1 -7 q)
             (call system::%cl-pointer-to-fixnum 1)
             (move o4 o1)
             (move o1 -6 q)
             (move o2 (constant 0))
             (move o3 -2 q)
             (call format 4)
             (adjsp q -8)
             (popj p)
)

(%put (quote private-structure-printer) (quote lisp::%args-documentation) (quote (object stream depth))) 
(%put (quote private-structure-printer) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_defbits macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." defbits 0 eval-when (compile eval load) defmacro string "-" (thing) list (quote logbitp))
       (code-start)
(label 1)    (adjsp q 14)
             (movem o1 -13 q)
             (move o1 -13 q)
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 0))
             (move o1 -12 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -13 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -13 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -12 q)
             (move o1 -13 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o6 (constant 3))
             (movem o6 -10 q)
             (move o6 -11 q)
             (movem o6 -9 q)
             (movem nil -8 q)
(label 10)   (skipe nil -9 q)
             (jrst 11)
             (move o3 -8 q)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list* 3)
             (jrst 6)
(label 11)   (move o1 -12 q)
             (call symbol-name 1)
             (movem o1 -5 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (call symbol-name 1)
             (move o4 o1)
             (move o1 (constant 7))
             (move o2 -5 q)
             (move o3 (constant 8))
             (call concatenate 4)
             (call intern 1)
             (movem o1 -6 q)
             (move o4 (constant 9))
             (move o1 (constant 10))
             (move o2 (constant 11))
             (move o3 -10 q)
             (call list* 4)
             (move o4 o1)
             (move o1 (constant 6))
             (move o2 -6 q)
             (move o3 (constant 9))
             (call list 4)
             (movem o1 -7 q)
             (move o2 -8 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -7 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o6 -7 q)
             (movem o6 -10 q)
             (move o6 -6 q)
             (movem o6 -9 q)
             (jrst 10)
(label 6)
(label 3)    (adjsp q -14)
             (popj p)
)

(%put (quote defbits) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defbits) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote my-assoc) (quote lisp::%fun-documentation) (quote "Just like simple assoc, but has a nice setf method.")) 

#_(lap #0_my-assoc macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." my-assoc cdr assoc)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 (constant 4))
             (move o2 -6 q)
             (call list 3)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote my-assoc) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote my-assoc) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote my-assoc) (quote lisp::setf-inverse)) 
(%put (quote my-assoc) (quote lisp::setf-method-expander) (function (lambda (lisp::%lambda-list) (cond ((not (= (length lisp::%lambda-list) 3)) (error "Setf expander for ~S cannot be called with ~S args." (quote my-assoc) (1- (length lisp::%lambda-list)))) (t (let* ((key (car (cdr lisp::%lambda-list))) (list (car (cdr (cdr lisp::%lambda-list))))) (multiple-value-bind (temps vals stores store-form access-form) (get-setf-method list) (let ((ktemp (gensym)) (list (gensym)) (assoc (gensym)) (store (gensym)) (stemp (first stores))) (values (cons ktemp (nconc temps (list list assoc))) (cons key (nconc vals (list access-form (list (quote assoc) ktemp list)))) (list store) (list (quote if) assoc (list (quote setf) (list (quote cdr) assoc) store) (list (quote let) (list (list stemp (list (quote cons) (list (quote cons) ktemp store) list))) store-form store)) (list (quote cdr) assoc)))))))))) 
(quote my-assoc) 

#_(lap #0_nreversef macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." nreversef nreverse let*)
       (code-start)
(label 1)    (adjsp q 15)
             (movem o1 -14 q)
             (move o1 -14 q)
             (call length 1)
             (movem o1 -13 q)
             (move o2 (constant 0))
             (move o1 -13 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -14 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -14 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o1 -13 q)
             (call get-setf-method 1)
             (adjust-values 5)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (movem o3 -10 q)
             (movem o4 -9 q)
             (movem o5 -8 q)
             (move o6 -12 q)
             (movem o6 -7 q)
             (move o6 -11 q)
             (movem o6 -6 q)
             (movem nil -5 q)
(label 10)   (skipe nil -7 q)
             (jrst 11)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -8 q)
             (move o1 (constant 3))
             (call list 2)
             (move o2 o1)
             (move o1 -4 q)
             (call list 2)
             (movem o1 -4 q)
             (move o2 -5 q)
             (move o1 -4 q)
             (call cons 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call nreverse 1)
             (movem o1 -3 q)
             (move o3 -9 q)
             (move o1 (constant 4))
             (move o2 -3 q)
             (call list 3)
             (jrst 6)
(label 11)   (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -4 q)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -3 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -2 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 -2 q)
             (call list 2)
             (movem o1 -2 q)
             (move o2 -5 q)
             (move o1 -2 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o6 -4 q)
             (movem o6 -7 q)
             (move o6 -3 q)
             (movem o6 -6 q)
             (move o6 -2 q)
             (movem o6 -5 q)
             (jrst 10)
(label 6)
(label 3)    (adjsp q -15)
             (popj p)
)

(%put (quote nreversef) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote nreversef) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_dovec macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." dovec let %vec dotimes (%i (length %vec)) ((aref %vec %i)))
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -10 q)
             (move o2 (constant 0))
             (move o1 -10 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -11 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o2 -9 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -6 q)
             (move o2 (constant 7))
             (move o1 -10 q)
             (call cons 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 -8 q)
             (move o1 (constant 3))
             (move o2 -2 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 (constant 6))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list 3)
(label 3)    (adjsp q -12)
             (popj p)
)

(%put (quote dovec) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote dovec) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote %stacks%) (quote lisp::globally-special) t) 
(or (boundp (quote %stacks%)) (setq %stacks% (make-array 100 :adjustable t :fill-pointer 0))) 
(quote %stacks%) 

#_(lap #0_with-stacks macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." with-stacks let ((cond ((> (length %stacks%) 0) (let ((res (vector-pop %stacks%))) (setf (fill-pointer res) 0) res)) (t (make-array 1000 :adjustable t :fill-pointer 0)))) unwind-protect progn fill :end array-dimension (0) vector-push-extend (%stacks%))
       (code-start)
(label 1)    (adjsp q 24)
             (movem o1 -23 q)
             (move o1 -23 q)
             (call length 1)
             (movem o1 -22 q)
             (move o2 (constant 0))
             (move o1 -22 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -23 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -23 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -22 q)
             (move o1 -23 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -21 q)
             (move o1 -21 q)
             (call flavors::extract-doc-and-declares 1)
             (adjust-values 2)
             (movem o1 -20 q)
             (movem o2 -19 q)
             (move o1 nil)
             (call list 1)
             (movem o1 -17 q)
             (move o6 -17 q)
             (movem o6 -16 q)
             (move o6 -22 q)
             (movem o6 -15 q)
(label 10)   (skipe nil -15 q)
             (jrst 11)
             (move o1 -17 q)
             (move o1 1 o1)
             (movem o1 -17 q)
             (jrst 6)
(label 11)   (move o6 -16 q)
             (movem o6 -14 q)
             (move o1 -15 q)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o2 (constant 4))
             (move o1 -13 q)
             (call cons 2)
             (call list 1)
             (movem o1 -16 q)
             (move o2 -16 q)
             (move o1 -14 q)
             (call rplacd 2)
             (move o1 -15 q)
             (move o1 1 o1)
             (movem o1 -15 q)
             (jrst 10)
(label 6)    (move o2 -19 q)
             (move o1 (constant 6))
             (call cons 2)
             (movem o1 -14 q)
             (move o1 nil)
             (call list 1)
             (movem o1 -13 q)
             (move o6 -13 q)
             (movem o6 -12 q)
             (move o6 -22 q)
             (movem o6 -11 q)
(label 19)   (skipe nil -11 q)
             (jrst 20)
             (move o1 -13 q)
             (move o1 1 o1)
             (move o3 o1)
             (jrst 15)
(label 20)   (move o6 -12 q)
             (movem o6 -10 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o3 (constant 10))
             (move o1 (constant 9))
             (move o2 -9 q)
             (call list* 3)
             (move o5 o1)
             (move o1 (constant 7))
             (move o2 -9 q)
             (move o3 nil)
             (move o4 (constant 8))
             (call list 5)
             (movem o1 -7 q)
             (move o3 (constant 12))
             (move o1 (constant 11))
             (move o2 -9 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 -7 q)
             (call list 3)
             (call list 1)
             (movem o1 -12 q)
             (move o2 -12 q)
             (move o1 -10 q)
             (call rplacd 2)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (jrst 19)
(label 15)   (move o1 (constant 5))
             (move o2 -14 q)
             (call list* 3)
             (call list 1)
             (move o2 o1)
             (move o1 -20 q)
             (call append 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -17 q)
             (call list* 3)
(label 3)    (adjsp q -24)
             (popj p)
)

(%put (quote with-stacks) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote with-stacks) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_set-stack-length macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." set-stack-length let stack size ((cond ((>= (array-dimension stack 0) size) (setf (fill-pointer stack) size)) (t (adjust-array stack size) (setf (fill-pointer stack) size)))))
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -6 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 -3 q)
             (call list 2)
             (movem o1 -3 q)
             (move o3 (constant 6))
             (move o1 (constant 3))
             (move o2 -3 q)
             (call list* 3)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote set-stack-length) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote set-stack-length) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote *changed-method-stacks*) (quote lisp::globally-special) t) 
(or (boundp (quote *changed-method-stacks*)) (setq *changed-method-stacks* (let ((res (make-array 100 :fill-pointer t :adjustable t))) (dotimes (i 100) (setf (aref res i) (make-array 10 :adjustable t :fill-pointer 0))) res))) 
(%put (quote *changed-method-stacks*) (quote lisp::%var-documentation) (quote "A bunch of small vectors used to record which methods need recalculating
  for a flavor.")) 
(quote *changed-method-stacks*) 

#_(lap #0_alloc-tiny-stack expr
       (entry-points (1 2-many 2-many 2-many 2-many 2-many 2-many))
       #0_(*changed-method-stacks* 10 :adjustable t :fill-pointer 0)
       (code-start)
(label 1)    (adjsp q 6)
             (move o1 (special 0))
             (call vector-pop 1)
             (jumpn o1 3)
             (move o5 (constant 5))
             (move o1 (constant 1))
             (move o2 (constant 2))
             (move o3 (constant 3))
             (move o4 (constant 4))
             (call make-array 5)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote alloc-tiny-stack) (quote lisp::%args-documentation) (quote nil)) 
(%put (quote alloc-tiny-stack) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_dealloc-tiny-stack macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." dealloc-tiny-stack let %x shiftf (nil) ((when %x (fill %x nil :end (array-dimension %x 0)) (vector-push-extend %x *changed-method-stacks*))))
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o3 (constant 6))
             (move o1 (constant 5))
             (move o2 -6 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -4 q)
             (move o3 (constant 7))
             (move o1 (constant 3))
             (move o2 -4 q)
             (call list* 3)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote dealloc-tiny-stack) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote dealloc-tiny-stack) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote flavor-function-name) (quote lisp::%fun-documentation) (quote "Usually called with flavor-name, method, and method-type.
  Interns the name in the package of the first thing (a symbol).")) 

#_(lap #0_flavor-function-name macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-function-name intern concatenate (quote string) symbol-name "-" let thing ((if (symbolp thing) (let ((*print-case* :upcase)) (prin1-to-string thing)) thing)) symbol-package)
       (code-start)
(label 1)    (adjsp q 17)
             (movem o1 -16 q)
             (move o1 -16 q)
             (call length 1)
             (movem o1 -15 q)
             (move o2 (constant 0))
             (move o1 -15 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -16 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -16 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -15 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -14 q)
             (move o2 -15 q)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -10 q)
             (move o1 nil)
             (call list 1)
             (movem o1 -9 q)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o6 -14 q)
             (movem o6 -7 q)
(label 10)   (skipe nil -7 q)
             (jrst 11)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o4 o1)
             (jrst 6)
(label 11)   (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -5 q)
             (move o1 (constant 9))
             (call list 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 (constant 10))
             (move o1 (constant 8))
             (move o2 -2 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 7))
             (call list 2)
             (move o2 o1)
             (move o1 -8 q)
             (call nconc 2)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call last 1)
             (movem o1 -8 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -7 q)
             (jrst 10)
(label 6)    (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 -10 q)
             (call list* 4)
             (movem o1 -12 q)
             (move o2 -15 q)
             (move o1 (constant 11))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -12 q)
             (call list 3)
(label 3)    (adjsp q -17)
             (popj p)
)

(%put (quote flavor-function-name) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-function-name) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_set-name expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(set-name string "SET-" keyword)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (jumpn o1 3)
             (move o1 -8 q)
             (call symbol-name 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call concatenate 3)
             (movem o1 -6 q)
             (move o1 (constant 3))
             (call find-package 1)
             (move o2 o1)
             (move o1 -6 q)
             (call intern 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o1 -7 q)
             (movei n 1)
(label 3)    (adjsp q -9)
             (popj p)
)

(%put (quote set-name) (quote lisp::%args-documentation) (quote (iv))) 
(%put (quote set-name) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_get-name expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(get-name keyword)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (jumpn o1 3)
             (move o1 -8 q)
             (call symbol-name 1)
             (movem o1 -6 q)
             (move o1 (constant 1))
             (call find-package 1)
             (move o2 o1)
             (move o1 -6 q)
             (call intern 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o1 -7 q)
             (movei n 1)
(label 3)    (adjsp q -9)
             (popj p)
)

(%put (quote get-name) (quote lisp::%args-documentation) (quote (iv))) 
(%put (quote get-name) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_combination-ordering macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." combination-ordering let %combo ((or (get %combo (quote ordering)) (error "No such combination: ~S." %combo))))
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 (constant 5))
             (move o1 (constant 3))
             (move o2 -2 q)
             (call list* 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote combination-ordering) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote combination-ordering) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_combination-mixer macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." combination-mixer let %combo ((or (get %combo (quote mixer)) (error "No such combination: ~S." %combo))))
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 (constant 5))
             (move o1 (constant 3))
             (move o2 -2 q)
             (call list* 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote combination-mixer) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote combination-mixer) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_make-combination macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." make-combination progn setf get ((quote ordering)) ((quote mixer)))
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -10 q)
             (move o2 (constant 0))
             (move o1 -10 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -11 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o3 (constant 6))
             (move o1 (constant 5))
             (move o2 -10 q)
             (call list* 3)
             (movem o1 -5 q)
             (move o3 (constant 7))
             (move o1 (constant 5))
             (move o2 -10 q)
             (call list* 3)
             (movem o1 -3 q)
             (move o5 -8 q)
             (move o1 (constant 4))
             (move o2 -5 q)
             (move o3 -9 q)
             (move o4 -3 q)
             (call list 5)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -12)
             (popj p)
)

(%put (quote make-combination) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote make-combination) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_make-method-env expr
       (entry-points (2 3 4 5 6 7 8) rest)
       #0_(6 -2 1 0 method-env :bindings* 2 t ((:ables . 5) (:defaults . 4) (:numordered . 3) (:bindings* . 2) (:vector . 1)) "Unknown option to DefStruct constructor.")
       (code-start)
(label 2)    (move o1 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest1)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest2)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest3)
             (jrst 1)
(label 6)    (movei w2 4)
             (icall rest4)
             (jrst 1)
(label 7)    (movei w2 5)
             (icall rest5)
             (jrst 1)
(label 8)    (movei w2 0)
             (icall restx)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -5 q)
             (move o3 (constant 2))
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -5 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -5 q)
             (movem o6 -6 q)
             (movem nil -5 q)
(label 14)   (skipe nil -7 q)
             (jrst 15)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call memq 2)
             (jumpn o1 17)
             (move o3 (constant 7))
             (move o1 -6 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 17)   (move o1 -6 q)
             (movei n 1)
             (jrst 10)
(label 15)   (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 8))
             (move o1 -3 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 20)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 -4 q)
             (call lisp::%sp-svset 3)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -5 q)
             (jrst 19)
(label 20)   (move o1 (constant 9))
             (call error 1)
(label 19)   (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -7 q)
             (jrst 14)
(label 10)   (adjsp q -9)
             (popj p)
)

(%put (quote make-method-env) (quote lisp::%args-documentation) (quote (&rest lisp::initial-values))) 
(%put (quote make-method-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-env-ables expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(5)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-env-ables) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-env-ables) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-env-defaults expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-env-defaults) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-env-defaults) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-env-numordered expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-env-numordered) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-env-numordered) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(setf (symbol-function (quote copy-method-env)) (function lisp::built-in-copier)) 

#_(lap #0_method-env-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 method-env lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote method-env-p) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote method-env-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote method-env-numordered) (quote lisp::setf-inverse)) 
(%put (quote method-env-numordered) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 3 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-env-numordered) (quote lisp::%setf-documentation)) 
(quote method-env-numordered) 
(remprop (quote method-env-defaults) (quote lisp::setf-inverse)) 
(%put (quote method-env-defaults) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 4 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-env-defaults) (quote lisp::%setf-documentation)) 
(quote method-env-defaults) 
(remprop (quote method-env-ables) (quote lisp::setf-inverse)) 
(%put (quote method-env-ables) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 5 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-env-ables) (quote lisp::%setf-documentation)) 
(quote method-env-ables) 
(%put (quote method-env) (quote lisp::structure-print) (quote private-structure-printer)) 
(%put (quote method-env) (quote lisp::included-structure) (quote iv-env)) 
(%put (quote method-env) (quote lisp::defstruct-description) (quote (method-env vector ((:print-function private-structure-printer) (:include iv-env)) 6 method-env- make-method-env (method-env-ables method-env-defaults method-env-numordered flavor-internals::iv-env-bindings* iv-env-vector) (ables defaults numordered flavor-internals::bindings* vector) (nil nil nil t nil) (nil nil nil nil (:read-only t)) ((method-env-ables . 5) (method-env-defaults . 4) (method-env-numordered . 3) (flavor-internals::iv-env-bindings* . 2) (iv-env-vector . 1)) nil ((:ables . 5) (:defaults . 4) (:numordered . 3) (:bindings* . 2) (:vector . 1))))) 
(quote method-env) 

#_(lap #0_make-instance-env expr
       (entry-points (2 3 4 5 6 7 8) rest)
       #0_(7 -2 1 0 instance-env :bindings* 2 t ((:required . 6) (:ables . 5) (:defaults . 4) (:numordered . 3) (:bindings* . 2) (:vector . 1)) "Unknown option to DefStruct constructor.")
       (code-start)
(label 2)    (move o1 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest1)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest2)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest3)
             (jrst 1)
(label 6)    (movei w2 4)
             (icall rest4)
             (jrst 1)
(label 7)    (movei w2 5)
             (icall rest5)
             (jrst 1)
(label 8)    (movei w2 0)
             (icall restx)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -5 q)
             (move o3 (constant 2))
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -5 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -5 q)
             (movem o6 -6 q)
             (movem nil -5 q)
(label 14)   (skipe nil -7 q)
             (jrst 15)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call memq 2)
             (jumpn o1 17)
             (move o3 (constant 7))
             (move o1 -6 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 17)   (move o1 -6 q)
             (movei n 1)
             (jrst 10)
(label 15)   (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 8))
             (move o1 -3 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 20)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 -4 q)
             (call lisp::%sp-svset 3)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -5 q)
             (jrst 19)
(label 20)   (move o1 (constant 9))
             (call error 1)
(label 19)   (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -7 q)
             (jrst 14)
(label 10)   (adjsp q -9)
             (popj p)
)

(%put (quote make-instance-env) (quote lisp::%args-documentation) (quote (&rest lisp::initial-values))) 
(%put (quote make-instance-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_instance-env-required expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(6)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote instance-env-required) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote instance-env-required) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(setf (symbol-function (quote copy-instance-env)) (function lisp::built-in-copier)) 

#_(lap #0_instance-env-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 instance-env lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote instance-env-p) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote instance-env-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote instance-env-required) (quote lisp::setf-inverse)) 
(%put (quote instance-env-required) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 6 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote instance-env-required) (quote lisp::%setf-documentation)) 
(quote instance-env-required) 
(%put (quote instance-env) (quote lisp::structure-print) (quote private-structure-printer)) 
(%put (quote instance-env) (quote lisp::included-structure) (quote method-env)) 
(%put (quote instance-env) (quote lisp::defstruct-description) (quote (instance-env vector ((:print-function private-structure-printer) (:include method-env)) 7 instance-env- make-instance-env (instance-env-required method-env-ables method-env-defaults method-env-numordered flavor-internals::iv-env-bindings* iv-env-vector) (required ables defaults numordered flavor-internals::bindings* vector) (nil nil nil nil t nil) (nil nil nil nil nil (:read-only t)) ((instance-env-required . 6) (method-env-ables . 5) (method-env-defaults . 4) (method-env-numordered . 3) (flavor-internals::iv-env-bindings* . 2) (iv-env-vector . 1)) nil ((:required . 6) (:ables . 5) (:defaults . 4) (:numordered . 3) (:bindings* . 2) (:vector . 1))))) 
(quote instance-env) 

#_(lap #0_instance-env-vector expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 2)
             (movem o1 -1 q)
             (move o1 -1 q)
             (call flavors::instance-env-required 1)
             (adjsp q -2)
             (popj p)
)

(%put (quote instance-env-vector) (quote lisp::%args-documentation) (quote (inst-env))) 
(%put (quote instance-env-vector) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_ables-outside-accessible macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." ables-outside-accessible logbitp 3)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote ables-outside-accessible) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote ables-outside-accessible) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_ables-initable macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." ables-initable logbitp)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 0))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote ables-initable) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote ables-initable) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_ables-settable macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." ables-settable logbitp 1)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote ables-settable) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote ables-settable) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_ables-gettable macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." ables-gettable logbitp 0)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote ables-gettable) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote ables-gettable) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_var-able macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." var-able aref ables or position (var-stack) error "No such instance variable - ~S.")
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -9 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o3 (constant 7))
             (move o1 (constant 6))
             (move o2 -8 q)
             (call list* 3)
             (movem o1 -4 q)
             (move o3 -8 q)
             (move o1 (constant 8))
             (move o2 (constant 9))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -4 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote var-able) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote var-able) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_make-env expr
       (entry-points (2-few 2-few 2-few 2-few 2-few 2-few 2-few 1 2-many))
       #0_(%stacks% 0 1000 :adjustable t :fill-pointer unsupplied required :initial-element 1 "No such instance variable - ~S." 2 3 :numordered :vector :defaults :ables :end)
       (code-start)
(label 1)    (adjsp q 23)
             (movem o1 -21 q)
             (movem o2 -20 q)
             (movem o3 -19 q)
             (movem o4 -18 q)
             (movem o5 -17 q)
             (move o1 (special 0))
             (call length 1)
             (movem o1 -15 q)
             (move o2 (constant 1))
             (move o1 -15 q)
             (call > 2)
             (jumpe o1 4)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -15 q)
             (move o2 (constant 1))
             (move o1 -15 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -15 q)
             (movem o6 -16 q)
             (jrst 3)
(label 4)    (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -16 q)
(label 3)    (move o1 (special 0))
             (call length 1)
             (movem o1 -14 q)
             (move o2 (constant 1))
             (move o1 -14 q)
             (call > 2)
             (jumpe o1 8)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -14 q)
             (move o2 (constant 1))
             (move o1 -14 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -14 q)
             (movem o6 -15 q)
             (jrst 7)
(label 8)    (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -15 q)
(label 7)    (icall cunwind)
             (jrst 11)
             (jrst 12)
             (move o6 -20 q)
             (movem o6 -14 q)
             (move o1 -14 q)
             (move o1 0 o1)
             (movem o1 -13 q)
(label 17)   (move o1 -14 q)
             (call atom 1)
             (jumpe o1 18)
             (jrst 13)
(label 18)   (move o2 -16 q)
             (move o1 -13 q)
             (call vector-push-extend 2)
             (move o2 -15 q)
             (move o1 (constant 6))
             (call vector-push-extend 2)
             (move o1 -14 q)
             (move o1 1 o1)
             (movem o1 -14 q)
             (move o1 -14 q)
             (move o1 0 o1)
             (movem o1 -13 q)
             (jrst 17)
(label 13)   (move o1 -16 q)
             (call length 1)
             (movem o1 -14 q)
             (movem nil -13 q)
             (move o6 -21 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 24)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 25)
             (jrst 20)
(label 25)   (move o1 -11 q)
             (call listp 1)
             (jumpe o1 28)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (movem o1 -13 q)
             (skipn nil -13 q)
             (jrst 30)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -15 q)
             (move o2 -13 q)
             (call lisp::%aset 3)
             (jrst 29)
(label 30)   (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call vector-push-extend 2)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -15 q)
             (move o1 -10 q)
             (call vector-push-extend 2)
(label 29)   (jrst 27)
(label 28)   (move o2 -16 q)
             (move o1 -11 q)
             (call position 2)
             (movem o1 -13 q)
             (skipn nil -13 q)
             (jrst 35)
             (move o3 (constant 6))
             (move o1 -15 q)
             (move o2 -13 q)
             (call lisp::%aset 3)
             (jrst 34)
(label 35)   (move o2 -16 q)
             (move o1 -11 q)
             (call vector-push-extend 2)
             (move o2 -15 q)
             (move o1 (constant 6))
             (call vector-push-extend 2)
(label 34)
(label 27)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 24)
(label 20)   (move o6 -19 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 43)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 44)
             (jrst 39)
(label 44)   (move o2 -16 q)
             (move o1 -11 q)
             (call find 2)
             (jumpn o1 46)
             (move o2 -16 q)
             (move o1 -11 q)
             (call vector-push-extend 2)
             (move o2 -15 q)
             (move o1 (constant 7))
             (call vector-push-extend 2)
(label 46)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 43)
(label 39)   (move o1 -15 q)
             (call length 1)
             (movem o1 -11 q)
             (move o3 (constant 1))
             (move o1 -11 q)
             (move o2 (constant 8))
             (call make-array 3)
             (movem o1 -12 q)
             (move o6 -18 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 54)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 55)
             (jrst 50)
(label 55)   (move o6 (constant 9))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 57)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 57)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 58)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 59)
(label 58)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 59)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o6 (constant 1))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 60)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 60)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 61)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 62)
(label 61)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 62)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o6 (constant 11))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 63)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 63)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 64)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 65)
(label 64)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 65)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 54)
(label 50)   (move o6 -17 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 70)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 71)
             (jrst 66)
(label 71)   (move o6 (constant 1))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 73)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 73)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 74)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 75)
(label 74)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 75)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 70)
(label 66)   (move o6 -24 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 80)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 81)
             (jrst 76)
(label 81)   (move o6 (constant 11))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 83)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 83)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 84)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 85)
(label 84)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 85)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 80)
(label 76)   (move o6 -23 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 90)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 91)
             (jrst 86)
(label 91)   (move o6 (constant 12))
             (movem o6 -9 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call position 2)
             (skipe nil o1)
             (movem o1 -7 q)
             (jumpn o1 93)
             (move o2 -10 q)
             (move o1 (constant 10))
             (call error 2)
             (movem o1 -7 q)
(label 93)   (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 94)
             (move o6 (constant 9))
             (movem o6 -4 q)
             (jrst 95)
(label 94)   (move o6 (constant 1))
             (movem o6 -4 q)
(label 95)   (move o2 -9 q)
             (move o1 (constant 9))
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call lisp::%aset 3)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 90)
(label 86)   (move o6 (constant 13))
             (movem o6 -11 q)
             (move o6 -14 q)
             (movem o6 -10 q)
             (move o6 (constant 14))
             (movem o6 -9 q)
             (move o1 -16 q)
             (call copy-seq 1)
             (movem o1 -8 q)
             (move o6 (constant 15))
             (movem o6 -7 q)
             (move o1 -15 q)
             (call copy-seq 1)
             (push q o1)
             (push q (constant 16))
             (push q -14 q)
             (move o1 -14 q)
             (move o2 -13 q)
             (move o3 -12 q)
             (move o4 -11 q)
             (move o5 -10 q)
             (call flavors::make-method-env 8)
             (popj p)
(label 11)   (move o2 (constant 1))
             (move o1 -16 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -16 q)
             (move o2 nil)
             (move o3 (constant 17))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -16 q)
             (call vector-push-extend 2)
             (move o2 (constant 1))
             (move o1 -15 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -15 q)
             (move o2 nil)
             (move o3 (constant 17))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -15 q)
             (call vector-push-extend 2)
             (popj p)
(label 12)   (adjsp q -25)
             (popj p)
)

(%put (quote make-env) (quote lisp::%args-documentation) (quote (var-list ordered required settable gettable initable outside))) 
(%put (quote make-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_default-handler expr
       (entry-points (2-few 2-few 2-few 2 3 4 5) rest)
       #0_(:unhandled-message 0 send :print-self "Unhandled message ~S in instance ~S." "Unhandled message ~S in #<Random Instance ~S>.")
       (code-start)
(label 2)    (move o4 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest4)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest5)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall restx)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (movem o3 -8 q)
             (movem o4 -7 q)
             (move o6 -9 q)
             (movem o6 -6 q)
             (move o6 -10 q)
             (movem o6 -4 q)
(label 13)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 1))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 14)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 15)
(label 14)   (move o1 -4 q)
             (jrst 9)
(label 15)   (jrst 13)
(label 9)    (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 1))
             (move o1 -4 q)
             (call aref 2)
             (move o2 o1)
             (move o1 (constant 0))
             (call flavor-internals:get-handler 2)
             (jumpe o1 8)
             (move o5 -7 q)
             (move o1 (constant 2))
             (move o2 -10 q)
             (move o3 (constant 0))
             (move o4 -6 q)
             (call apply 5)
             (jrst 7)
(label 8)    (move o6 -10 q)
             (movem o6 -4 q)
(label 21)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 1))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 22)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 23)
(label 22)   (move o1 -4 q)
             (jrst 17)
(label 23)   (jrst 21)
(label 17)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 1))
             (move o1 -4 q)
             (call aref 2)
             (move o2 o1)
             (move o1 (constant 3))
             (call flavor-internals:get-handler 2)
             (jumpe o1 16)
             (move o3 -10 q)
             (move o1 (constant 4))
             (move o2 -6 q)
             (call error 3)
             (jrst 7)
(label 16)   (move o1 -10 q)
             (call system::%cl-pointer-to-fixnum 1)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -6 q)
             (call error 3)
(label 7)    (adjsp q -11)
             (popj p)
)

(%put (quote default-handler) (quote lisp::%args-documentation) (quote (self flavor-internals::%message flavor-internals::%entry &rest args))) 
(%put (quote default-handler) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote *all-flavor-names*) (quote lisp::globally-special) t) 
(or (boundp (quote *all-flavor-names*)) (setq *all-flavor-names* nil)) 
(%put (quote *all-flavor-names*) (quote lisp::%var-documentation) (quote "The list of all defined flavors.")) 
(quote *all-flavor-names*) 
(%put (quote *undefined-flavor-names*) (quote lisp::globally-special) t) 
(or (boundp (quote *undefined-flavor-names*)) (setq *undefined-flavor-names* nil)) 
(%put (quote *undefined-flavor-names*) (quote lisp::%var-documentation) (quote "List of referred-to but not defflavored flavors.")) 
(quote *undefined-flavor-names*) 
(%put (quote *dirty-flavors*) (quote lisp::globally-special) t) 
(or (boundp (quote *dirty-flavors*)) (setq *dirty-flavors* (make-array 100 :fill-pointer 0 :adjustable t))) 
(%put (quote *dirty-flavors*) (quote lisp::%var-documentation) (quote "A vector (with fill pointer) of instantiated flavors that need work.")) 
(quote *dirty-flavors*) 
(%put (quote *flavor-compile-methods*) (quote lisp::globally-special) t) 
(or (boundp (quote *flavor-compile-methods*)) (setq *flavor-compile-methods* t)) 
(%put (quote *flavor-compile-methods*) (quote lisp::%var-documentation) (quote "If T, new combined methods will automatically be compiled.")) 
(quote *flavor-compile-methods*) 
(%put (quote *default-combination*) (quote lisp::globally-special) t) 
(or (boundp (quote *default-combination*)) (setq *default-combination* (quote (:daemon . :base-flavor-last)))) 
(%put (quote *default-combination*) (quote lisp::%var-documentation) (quote "Something like (:daemon . :base-flavor-last).")) 
(quote *default-combination*) 
(%put (quote *var-options*) (quote lisp::globally-special) t) 
(setq *var-options* (quote (:gettable-instance-variables :settable-instance-variables :initable-instance-variables :ordered-instance-variables :outside-accessible-instance-variables))) 
(quote *var-options*) 

#_(lap #0_changed-iv-keywords macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-iv-keywords logbitp 10)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-iv-keywords) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-iv-keywords) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-init-keywords macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-init-keywords logbitp 9)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-init-keywords) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-init-keywords) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-default-plist macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-default-plist logbitp 8)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-default-plist) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-default-plist) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-required-inits macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-required-inits logbitp 7)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-required-inits) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-required-inits) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-required-methods macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-required-methods logbitp 6)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-required-methods) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-required-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-all-methods macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-all-methods logbitp 5)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-all-methods) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-all-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-iv-inits macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-iv-inits logbitp 4)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-iv-inits) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-iv-inits) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-iv-order macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-iv-order logbitp 3)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-iv-order) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-iv-order) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-required-ivs macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-required-ivs logbitp)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 0))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-required-ivs) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-required-ivs) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-required-flavors macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-required-flavors logbitp 1)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-required-flavors) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-required-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_changed-components macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." changed-components logbitp 0)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote changed-components) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote changed-components) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote %all-components-changed%) (quote lisp::globally-special) t) 
(remprop (quote %all-components-changed%) (quote lisp::%constant)) 
(cond ((boundp (quote %all-components-changed%)) (lisp::*macroexpansion* (cond ((not (equal %all-components-changed% 2046)) nil (cerror "Go ahead and change the value." "Constant ~S being redefined." (quote %all-components-changed%)) (setq %all-components-changed% 2046))) (unless (equal %all-components-changed% 2046) (cerror "Go ahead and change the value." "Constant ~S being redefined." (quote %all-components-changed%)) (setq %all-components-changed% 2046)))) (t (setq %all-components-changed% 2046))) 
(%put (quote %all-components-changed%) (quote lisp::%constant) t) 
(quote %all-components-changed%) 

#_(lap #0_flags-wayward-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flags-wayward-p logbitp 4)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flags-wayward-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flags-wayward-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flags-compiled-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flags-compiled-p logbitp 3)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flags-compiled-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flags-compiled-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flags-defined-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flags-defined-p logbitp)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 0))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flags-defined-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flags-defined-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flags-abstract-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flags-abstract-p logbitp 1)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flags-abstract-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flags-abstract-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flags-vanilla-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flags-vanilla-p logbitp 0)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (call list 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flags-vanilla-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flags-vanilla-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_make-flavor expr
       (entry-points (2 3 4 5 6 7 8) rest)
       #0_(24 -2 1 0 flavor :changed 18 :flags 19 :methods 20 ((:changed-methods . 23) (:instance-env . 22) (:all-components+ . 21) (:methods . 20) (:flags . 19) (:changed . 18) (:dependents . 17) (:iv-keywords* . 16) (:default-plist* . 15) (:init-keywords* . 14) (:required-inits* . 13) (:descriptor . 12) (:prefix . 11) (:combinations . 10) (:method-env . 9) (:required-inits . 8) (:init-keywords . 7) (:default-plist . 6) (:required-methods . 5) (:required-flavors . 4) (:included-flavors . 3) (:components . 2) (:name . 1)) "Unknown option to DefStruct constructor.")
       (code-start)
(label 2)    (move o1 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest1)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest2)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest3)
             (jrst 1)
(label 6)    (movei w2 4)
             (icall rest4)
             (jrst 1)
(label 7)    (movei w2 5)
             (icall rest5)
             (jrst 1)
(label 8)    (movei w2 0)
             (icall restx)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -5 q)
             (move o3 (constant 2))
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -5 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -5 q)
             (movem o6 -6 q)
             (movem nil -5 q)
(label 14)   (skipe nil -7 q)
             (jrst 15)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call memq 2)
             (jumpn o1 17)
             (move o3 (constant 2))
             (move o1 -6 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 17)   (move o2 -5 q)
             (move o1 (constant 7))
             (call memq 2)
             (jumpn o1 19)
             (move o3 (constant 3))
             (move o1 -6 q)
             (move o2 (constant 8))
             (call lisp::%sp-svset 3)
(label 19)   (move o2 -5 q)
             (move o1 (constant 9))
             (call memq 2)
             (jumpn o1 21)
             (call flavors::make-method-structure 0)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 (constant 10))
             (call lisp::%sp-svset 3)
(label 21)   (move o1 -6 q)
             (movei n 1)
             (jrst 10)
(label 15)   (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 (constant 11))
             (move o1 -3 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 24)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 -4 q)
             (call lisp::%sp-svset 3)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -5 q)
             (jrst 23)
(label 24)   (move o1 (constant 12))
             (call error 1)
(label 23)   (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -7 q)
             (jrst 14)
(label 10)   (adjsp q -9)
             (popj p)
)

(%put (quote make-flavor) (quote lisp::%args-documentation) (quote (&rest lisp::initial-values))) 
(%put (quote make-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-changed-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(23)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-changed-methods) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-changed-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-instance-env expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(22)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-instance-env) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-instance-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-all-components+ expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(21)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-all-components+) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-all-components+) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(20)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-methods) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-flags expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(19)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-flags) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-flags) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-changed expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(18)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-changed) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-changed) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-dependents expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(17)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-dependents) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-dependents) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-iv-keywords* expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(16)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-iv-keywords*) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-iv-keywords*) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-default-plist* expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(15)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-default-plist*) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-default-plist*) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-init-keywords* expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(14)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-init-keywords*) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-init-keywords*) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-required-inits* expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(13)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-required-inits*) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-required-inits*) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-descriptor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(12)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-descriptor) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-descriptor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-prefix expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(11)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-prefix) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-prefix) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-combinations expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(10)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-combinations) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-combinations) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-method-env expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(9)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-method-env) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-method-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-required-inits expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(8)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-required-inits) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-required-inits) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-init-keywords expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(7)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-init-keywords) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-init-keywords) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-default-plist expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(6)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-default-plist) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-default-plist) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-required-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(5)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-required-methods) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-required-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-required-flavors expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-required-flavors) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-required-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-included-flavors expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-included-flavors) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-included-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-components expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-components) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-components) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-name expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote flavor-name) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote flavor-name) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(setf (symbol-function (quote copy-flavor)) (function lisp::built-in-copier)) 

#_(lap #0_flavor-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 flavor lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote flavor-p) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote flavor-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote flavor-name) (quote lisp::setf-inverse)) 
(%put (quote flavor-name) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 1 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-name) (quote lisp::%setf-documentation)) 
(quote flavor-name) 
(remprop (quote flavor-components) (quote lisp::setf-inverse)) 
(%put (quote flavor-components) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-components) (quote lisp::%setf-documentation)) 
(quote flavor-components) 
(remprop (quote flavor-included-flavors) (quote lisp::setf-inverse)) 
(%put (quote flavor-included-flavors) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 3 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-included-flavors) (quote lisp::%setf-documentation)) 
(quote flavor-included-flavors) 
(remprop (quote flavor-required-flavors) (quote lisp::setf-inverse)) 
(%put (quote flavor-required-flavors) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 4 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-required-flavors) (quote lisp::%setf-documentation)) 
(quote flavor-required-flavors) 
(remprop (quote flavor-required-methods) (quote lisp::setf-inverse)) 
(%put (quote flavor-required-methods) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 5 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-required-methods) (quote lisp::%setf-documentation)) 
(quote flavor-required-methods) 
(remprop (quote flavor-default-plist) (quote lisp::setf-inverse)) 
(%put (quote flavor-default-plist) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 6 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-default-plist) (quote lisp::%setf-documentation)) 
(quote flavor-default-plist) 
(remprop (quote flavor-init-keywords) (quote lisp::setf-inverse)) 
(%put (quote flavor-init-keywords) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 7 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-init-keywords) (quote lisp::%setf-documentation)) 
(quote flavor-init-keywords) 
(remprop (quote flavor-required-inits) (quote lisp::setf-inverse)) 
(%put (quote flavor-required-inits) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 8 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-required-inits) (quote lisp::%setf-documentation)) 
(quote flavor-required-inits) 
(remprop (quote flavor-method-env) (quote lisp::setf-inverse)) 
(%put (quote flavor-method-env) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 9 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-method-env) (quote lisp::%setf-documentation)) 
(quote flavor-method-env) 
(remprop (quote flavor-combinations) (quote lisp::setf-inverse)) 
(%put (quote flavor-combinations) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 10 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-combinations) (quote lisp::%setf-documentation)) 
(quote flavor-combinations) 
(remprop (quote flavor-prefix) (quote lisp::setf-inverse)) 
(%put (quote flavor-prefix) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 11 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-prefix) (quote lisp::%setf-documentation)) 
(quote flavor-prefix) 
(remprop (quote flavor-descriptor) (quote lisp::setf-inverse)) 
(%put (quote flavor-descriptor) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 12 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-descriptor) (quote lisp::%setf-documentation)) 
(quote flavor-descriptor) 
(remprop (quote flavor-required-inits*) (quote lisp::setf-inverse)) 
(%put (quote flavor-required-inits*) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 13 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-required-inits*) (quote lisp::%setf-documentation)) 
(quote flavor-required-inits*) 
(remprop (quote flavor-init-keywords*) (quote lisp::setf-inverse)) 
(%put (quote flavor-init-keywords*) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 14 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-init-keywords*) (quote lisp::%setf-documentation)) 
(quote flavor-init-keywords*) 
(remprop (quote flavor-default-plist*) (quote lisp::setf-inverse)) 
(%put (quote flavor-default-plist*) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 15 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-default-plist*) (quote lisp::%setf-documentation)) 
(quote flavor-default-plist*) 
(remprop (quote flavor-iv-keywords*) (quote lisp::setf-inverse)) 
(%put (quote flavor-iv-keywords*) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 16 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-iv-keywords*) (quote lisp::%setf-documentation)) 
(quote flavor-iv-keywords*) 
(remprop (quote flavor-dependents) (quote lisp::setf-inverse)) 
(%put (quote flavor-dependents) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 17 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-dependents) (quote lisp::%setf-documentation)) 
(quote flavor-dependents) 
(remprop (quote flavor-changed) (quote lisp::setf-inverse)) 
(%put (quote flavor-changed) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 18 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-changed) (quote lisp::%setf-documentation)) 
(quote flavor-changed) 
(remprop (quote flavor-flags) (quote lisp::setf-inverse)) 
(%put (quote flavor-flags) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 19 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-flags) (quote lisp::%setf-documentation)) 
(quote flavor-flags) 
(remprop (quote flavor-methods) (quote lisp::setf-inverse)) 
(%put (quote flavor-methods) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 20 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-methods) (quote lisp::%setf-documentation)) 
(quote flavor-methods) 
(remprop (quote flavor-all-components+) (quote lisp::setf-inverse)) 
(%put (quote flavor-all-components+) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 21 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-all-components+) (quote lisp::%setf-documentation)) 
(quote flavor-all-components+) 
(remprop (quote flavor-instance-env) (quote lisp::setf-inverse)) 
(%put (quote flavor-instance-env) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 22 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-instance-env) (quote lisp::%setf-documentation)) 
(quote flavor-instance-env) 
(remprop (quote flavor-changed-methods) (quote lisp::setf-inverse)) 
(%put (quote flavor-changed-methods) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 23 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-changed-methods) (quote lisp::%setf-documentation)) 
(quote flavor-changed-methods) 
(%put (quote flavor) (quote lisp::structure-print) (quote print-flavor)) 
(%put (quote flavor) (quote lisp::defstruct-description) (quote (flavor vector ((:print-function print-flavor)) 24 flavor- make-flavor (flavor-changed-methods flavor-instance-env flavor-all-components+ flavor-methods flavor-flags flavor-changed flavor-dependents flavor-iv-keywords* flavor-default-plist* flavor-init-keywords* flavor-required-inits* flavor-descriptor flavor-prefix flavor-combinations flavor-method-env flavor-required-inits flavor-init-keywords flavor-default-plist flavor-required-methods flavor-required-flavors flavor-included-flavors flavor-components flavor-name) (changed-methods instance-env all-components+ methods flags changed dependents iv-keywords* default-plist* init-keywords* required-inits* descriptor prefix combinations method-env required-inits init-keywords default-plist required-methods required-flavors included-flavors components name) (nil nil nil (make-method-structure) 0 1 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) ((flavor-changed-methods . 23) (flavor-instance-env . 22) (flavor-all-components+ . 21) (flavor-methods . 20) (flavor-flags . 19) (flavor-changed . 18) (flavor-dependents . 17) (flavor-iv-keywords* . 16) (flavor-default-plist* . 15) (flavor-init-keywords* . 14) (flavor-required-inits* . 13) (flavor-descriptor . 12) (flavor-prefix . 11) (flavor-combinations . 10) (flavor-method-env . 9) (flavor-required-inits . 8) (flavor-init-keywords . 7) (flavor-default-plist . 6) (flavor-required-methods . 5) (flavor-required-flavors . 4) (flavor-included-flavors . 3) (flavor-components . 2) (flavor-name . 1)) nil ((:changed-methods . 23) (:instance-env . 22) (:all-components+ . 21) (:methods . 20) (:flags . 19) (:changed . 18) (:dependents . 17) (:iv-keywords* . 16) (:default-plist* . 15) (:init-keywords* . 14) (:required-inits* . 13) (:descriptor . 12) (:prefix . 11) (:combinations . 10) (:method-env . 9) (:required-inits . 8) (:init-keywords . 7) (:default-plist . 6) (:required-methods . 5) (:required-flavors . 4) (:included-flavors . 3) (:components . 2) (:name . 1))))) 
(quote flavor) 

#_(lap #0_print-flavor expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_("#<Flavor ~S>")
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (movem o2 -5 q)
             (movem o3 -4 q)
             (move o1 -6 q)
             (call flavors::flavor-name 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 (constant 0))
             (call format 3)
             (adjsp q -7)
             (popj p)
)

(%put (quote print-flavor) (quote lisp::%args-documentation) (quote (object stream depth))) 
(%put (quote print-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-defined-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-defined-p flags-defined-p flavor-flags)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flavor-defined-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-defined-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-has-vanilla-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-has-vanilla-p flags-vanilla-p flavor-flags)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flavor-has-vanilla-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-has-vanilla-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-abstract-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-abstract-p flags-abstract-p flavor-flags)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flavor-abstract-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-abstract-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-compiled-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-compiled-p and flavor-defined-p flags-compiled-p flavor-flags)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o2 -6 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -4 q)
             (move o2 -6 q)
             (move o1 (constant 6))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 5))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -4 q)
             (call list 3)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote flavor-compiled-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-compiled-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote flavor-compiled-p) (quote lisp::setf-inverse)) 
(%put (quote flavor-compiled-p) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist new) (let* ((flavor (car (cdr lisp::%access-arglist)))) (list (quote setf) (list (quote flags-compiled-p) (list (quote flavor-flags) flavor)) new)))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote flavor-compiled-p) (quote lisp::%setf-documentation)) 
(quote flavor-compiled-p) 

#_(lap #0_flavor-wayward-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-wayward-p flags-wayward-p flavor-flags)
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote flavor-wayward-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-wayward-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote flavor-instantiated-p) (quote lisp::%fun-documentation) (quote "Returns T for instantiated and wayward flavors.")) 

#_(lap #0_flavor-instantiated-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-instantiated-p or flavor-wayward-p and flavor-descriptor instance-descriptor-instantiated-p)
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -9 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 -8 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -6 q)
             (move o2 -8 q)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -4 q)
             (move o2 -8 q)
             (move o1 (constant 6))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 7))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -4 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list 3)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote flavor-instantiated-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-instantiated-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_get-flavor macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 2 "Macro ~S cannot be called with ~S args." get-flavor let name cond ((get name (quote flavor))) ((let ((res (make-flavor :name name))) (setf (get name (quote flavor)) res) (pushnew name *undefined-flavor-names*) res)) ((t (error "Flavor ~S does not exist." name))))
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call > 2)
             (jumpn1 o1 5)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 1))
             (move o1 -8 q)
             (call < 2)
             (skipn nil o1)
(label 5)    (jrst 4)
             (move o1 -9 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 2))
             (move o2 (constant 3))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 8)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (jrst 7)
(label 8)    (movem nil -7 q)
(label 7)    (move o2 -8 q)
             (move o1 (constant 5))
             (call list 2)
             (call list 1)
             (movem o1 -5 q)
             (move o2 (constant 8))
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o4 (constant 9))
             (move o1 (constant 6))
             (move o2 (constant 7))
             (move o3 -2 q)
             (call list* 4)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 -5 q)
             (call list 3)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote get-flavor) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote get-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-dirty-p macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." flavor-dirty-p or plusp flavor-changed flavor-changed-methods)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 -6 q)
             (call length 1)
             (movem o1 -5 q)
             (move o2 (constant 0))
             (move o1 -5 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -6 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -6 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 -5 q)
             (move o1 (constant 5))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -3 q)
             (move o2 -5 q)
             (move o1 (constant 6))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -3 q)
             (call list 3)
(label 3)    (adjsp q -7)
             (popj p)
)

(%put (quote flavor-dirty-p) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote flavor-dirty-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_rework-flavor macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." rework-flavor let flavor ((when (and (flavor-instantiated-p flavor) (not (flavor-dirty-p flavor))) (vector-push-extend flavor *dirty-flavors*))))
       (code-start)
(label 1)    (adjsp q 6)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call length 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -5 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -5 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o2 -4 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 (constant 5))
             (move o1 (constant 3))
             (move o2 -2 q)
             (call list* 3)
(label 3)    (adjsp q -6)
             (popj p)
)

(%put (quote rework-flavor) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote rework-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_rework-methods macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." rework-methods let flavor cond (null (flavor-changed-methods flavor)) ((stack (alloc-tiny-stack))) vector-push-extend (stack) ((setf (flavor-changed-methods flavor) stack)) t ((flavor-changed-methods flavor)))
       (code-start)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 0))
             (move o1 -11 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -12 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -12 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -11 q)
             (move o1 -12 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -8 q)
             (move o3 (constant 9))
             (move o1 (constant 8))
             (move o2 -10 q)
             (call list* 3)
             (movem o1 -3 q)
             (move o4 (constant 10))
             (move o1 (constant 3))
             (move o2 (constant 7))
             (move o3 -3 q)
             (call list* 4)
             (move o2 o1)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -6 q)
             (move o3 (constant 12))
             (move o1 (constant 8))
             (move o2 -10 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 11))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -6 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -8 q)
             (call list 3)
(label 3)    (adjsp q -13)
             (popj p)
)

(%put (quote rework-methods) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote rework-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_do-inheriting-flavors macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." do-inheriting-flavors cond (eq (flavor-name flavor) (quote vanilla-flavor)) dolist (fl *all-flavor-names*) let ((get-flavor fl)) vector-push-extend when flags-vanilla-p flavor-flags t %inheriting-flavors do ((%i 0 (1+ %i))) >= %i length aref (%i) d flavor-dependents unless position with-stacks progn)
       (code-start)
(label 1)    (adjsp q 23)
             (movem o1 -22 q)
             (move o1 -22 q)
             (call length 1)
             (movem o1 -21 q)
             (move o2 (constant 0))
             (move o1 -21 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -22 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -22 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -21 q)
             (move o1 -22 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -20 q)
             (move o1 -22 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 7)
             (move o1 -22 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -19 q)
             (jrst 6)
(label 7)    (movem nil -19 q)
(label 6)    (move o1 -22 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -18 q)
             (move o2 (constant 8))
             (move o1 -21 q)
             (call cons 2)
             (call list 1)
             (movem o1 -12 q)
             (skipn nil -19 q)
             (jrst 10)
             (move o3 -19 q)
             (move o1 (constant 9))
             (move o2 -21 q)
             (call list 3)
             (call list 1)
             (movem o1 -11 q)
             (jrst 11)
(label 10)   (movem nil -11 q)
(label 11)   (move o2 -21 q)
             (move o1 (constant 12))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 11))
             (call list 2)
             (movem o1 -9 q)
             (move o3 -18 q)
             (move o1 (constant 10))
             (move o2 -9 q)
             (call list* 3)
             (call list 1)
             (move o2 o1)
             (move o1 -11 q)
             (call append 2)
             (move o3 o1)
             (move o1 (constant 7))
             (move o2 -12 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 (constant 6))
             (call list 3)
             (move o2 o1)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -16 q)
             (move o1 -19 q)
             (skipe nil o1)
             (movem o1 -14 q)
             (jumpn o1 12)
             (move o6 (constant 14))
             (movem o6 -14 q)
(label 12)   (move o3 -14 q)
             (move o1 (constant 9))
             (move o2 -20 q)
             (call list 3)
             (movem o1 -12 q)
             (move o2 -14 q)
             (move o1 (constant 19))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 17))
             (move o2 (constant 18))
             (call list 3)
             (call list 1)
             (movem o1 -9 q)
             (move o3 (constant 21))
             (move o1 (constant 20))
             (move o2 -14 q)
             (call list* 3)
             (move o2 o1)
             (move o1 -21 q)
             (call list 2)
             (call list 1)
             (movem o1 -7 q)
             (move o3 -18 q)
             (move o1 (constant 7))
             (move o2 -7 q)
             (call list* 3)
             (movem o1 -8 q)
             (move o3 (constant 21))
             (move o1 (constant 20))
             (move o2 -14 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 23))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 22))
             (call list 2)
             (movem o1 -6 q)
             (move o3 -14 q)
             (move o1 (constant 25))
             (move o2 (constant 22))
             (call list 3)
             (movem o1 -4 q)
             (move o3 -14 q)
             (move o1 (constant 9))
             (move o2 (constant 22))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 24))
             (move o2 -4 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -6 q)
             (call list 3)
             (move o5 o1)
             (move o1 (constant 15))
             (move o2 (constant 16))
             (move o3 -9 q)
             (move o4 -8 q)
             (call list 5)
             (move o2 o1)
             (move o1 -12 q)
             (call list 2)
             (movem o1 -13 q)
             (move o2 (constant 14))
             (move o1 -14 q)
             (call eq 2)
             (jumpe o1 13)
             (move o1 -14 q)
             (call list 1)
             (movem o1 -11 q)
             (move o3 -13 q)
             (move o1 (constant 26))
             (move o2 -11 q)
             (call list* 3)
             (move o2 o1)
             (jrst 14)
(label 13)   (move o2 -13 q)
             (move o1 (constant 27))
             (call cons 2)
             (move o2 o1)
(label 14)   (move o1 (constant 13))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -16 q)
             (call list 3)
(label 3)    (adjsp q -23)
             (popj p)
)

(%put (quote do-inheriting-flavors) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote do-inheriting-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_message-clean-p expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(1 5 t 0)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (movem o2 -7 q)
             (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -6 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 2))
             (jumpn o1 3)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (movem o1 -6 q)
             (move o6 (constant 3))
             (movem o6 -5 q)
             (move o1 -6 q)
             (call length 1)
             (movem o1 -4 q)
(label 8)    (move o2 -4 q)
             (move o1 -5 q)
             (call < 2)
             (jumpn o1 9)
             (move o1 nil)
             (jrst 4)
(label 9)    (move o2 -5 q)
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o2 -3 q)
             (move o1 -7 q)
             (call eq 2)
             (jumpn1 o1 13)
             (move o2 -3 q)
             (move o1 -7 q)
             (call member 2)
             (skipn nil o1)
(label 13)   (jrst 12)
             (move o1 (constant 2))
             (jrst 4)
(label 12)   (move o1 -5 q)
             (call 1+ 1)
             (movem o1 -5 q)
             (jrst 8)
(label 4)
(label 3)    (tdcn o1 o1)
             (move o1 (constant 2))
             (movei n 1)
             (adjsp q -9)
             (popj p)
)

(%put (quote message-clean-p) (quote lisp::%args-documentation) (quote (flavor method))) 
(%put (quote message-clean-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(defdescribe internal-describe-flavor flavor (flavor) (when flavor (cond ((flavor-dependents flavor) (terpri) (princ "It is a direct component of flavors: ") (princ (mapcar (function flavor-name) (flavor-dependents flavor)))) (t (terpri) (princ "No flavors currently refer to it."))) (cond ((not (flavor-defined-p flavor)) (terpri) (princ "It's hasn't been defflavored yet.")) (t (terpri) (princ "It was defflavored something like this:") (terpri) (write (reconstruct-defflavor (flavor-name flavor)) :pretty t :length nil :level nil) (when (flavor-compiled-p flavor) (cond ((flavor-dirty-p flavor) (terpri) (princ "It's compiled, but dirty.")) (t (terpri) (princ "It's currently compiled."))) (cond ((flavor-wayward-p flavor) (terpri) (princ "It has wayward instances.")) ((flavor-instantiated-p flavor) (terpri) (princ "It is instantiated.")))))))) 
(%put (quote reconstruct-defflavor) (quote lisp::%fun-documentation) (quote "Returns a call to defflavor that was something pretty close to how
  the flavor was defined.")) 

#_(lap #0_reconstruct-defflavor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." 1 2 "Flavor ~S has not been defflavored." 0 unsupplied required 3 :initable-instance-variables :settable-instance-variables :gettable-instance-variables :required-instance-variables :ordered-instance-variables :outside-accessible-instance-variables :no-vanilla-flavor :abstract-flavor :init-keywords :default-init-plist :required-init-keywords :required-methods :required-flavors :included-flavors string "-" :accessor-prefix :method-combination :documentation defflavor)
       (code-start)
(label 1)    (adjsp q 25)
             (movem o1 -24 q)
             (move o6 -24 q)
             (movem o6 -22 q)
             (move o2 (constant 0))
             (move o1 -22 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -23 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -22 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -21 q)
             (move o6 -22 q)
             (movem o6 -20 q)
             (move o6 (constant 0))
             (movem o6 -19 q)
             (move o6 -21 q)
             (movem o6 -18 q)
             (move o3 -18 q)
             (move o1 -20 q)
             (move o2 -19 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -22 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -21 q)
             (movem o6 -23 q)
             (jrst 3)
(label 5)    (move o2 -22 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -23 q)
(label 3)    (move o2 (constant 5))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -22 q)
             (move o1 -23 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -22 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 9)
             (move o2 -24 q)
             (move o1 (constant 6))
             (call error 2)
(label 9)    (move o1 -23 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -22 q)
             (move o1 -22 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -21 q)
             (move o1 -22 q)
             (call flavors::method-env-defaults 1)
             (movem o1 -20 q)
             (move o1 -23 q)
             (call flavors::flavor-method-env 1)
             (call flavors::method-env-ables 1)
             (movem o1 -19 q)
             (movem nil -18 q)
             (movem nil -17 q)
             (movem nil -16 q)
             (movem nil -15 q)
             (movem nil -14 q)
             (movem nil -13 q)
             (movem nil -12 q)
             (movem nil -11 q)
             (move o1 -22 q)
             (call flavors::method-env-numordered 1)
             (movem o1 -10 q)
             (move o6 (constant 7))
             (movem o6 -9 q)
             (move o1 -21 q)
             (call length 1)
             (movem o1 -8 q)
(label 15)   (move o2 -8 q)
             (move o1 -9 q)
             (call < 2)
             (jumpn o1 16)
             (jrst 11)
(label 16)   (move o2 -9 q)
             (move o1 -19 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o2 -9 q)
             (move o1 -21 q)
             (call aref 2)
             (movem o1 -6 q)
             (move o2 -9 q)
             (move o1 -20 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o6 -5 q)
             (movem o6 -4 q)
             (move o2 (constant 8))
             (move o1 -4 q)
             (call eq 2)
             (jumpe o1 19)
             (move o2 -18 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -18 q)
             (jrst 18)
(label 19)   (move o2 (constant 9))
             (move o1 -4 q)
             (call eq 2)
             (jumpe o1 20)
             (move o2 -14 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -14 q)
             (jrst 18)
(label 20)   (move o2 -5 q)
             (move o1 -6 q)
             (call list 2)
             (movem o1 -3 q)
             (move o2 -18 q)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -18 q)
(label 18)   (move o2 (constant 4))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -4 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 24)
             (move o2 -16 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -16 q)
             (jrst 23)
(label 24)   (move o2 (constant 5))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -4 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 27)
             (move o2 -17 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -17 q)
(label 27)   (move o2 (constant 7))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -4 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 30)
             (move o2 -15 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -15 q)
(label 30)
(label 23)   (move o2 -10 q)
             (move o1 -9 q)
             (call < 2)
             (jumpe o1 34)
             (move o2 -13 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -13 q)
(label 34)   (move o2 (constant 10))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -4 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 37)
             (move o2 -12 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -12 q)
(label 37)   (move o1 -9 q)
             (call 1+ 1)
             (movem o1 -9 q)
             (jrst 15)
(label 11)   (skipn nil -17 q)
             (jrst 39)
             (move o2 -17 q)
             (move o1 (constant 11))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 39)   (skipn nil -16 q)
             (jrst 41)
             (move o2 -16 q)
             (move o1 (constant 12))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 41)   (skipn nil -15 q)
             (jrst 43)
             (move o2 -15 q)
             (move o1 (constant 13))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 43)   (skipn nil -14 q)
             (jrst 45)
             (move o2 -14 q)
             (move o1 (constant 14))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 45)   (skipn nil -13 q)
             (jrst 47)
             (move o1 -13 q)
             (call nreverse 1)
             (move o2 o1)
             (move o1 (constant 15))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 47)   (skipn nil -12 q)
             (jrst 49)
             (move o2 -12 q)
             (move o1 (constant 16))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 49)   (move o2 (constant 7))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -10 q)
             (move o1 -23 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -10 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 51)
             (move o2 -11 q)
             (move o1 (constant 17))
             (call cons 2)
             (movem o1 -11 q)
(label 51)   (move o2 (constant 4))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -10 q)
             (move o1 -23 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -10 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 53)
             (move o2 -11 q)
             (move o1 (constant 18))
             (call cons 2)
             (movem o1 -11 q)
(label 53)   (move o1 -23 q)
             (call flavors::flavor-init-keywords 1)
             (jumpe o1 55)
             (move o1 -23 q)
             (call flavors::flavor-init-keywords 1)
             (move o2 o1)
             (move o1 (constant 19))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 55)   (move o1 -23 q)
             (call flavors::flavor-default-plist 1)
             (jumpe o1 57)
             (move o1 -23 q)
             (call flavors::flavor-default-plist 1)
             (move o2 o1)
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 57)   (move o1 -23 q)
             (call flavors::flavor-required-inits 1)
             (jumpe o1 59)
             (move o1 -23 q)
             (call flavors::flavor-required-inits 1)
             (move o2 o1)
             (move o1 (constant 21))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 59)   (move o1 -23 q)
             (call flavors::flavor-required-methods 1)
             (jumpe o1 61)
             (move o1 -23 q)
             (call flavors::flavor-required-methods 1)
             (move o2 o1)
             (move o1 (constant 22))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 61)   (move o1 -23 q)
             (call flavors::flavor-required-flavors 1)
             (jumpe o1 63)
             (move o1 -23 q)
             (call flavors::flavor-required-flavors 1)
             (move o2 o1)
             (move o1 (constant 23))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 63)   (move o1 -23 q)
             (call flavors::flavor-included-flavors 1)
             (jumpe o1 65)
             (move o1 -23 q)
             (call flavors::flavor-included-flavors 1)
             (move o2 o1)
             (move o1 (constant 24))
             (call cons 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 65)   (move o1 -23 q)
             (call flavors::flavor-prefix 1)
             (movem o1 -10 q)
             (move o1 -23 q)
             (call flavors::flavor-name 1)
             (call symbol-name 1)
             (movem o1 -8 q)
             (move o3 (constant 26))
             (move o1 (constant 25))
             (move o2 -8 q)
             (call concatenate 3)
             (move o2 o1)
             (move o1 -10 q)
             (call equalp 2)
             (jumpn o1 67)
             (move o1 -23 q)
             (call flavors::flavor-prefix 1)
             (movem o1 -9 q)
             (move o1 -23 q)
             (call flavors::flavor-name 1)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -9 q)
             (call intern 2)
             (move o2 o1)
             (move o1 (constant 27))
             (call list 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 67)   (move o1 -23 q)
             (call flavors::flavor-combinations 1)
             (jumpe o1 70)
             (movem nil -10 q)
             (move o1 -23 q)
             (call flavors::flavor-combinations 1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
(label 75)   (move o1 -9 q)
             (call atom 1)
             (jumpe o1 76)
             (jrst 71)
(label 76)   (move o1 -8 q)
             (move o1 1 o1)
             (movem o1 -7 q)
             (move o6 -10 q)
             (movem o6 -6 q)
             (move o2 -6 q)
             (move o1 -7 q)
             (call assoc 2)
             (movem o1 -5 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o1 -5 q)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -3 q)
             (call cons 2)
             (movem o1 -4 q)
             (skipn nil -5 q)
             (jrst 78)
             (move o2 -4 q)
             (move o1 -5 q)
             (call lisp::%rplacd 2)
             (jrst 79)
(label 78)   (move o2 -4 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o2 -6 q)
             (move o1 -2 q)
             (call cons 2)
             (movem o1 -3 q)
             (move o6 -3 q)
             (movem o6 -10 q)
(label 79)   (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (jrst 75)
(label 71)   (move o1 nil)
             (call list 1)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o6 -10 q)
             (movem o6 -6 q)
(label 84)   (skipe nil -6 q)
             (jrst 85)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o2 o1)
             (jrst 80)
(label 85)   (move o6 -7 q)
             (movem o6 -5 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o1 -4 q)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -3 q)
             (move o1 -4 q)
             (move o1 0 o1)
             (move o1 1 o1)
             (movem o1 -2 q)
             (move o1 -4 q)
             (move o1 1 o1)
             (move o3 o1)
             (move o1 -3 q)
             (move o2 -2 q)
             (call list* 3)
             (call list 1)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -5 q)
             (call rplacd 2)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (jrst 84)
(label 80)   (move o1 (constant 28))
             (call cons 2)
             (movem o1 -9 q)
             (move o2 -11 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -11 q)
(label 70)   (move o1 -23 q)
             (call flavors::flavor-name 1)
             (movem o1 -10 q)
             (move o2 (constant 0))
             (move o1 -10 q)
             (call documentation 2)
             (jumpe o1 91)
             (move o1 -23 q)
             (call flavors::flavor-name 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call documentation 2)
             (move o2 o1)
             (move o1 (constant 29))
             (call list 2)
             (movem o1 -10 q)
             (move o2 -11 q)
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -11 q)
(label 91)   (move o1 -23 q)
             (call flavors::flavor-name 1)
             (movem o1 -9 q)
             (move o1 -18 q)
             (call nreverse 1)
             (movem o1 -8 q)
             (move o1 -23 q)
             (call flavors::flavor-components 1)
             (movem o1 -7 q)
             (move o5 -11 q)
             (move o1 (constant 30))
             (move o2 -9 q)
             (move o3 -8 q)
             (move o4 -7 q)
             (call list* 5)
             (adjsp q -25)
             (popj p)
)

(%put (quote reconstruct-defflavor) (quote lisp::%args-documentation) (quote (name))) 
(%put (quote reconstruct-defflavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_make-method-structure expr
       (entry-points (1 2 2-many 2-many 2-many 2-many 2-many))
       #0_(3 -2 1 0 method-structure 2)
       (code-start)
(label 1)    (move o1 nil)
(label 2)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 (constant 0))
             (call make-array 1)
             (movem o1 -4 q)
             (move o3 (constant 2))
             (move o1 -4 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (move o3 (constant 4))
             (move o1 -4 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -4 q)
             (movem o6 -5 q)
             (move o3 -6 q)
             (move o1 -5 q)
             (move o2 (constant 2))
             (call lisp::%sp-svset 3)
             (move o1 -6 q)
             (call length 1)
             (call make-list 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 (constant 5))
             (call lisp::%sp-svset 3)
             (move o1 -5 q)
             (movei n 1)
             (adjsp q -7)
             (popj p)
)

(%put (quote make-method-structure) (quote lisp::%args-documentation) (quote (&optional methods))) 
(%put (quote make-method-structure) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-structure-types expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-structure-types) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-structure-types) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-structure-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call lisp::%sp-svref 2)
             (adjsp q -4)
             (popj p)
)

(%put (quote method-structure-methods) (quote lisp::%args-documentation) (quote (lisp::object))) 
(%put (quote method-structure-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(setf (symbol-function (quote copy-method-structure)) (function lisp::built-in-copier)) 

#_(lap #0_method-structure-p expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(-2 1 0 method-structure lisp::included-structure)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call simple-vector-p 1)
             (jumpe o1 3)
             (move o1 -4 q)
             (call stringp 1)
             (jumpn o1 3)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 1))
             (move o1 -3 q)
             (call = 2)
             (jumpe o1 3)
             (move o2 (constant 2))
             (move o1 -4 q)
             (call lisp::%sp-svref 2)
             (movem o1 -3 q)
             (move o2 (constant 3))
             (move o1 -3 q)
             (call eq 2)
             (jumpn o1 5)
             (move o2 (constant 4))
             (move o1 -3 q)
             (call get 2)
             (movem o1 -2 q)
             (move o2 (constant 3))
             (move o1 -2 q)
             (call eq 2)
(label 5)    (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -5)
             (popj p)
)

(%put (quote method-structure-p) (quote lisp::%args-documentation) (quote (lisp::thing))) 
(%put (quote method-structure-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote method-structure-methods) (quote lisp::setf-inverse)) 
(%put (quote method-structure-methods) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 1 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-structure-methods) (quote lisp::%setf-documentation)) 
(quote method-structure-methods) 
(remprop (quote method-structure-types) (quote lisp::setf-inverse)) 
(%put (quote method-structure-types) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist lisp::new-value) (let* ((structure (car (cdr lisp::%access-arglist)))) (lisp::setelt-form structure 2 lisp::new-value (quote vector))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-structure-types) (quote lisp::%setf-documentation)) 
(quote method-structure-types) 
(%put (quote method-structure) (quote lisp::structure-print) (quote private-structure-printer)) 
(%put (quote method-structure) (quote lisp::defstruct-description) (quote (method-structure vector ((:print-function private-structure-printer) (:constructor make-method-structure (&optional methods))) 3 method-structure- (make-method-structure (&optional methods)) (method-structure-types method-structure-methods) (types methods) ((make-list (length methods)) nil) (nil nil) ((method-structure-types . 2) (method-structure-methods . 1)) nil ((:types . 2) (:methods . 1))))) 
(quote method-structure) 
(%put (quote %get-method-types) (quote lisp::%fun-documentation) (quote "Returns a list whose car is the list of types.")) 

#_(lap #0_%get-method-types expr
       (entry-points (2-few 2-few 1 2 2-many 2-many 2-many))
       #0_(1 2)
       (code-start)
(label 1)    (move o3 nil)
(label 2)    (adjsp q 10)
             (movem o1 -9 q)
             (movem o2 -8 q)
             (movem o3 -7 q)
             (move o1 -8 q)
             (call flavors::method-structure-methods 1)
             (move o2 o1)
             (move o1 -9 q)
             (call position 2)
             (movem o1 -6 q)
             (skipn nil -6 q)
             (jrst 4)
             (move o1 -8 q)
             (call flavors::method-structure-types 1)
             (move o2 o1)
             (move o1 -6 q)
             (call nthcdr 2)
             (jrst 5)
(label 4)    (skipn nil -7 q)
             (jrst 7)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o1 -5 q)
             (call flavors::method-structure-methods 1)
             (move o2 o1)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 0))
             (call lisp::%sp-svset 3)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o1 -5 q)
             (call flavors::method-structure-types 1)
             (move o2 o1)
             (move o1 nil)
             (call cons 2)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 1))
             (call lisp::%sp-svset 3)
             (jrst 6)
(label 7)    (move o1 nil)
             (movei n 1)
(label 6)
(label 5)    (adjsp q -10)
             (popj p)
)

(%put (quote %get-method-types) (quote lisp::%args-documentation) (quote (name structure &optional create))) 
(%put (quote %get-method-types) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_get-method-types macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 3 "Macro ~S cannot be called with ~S args." get-method-types %get-method-types)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -7 q)
             (move o2 (constant 0))
             (move o1 -7 q)
             (call > 2)
             (jumpn1 o1 5)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -7 q)
             (move o2 (constant 1))
             (move o1 -7 q)
             (call < 2)
             (skipn nil o1)
(label 5)    (jrst 4)
             (move o1 -8 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 2))
             (move o2 (constant 3))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -8 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 8)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (jrst 7)
(label 8)    (movem nil -5 q)
(label 7)    (move o4 -5 q)
             (move o1 (constant 4))
             (move o2 -7 q)
             (move o3 -6 q)
             (call list 4)
(label 3)    (adjsp q -9)
             (popj p)
)

(%put (quote get-method-types) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote get-method-types) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_do-methods macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." do-methods let %str macrolet get-method-types (name str &optional create) cond and eq name quote str ((quote (car %list))) ((t (list (quote %get-method-types) name str create))) do ((%m (method-structure-methods %str) (cdr %m)) (%list (method-structure-types %str) (cdr %list))) ((null %m)) unless (null (car %list)) ((car %m)))
       (code-start)
(label 1)    (adjsp q 17)
             (movem o1 -16 q)
             (move o1 -16 q)
             (call length 1)
             (movem o1 -15 q)
             (move o2 (constant 0))
             (move o1 -15 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -16 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -16 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -15 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o1 -16 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -13 q)
             (move o2 -14 q)
             (move o1 (constant 4))
             (call list 2)
             (call list 1)
             (movem o1 -11 q)
             (move o2 -15 q)
             (move o1 (constant 12))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 10))
             (move o2 (constant 11))
             (call list 3)
             (movem o1 -5 q)
             (move o2 -14 q)
             (move o1 (constant 12))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 10))
             (move o2 (constant 13))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 9))
             (move o2 -5 q)
             (call list 3)
             (movem o1 -6 q)
             (move o2 (constant 14))
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -6 q)
             (move o3 (constant 15))
             (move o1 (constant 8))
             (move o2 -6 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 6))
             (move o2 (constant 7))
             (call list 3)
             (call list 1)
             (movem o1 -9 q)
             (move o2 (constant 21))
             (move o1 -15 q)
             (call cons 2)
             (call list 1)
             (movem o1 -2 q)
             (move o3 -13 q)
             (move o1 (constant 3))
             (move o2 -2 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 19))
             (move o2 (constant 20))
             (call list 3)
             (move o4 o1)
             (move o1 (constant 16))
             (move o2 (constant 17))
             (move o3 (constant 18))
             (call list 4)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 -9 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -11 q)
             (call list 3)
(label 3)    (adjsp q -17)
             (popj p)
)

(%put (quote do-methods) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote do-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-types macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." method-types car get-method-types)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 (constant 4))
             (move o2 -6 q)
             (call list 3)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote method-types) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote method-types) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(remprop (quote method-types) (quote lisp::setf-inverse)) 
(%put (quote method-types) (quote lisp::setf-method-expander) (function (lambda (lisp::access-form) (do* ((lisp::args (cdr lisp::access-form) (cdr lisp::args)) (lisp::dummies nil (cons (gensym) lisp::dummies)) (lisp::newval-var (gensym)) (lisp::new-access-form nil)) ((atom lisp::args) (setq lisp::new-access-form (cons (car lisp::access-form) lisp::dummies)) (values lisp::dummies (cdr lisp::access-form) (list lisp::newval-var) (funcall (function (lambda (lisp::%access-arglist new) (let* ((name (car (cdr lisp::%access-arglist))) (structure (car (cdr (cdr lisp::%access-arglist))))) (list (quote and) new (list (quote setf) (list (quote car) (list* (quote get-method-types) name structure (quote (t)))) new))))) lisp::new-access-form lisp::newval-var) lisp::new-access-form)))))) 
(remprop (quote method-types) (quote lisp::%setf-documentation)) 
(quote method-types) 

#_(lap #0_method-add expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(t)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (movem o3 -8 q)
             (movem o4 -7 q)
             (move o3 (constant 0))
             (move o1 -10 q)
             (move o2 -7 q)
             (call flavors::%get-method-types 3)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 -9 q)
             (call assoc 2)
             (movem o1 -5 q)
             (skipn nil -5 q)
             (jrst 4)
             (move o1 -5 q)
             (move o1 1 o1)
             (movem o1 -4 q)
             (move o2 -8 q)
             (move o1 -4 q)
             (call eq 2)
             (jumpe o1 6)
             (move o1 nil)
             (movei n 1)
             (jrst 5)
(label 6)    (move o2 -8 q)
             (move o1 -5 q)
             (call lisp::%rplacd 2)
             (move o1 (constant 0))
             (movei n 1)
(label 5)    (jrst 3)
(label 4)    (move o6 -6 q)
             (movem o6 -4 q)
             (move o2 -8 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -2 q)
             (move o1 -4 q)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 -2 q)
             (call cons 2)
             (movem o1 -3 q)
             (move o2 -3 q)
             (move o1 -4 q)
             (call lisp::%rplaca 2)
             (move o1 (constant 0))
             (movei n 1)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote method-add) (quote lisp::%args-documentation) (quote (name type fn-name structure))) 
(%put (quote method-add) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_method-find expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (movem o3 -5 q)
             (move o3 nil)
             (move o1 -7 q)
             (move o2 -5 q)
             (call flavors::%get-method-types 3)
             (movem o1 -4 q)
             (skipn nil -4 q)
             (jrst 3)
             (move o1 -4 q)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 -6 q)
             (call assoc 2)
             (move o1 1 o1)
             (movei n 1)
             (jrst 4)
(label 3)    (move o1 nil)
             (movei n 1)
(label 4)    (adjsp q -8)
             (popj p)
)

(%put (quote method-find) (quote lisp::%args-documentation) (quote (name type structure))) 
(%put (quote method-find) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

;;;**************** KLUDGE! /Vic
(defun calculate-all-components (flavor undefined)
  (with-stacks (components-stack second-stack)
    (let ((undefined-flavors nil) (undefined-includeds nil))
      (labels ((flavor-add-component (flavor)
		 (vector-push-extend flavor components-stack)
		 (dolist (c (flavor-components flavor))
		   (setq c (get-flavor c t))
		   (cond ((flavor-defined-p c)
			  (unless (find c components-stack)
			    (flavor-add-component c)))
			 (t (push (flavor-name c) undefined-flavors))))))
	(flavor-add-component flavor)
	(dotimes (i (length components-stack))
	  (labels
	    ((flavor-add-included (flavor)
	       (cond ((not (flavor-defined-p flavor))
		      (push (flavor-name flavor) undefined-includeds))
		     ((or (find flavor components-stack :start i)
			  (find flavor second-stack)))
		     (t (vector-push-extend flavor second-stack)
			(dolist (c (flavor-components flavor))
			  (flavor-add-included (get-flavor c t)))
			(dolist (incl (flavor-included-flavors flavor))
			  (flavor-add-included (get-flavor incl t)))))))
	    (let ((flav (aref components-stack i)))
	      (vector-push-extend flav second-stack)
	      (dolist (incl (flavor-included-flavors flav))
		(unless
		  (find incl components-stack :test
			#'(lambda (incl c)
			    (member incl (flavor-included-flavors c))))
		  (flavor-add-included incl))))))
	(unless (find-if #'(lambda (c) (not (flavor-has-vanilla-p c)))
			 second-stack)
	  (vector-push-extend (get-flavor 'vanilla-flavor) second-stack)))
      (cond ((car undefined-flavors)
	     (funcall undefined (flavor-name flavor) undefined-flavors))
	    (T (when (car undefined-includeds)
		 (format *error-output* "Undefined included flavors ignored - ~S."
			 undefined-includeds))
	       (coerce second-stack 'list))))))
;;;**************** End Kludge

#_(lap #0_calculate-instance-env expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(%stacks% 0 1000 :adjustable t :fill-pointer #() :end2 :end1 "Ordered variable ~S in flavor ~S conflicts ~
			   with ordered variable ~S in flavor ~S." unsupplied :numordered :vector :defaults :ables :required required :end)
       (code-start)
(label 1)    (adjsp q 21)
             (movem o1 -20 q)
             (move o1 (special 0))
             (call length 1)
             (movem o1 -18 q)
             (move o2 (constant 1))
             (move o1 -18 q)
             (call > 2)
             (jumpe o1 4)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -18 q)
             (move o2 (constant 1))
             (move o1 -18 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -18 q)
             (movem o6 -19 q)
             (jrst 3)
(label 4)    (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -19 q)
(label 3)    (move o1 (special 0))
             (call length 1)
             (movem o1 -17 q)
             (move o2 (constant 1))
             (move o1 -17 q)
             (call > 2)
             (jumpe o1 8)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -17 q)
             (move o2 (constant 1))
             (move o1 -17 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -17 q)
             (movem o6 -18 q)
             (jrst 7)
(label 8)    (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -18 q)
(label 7)    (move o1 (special 0))
             (call length 1)
             (movem o1 -16 q)
             (move o2 (constant 1))
             (move o1 -16 q)
             (call > 2)
             (jumpe o1 12)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -16 q)
             (move o2 (constant 1))
             (move o1 -16 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -16 q)
             (movem o6 -17 q)
             (jrst 11)
(label 12)   (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -17 q)
(label 11)   (icall cunwind)
             (jrst 15)
             (jrst 16)
             (move o6 (constant 1))
             (movem o6 -16 q)
             (move o6 (constant 6))
             (movem o6 -15 q)
             (movem nil -14 q)
             (movem nil -13 q)
             (move o1 -20 q)
             (call flavors::flavor-all-components 1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 21)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 22)
             (jrst 17)
(label 22)   (move o1 -11 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call flavors::method-env-numordered 1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 -15 q)
             (movem o6 -5 q)
             (move o6 (constant 7))
             (movem o6 -4 q)
             (move o6 -16 q)
             (movem o6 -3 q)
             (move o6 (constant 8))
             (movem o6 -2 q)
             (push q -16 q)
             (move o1 -7 q)
             (move o2 -6 q)
             (move o3 -5 q)
             (move o4 -4 q)
             (move o5 -3 q)
             (call mismatch 6)
             (movem o1 -7 q)
             (move o2 -16 q)
             (move o1 -9 q)
             (call > 2)
             (jumpe o1 25)
             (skipn nil -7 q)
             (jrst 26)
             (move o2 -7 q)
             (move o1 -15 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -14 q)
             (call flavors::flavor-name 1)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -11 q)
             (call flavors::flavor-name 1)
             (move o5 o1)
             (move o1 (constant 9))
             (move o2 -5 q)
             (move o3 -4 q)
             (move o4 -3 q)
             (call error 5)
(label 26)   (move o6 -8 q)
             (movem o6 -15 q)
             (move o6 -9 q)
             (movem o6 -16 q)
             (jrst 24)
(label 25)   (skipn nil -7 q)
             (jrst 29)
             (move o2 -7 q)
             (move o1 -15 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -14 q)
             (call flavors::flavor-name 1)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 -8 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -11 q)
             (call flavors::flavor-name 1)
             (move o5 o1)
             (move o1 (constant 9))
             (move o2 -5 q)
             (move o3 -4 q)
             (move o4 -3 q)
             (call error 5)
(label 29)
(label 24)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 21)
(label 17)   (move o2 -16 q)
             (move o1 -17 q)
             (call lisp::%set-fill-pointer 2)
             (move o2 -16 q)
             (move o1 -18 q)
             (call lisp::%set-fill-pointer 2)
             (move o2 -16 q)
             (move o1 -19 q)
             (call lisp::%set-fill-pointer 2)
             (move o4 -16 q)
             (move o1 -17 q)
             (move o2 -15 q)
             (move o3 (constant 8))
             (call replace 4)
             (move o2 (constant 10))
             (move o1 -18 q)
             (call fill 2)
             (move o2 (constant 1))
             (move o1 -19 q)
             (call fill 2)
             (move o1 -20 q)
             (call flavors::flavor-all-components 1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 36)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 37)
             (jrst 32)
(label 37)   (move o1 -11 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -9 q)
             (move o6 (constant 1))
             (movem o6 -8 q)
             (move o1 -9 q)
             (call length 1)
             (movem o1 -7 q)
(label 43)   (move o2 -7 q)
             (move o1 -8 q)
             (call < 2)
             (jumpn o1 44)
             (jrst 39)
(label 44)   (move o2 -8 q)
             (move o1 -9 q)
             (call aref 2)
             (movem o1 -6 q)
             (move o2 -17 q)
             (move o1 -6 q)
             (call position 2)
             (movem o1 -13 q)
             (skipn nil -13 q)
             (jrst 47)
             (move o2 -13 q)
             (move o1 -18 q)
             (call aref 2)
             (move o2 o1)
             (move o1 (constant 10))
             (call eq 2)
             (jumpe o1 49)
             (move o1 -10 q)
             (call flavors::method-env-defaults 1)
             (movem o1 -3 q)
             (move o2 -8 q)
             (move o1 -3 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -18 q)
             (move o2 -13 q)
             (call lisp::%aset 3)
             (move o1 -10 q)
             (call flavors::method-env-ables 1)
             (movem o1 -3 q)
             (move o2 -8 q)
             (move o1 -3 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o2 -13 q)
             (move o1 -19 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -3 q)
             (call logior 2)
             (move o3 o1)
             (move o1 -19 q)
             (move o2 -13 q)
             (call lisp::%aset 3)
(label 49)   (jrst 46)
(label 47)   (move o2 -17 q)
             (move o1 -6 q)
             (call vector-push-extend 2)
             (move o1 -10 q)
             (call flavors::method-env-defaults 1)
             (movem o1 -5 q)
             (move o2 -8 q)
             (move o1 -5 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o2 -18 q)
             (move o1 -5 q)
             (call vector-push-extend 2)
             (move o1 -10 q)
             (call flavors::method-env-ables 1)
             (movem o1 -5 q)
             (move o2 -8 q)
             (move o1 -5 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o2 -19 q)
             (move o1 -5 q)
             (call vector-push-extend 2)
(label 46)   (move o1 -8 q)
             (call 1+ 1)
             (movem o1 -8 q)
             (jrst 43)
(label 39)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 36)
(label 32)   (move o6 (constant 11))
             (movem o6 -12 q)
             (move o6 -16 q)
             (movem o6 -11 q)
             (move o6 (constant 12))
             (movem o6 -10 q)
             (move o1 -17 q)
             (call copy-seq 1)
             (movem o1 -9 q)
             (move o6 (constant 13))
             (movem o6 -8 q)
             (move o1 -18 q)
             (call copy-seq 1)
             (push q o1)
             (push q (constant 14))
             (move o1 -21 q)
             (call copy-seq 1)
             (push q o1)
             (push q (constant 15))
             (movem nil -11 q)
             (move o6 (constant 1))
             (movem o6 -10 q)
             (move o1 -22 q)
             (call length 1)
             (movem o1 -9 q)
(label 57)   (move o2 -9 q)
             (move o1 -10 q)
             (call < 2)
             (jumpn o1 58)
             (jrst 53)
(label 58)   (move o2 -10 q)
             (move o1 -22 q)
             (call aref 2)
             (move o2 o1)
             (move o1 (constant 16))
             (call eq 2)
             (jumpe o1 61)
             (move o2 -10 q)
             (move o1 -21 q)
             (call aref 2)
             (movem o1 -8 q)
             (move o2 -11 q)
             (move o1 -8 q)
             (call cons 2)
             (movem o1 -11 q)
(label 61)   (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -10 q)
             (jrst 57)
(label 53)   (push q -11 q)
             (move o1 -17 q)
             (move o2 -16 q)
             (move o3 -15 q)
             (move o4 -14 q)
             (move o5 -13 q)
             (call flavors::make-instance-env 10)
             (popj p)
(label 15)   (move o2 (constant 1))
             (move o1 -19 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -19 q)
             (move o2 nil)
             (move o3 (constant 17))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -19 q)
             (call vector-push-extend 2)
             (move o2 (constant 1))
             (move o1 -18 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -18 q)
             (move o2 nil)
             (move o3 (constant 17))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -18 q)
             (call vector-push-extend 2)
             (move o2 (constant 1))
             (move o1 -17 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -17 q)
             (move o2 nil)
             (move o3 (constant 17))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -17 q)
             (call vector-push-extend 2)
             (popj p)
(label 16)   (adjsp q -21)
             (popj p)
)

(%put (quote calculate-instance-env) (quote lisp::%args-documentation) (quote (flavor))) 
(%put (quote calculate-instance-env) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defflavor) (quote lisp::%fun-documentation) (quote "(flavor-name iv-list component-list . options)
  Refer to the flavor documentation for details.")) 

#_(lap #0_defflavor macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." defflavor progn eval-when (load) %defflavor quote)
       (code-start)
(label 1)    (adjsp q 15)
             (movem o1 -14 q)
             (move o1 -14 q)
             (call length 1)
             (movem o1 -13 q)
             (move o2 (constant 0))
             (move o1 -13 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -14 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -14 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o1 -14 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -12 q)
             (move o1 -14 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -11 q)
             (move o1 -14 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o4 -10 q)
             (move o1 -13 q)
             (move o2 -12 q)
             (move o3 -11 q)
             (call flavors::%defflavor 4)
             (move o2 -13 q)
             (move o1 (constant 7))
             (call list 2)
             (movem o1 -5 q)
             (move o2 -12 q)
             (move o1 (constant 7))
             (call list 2)
             (movem o1 -4 q)
             (move o2 -11 q)
             (move o1 (constant 7))
             (call list 2)
             (movem o1 -3 q)
             (move o2 -10 q)
             (move o1 (constant 7))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 6))
             (move o2 -5 q)
             (move o3 -4 q)
             (move o4 -3 q)
             (call list 5)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (call list 3)
             (movem o1 -8 q)
             (move o1 -13 q)
             (call flavors::%flavor-forms 1)
             (movem o1 -7 q)
             (move o2 -13 q)
             (move o1 (constant 7))
             (call list 2)
             (call list 1)
             (move o2 o1)
             (move o1 -7 q)
             (call nconc 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -8 q)
             (call list* 3)
(label 3)    (adjsp q -15)
             (popj p)
)

(%put (quote defflavor) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defflavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_%flavor-forms expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." 0 defmethod (internal-init) required unsupplied when slot-unbound-p self setq 1 3 string progn proclaim quote inline defun (self) instance-ref defsetf (new) list (quote setf) (quote instance-ref) "%SET-" "%GET-" send (quote send))
       (code-start)
(label 1)    (adjsp q 32)
             (movem o1 -31 q)
             (move o6 -31 q)
             (movem o6 -29 q)
             (move o2 (constant 0))
             (move o1 -29 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -30 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -29 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -28 q)
             (move o6 -29 q)
             (movem o6 -27 q)
             (move o6 (constant 0))
             (movem o6 -26 q)
             (move o6 -28 q)
             (movem o6 -25 q)
             (move o3 -25 q)
             (move o1 -27 q)
             (move o2 -26 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -29 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -28 q)
             (movem o6 -30 q)
             (jrst 3)
(label 5)    (move o2 -29 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -30 q)
(label 3)    (move o1 -30 q)
             (call flavors::flavor-prefix 1)
             (movem o1 -29 q)
             (move o1 -30 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -28 q)
             (move o1 -28 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -27 q)
             (move o1 -28 q)
             (call flavors::method-env-numordered 1)
             (movem o1 -26 q)
             (move o1 -28 q)
             (call flavors::method-env-ables 1)
             (movem o1 -25 q)
             (move o1 -28 q)
             (call flavors::method-env-defaults 1)
             (movem o1 -24 q)
             (movem nil -23 q)
             (movem nil -22 q)
             (move o1 -27 q)
             (call length 1)
             (call 1- 1)
             (movem o1 -21 q)
(label 12)   (move o2 (constant 4))
             (move o1 -21 q)
             (call < 2)
             (jumpe o1 13)
             (move o2 (constant 6))
             (move o1 -31 q)
             (call cons 2)
             (movem o1 -19 q)
             (move o4 -22 q)
             (move o1 (constant 5))
             (move o2 -19 q)
             (move o3 nil)
             (call list* 4)
             (movem o1 -20 q)
             (move o2 -23 q)
             (move o1 -20 q)
             (call cons 2)
             (jrst 8)
(label 13)   (move o2 -21 q)
             (move o1 -24 q)
             (call aref 2)
             (movem o1 -20 q)
             (move o2 -21 q)
             (move o1 -27 q)
             (call aref 2)
             (movem o1 -19 q)
             (move o2 (constant 7))
             (move o1 -20 q)
             (call eq 2)
             (jumpn o1 17)
             (move o2 (constant 8))
             (move o1 -20 q)
             (call eq 2)
             (skipe nil o1)
(label 17)   (jrst 16)
             (move o3 -21 q)
             (move o1 (constant 10))
             (move o2 (constant 11))
             (call list 3)
             (movem o1 -17 q)
             (move o3 -20 q)
             (move o1 (constant 12))
             (move o2 -19 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 9))
             (move o2 -17 q)
             (call list 3)
             (movem o1 -18 q)
             (move o2 -22 q)
             (move o1 -18 q)
             (call cons 2)
             (movem o1 -22 q)
(label 16)   (move o2 (constant 14))
             (move o1 (constant 13))
             (call cons 2)
             (movem o1 -18 q)
             (move o2 -21 q)
             (move o1 -25 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 20)
             (move o2 -21 q)
             (move o1 -27 q)
             (call aref 2)
             (call symbol-name 1)
             (movem o1 -18 q)
             (move o3 -18 q)
             (move o1 (constant 15))
             (move o2 -29 q)
             (call concatenate 3)
             (movem o1 -16 q)
             (move o1 -30 q)
             (call flavors::flavor-name 1)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -16 q)
             (call intern 2)
             (movem o1 -17 q)
             (move o2 -26 q)
             (move o1 -21 q)
             (call < 2)
             (jumpe o1 22)
             (move o2 -17 q)
             (move o1 (constant 19))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 18))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -15 q)
             (move o3 -21 q)
             (move o1 (constant 22))
             (move o2 (constant 11))
             (call list 3)
             (move o4 o1)
             (move o1 (constant 20))
             (move o2 -17 q)
             (move o3 (constant 21))
             (call list 4)
             (movem o1 -14 q)
             (move o4 -21 q)
             (move o1 (constant 25))
             (move o2 (constant 27))
             (move o3 (constant 11))
             (call list 4)
             (movem o1 -7 q)
             (move o4 (constant 24))
             (move o1 (constant 25))
             (move o2 (constant 26))
             (move o3 -7 q)
             (call list* 4)
             (move o5 o1)
             (move o1 (constant 23))
             (move o2 -17 q)
             (move o3 (constant 21))
             (move o4 (constant 24))
             (call list 5)
             (move o4 o1)
             (move o1 (constant 16))
             (move o2 -15 q)
             (move o3 -14 q)
             (call list 4)
             (movem o1 -16 q)
             (move o2 -23 q)
             (move o1 -16 q)
             (call cons 2)
             (movem o1 -23 q)
             (jrst 21)
(label 22)   (move o3 -18 q)
             (move o1 (constant 15))
             (move o2 (constant 28))
             (call concatenate 3)
             (call make-symbol 1)
             (movem o1 -16 q)
             (move o3 -18 q)
             (move o1 (constant 15))
             (move o2 (constant 29))
             (call concatenate 3)
             (call make-symbol 1)
             (movem o1 -15 q)
             (move o2 -21 q)
             (move o1 -27 q)
             (call aref 2)
             (movem o1 -14 q)
             (move o6 (constant 16))
             (movem o6 -13 q)
             (move o2 -17 q)
             (move o1 (constant 19))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 18))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -12 q)
             (move o2 -15 q)
             (move o1 (constant 18))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 30))
             (move o2 (constant 11))
             (call list 3)
             (move o4 o1)
             (move o1 (constant 20))
             (move o2 -17 q)
             (move o3 (constant 21))
             (call list 4)
             (movem o1 -11 q)
             (move o2 -16 q)
             (move o1 (constant 18))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 18))
             (call list 2)
             (movem o1 -3 q)
             (move o5 (constant 24))
             (move o1 (constant 25))
             (move o2 (constant 31))
             (move o3 (constant 11))
             (move o4 -3 q)
             (call list* 5)
             (move o5 o1)
             (move o1 (constant 23))
             (move o2 -17 q)
             (move o3 (constant 21))
             (move o4 (constant 24))
             (call list 5)
             (movem o1 -10 q)
             (move o2 -15 q)
             (move o1 -31 q)
             (call list 2)
             (movem o1 -8 q)
             (move o4 -14 q)
             (move o1 (constant 5))
             (move o2 -8 q)
             (move o3 nil)
             (call list 4)
             (movem o1 -9 q)
             (move o2 -16 q)
             (move o1 -31 q)
             (call list 2)
             (movem o1 -7 q)
             (move o3 (constant 24))
             (move o1 (constant 12))
             (move o2 -14 q)
             (call list* 3)
             (move o4 o1)
             (move o1 (constant 5))
             (move o2 -7 q)
             (move o3 (constant 24))
             (call list 4)
             (push q o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (move o3 -12 q)
             (move o4 -11 q)
             (move o5 -10 q)
             (call list 6)
             (movem o1 -13 q)
             (move o2 -23 q)
             (move o1 -13 q)
             (call cons 2)
             (movem o1 -23 q)
(label 21)
(label 20)   (move o1 -21 q)
             (call 1- 1)
             (movem o1 -21 q)
             (jrst 12)
(label 8)    (adjsp q -32)
             (popj p)
)

(%put (quote %flavor-forms) (quote lisp::%args-documentation) (quote (flavor-name))) 
(%put (quote %flavor-forms) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_%defflavor expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." t 0 ((internal-init :progn . :base-flavor-last)) *var-options* :method-order :required-instance-variables :ordered-instance-variables :settable-instance-variables :gettable-instance-variables :initable-instance-variables :outside-accessible-instance-variables :no-vanilla-flavor :abstract-flavor :documentation :accessor-prefix :required-methods :required-flavors :included-flavors :init-keywords :default-init-plist :required-init-keywords :method-combination "Unknown defflavor option ~S." string "-" 1 2 vanilla-flavor *all-flavor-names* 4 *dirty-flavors* 18 %stacks% 1000 :adjustable :fill-pointer :end 3 19 17 6 8 9 7 10 :test equal *error-output* "Instances of flavor ~S temporarily dissociated:~%~
	      it is now an abstract flavor." 2046 :primary :upcase *print-case* :key car 23 5 11)
       (code-start)
(label 1)    (adjsp q 41)
             (movem o1 -40 q)
             (movem o2 -39 q)
             (movem o3 -38 q)
             (movem o4 -37 q)
             (move o6 -40 q)
             (movem o6 -35 q)
             (move o2 (constant 0))
             (move o1 -35 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -36 q)
             (jumpn o1 3)
             (move o2 -35 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -34 q)
             (move o6 -35 q)
             (movem o6 -33 q)
             (move o6 (constant 0))
             (movem o6 -32 q)
             (move o6 -34 q)
             (movem o6 -31 q)
             (move o3 -31 q)
             (move o1 -33 q)
             (move o2 -32 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -35 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -34 q)
             (movem o6 -36 q)
             (jrst 3)
             (move o2 -35 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -36 q)
(label 3)    (move o1 nil)
             (call list 1)
             (movem o1 -34 q)
             (move o6 -34 q)
             (movem o6 -33 q)
             (move o6 -39 q)
             (movem o6 -32 q)
(label 12)   (skipe nil -32 q)
             (jrst 13)
             (move o1 -34 q)
             (move o1 1 o1)
             (movem o1 -35 q)
             (jrst 8)
(label 13)   (move o6 -33 q)
             (movem o6 -31 q)
             (move o1 -32 q)
             (move o1 0 o1)
             (movem o1 -30 q)
             (move o1 -30 q)
             (call listp 1)
             (jumpe o1 17)
             (move o1 -30 q)
             (move o1 0 o1)
             (jrst 18)
(label 17)   (move o1 -30 q)
(label 18)   (call list 1)
             (movem o1 -33 q)
             (move o2 -33 q)
             (move o1 -31 q)
             (call rplacd 2)
             (move o1 -32 q)
             (move o1 1 o1)
             (movem o1 -32 q)
             (jrst 12)
(label 8)    (move o1 -36 q)
             (call flavors::flavor-components 1)
             (movem o1 -34 q)
             (move o1 -36 q)
             (call flavors::flavor-included-flavors 1)
             (movem o1 -33 q)
             (movem nil -32 q)
             (move o6 (constant 4))
             (movem o6 -31 q)
             (move o6 (constant 5))
             (movem o6 -30 q)
             (movem nil -29 q)
             (move o6 (constant 6))
             (movem o6 -28 q)
             (movem nil -27 q)
             (movem nil -26 q)
             (movem nil -25 q)
             (movem nil -24 q)
             (movem nil -23 q)
             (movem nil -22 q)
             (movem nil -21 q)
             (movem nil -20 q)
             (movem nil -19 q)
             (movem nil -18 q)
             (movem nil -17 q)
             (movem nil -16 q)
             (movem nil -15 q)
             (movem nil -14 q)
             (movem nil -13 q)
             (move o6 -37 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 23)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 24)
             (jrst 19)
(label 24)   (move o1 -11 q)
             (call listp 1)
             (jumpe o1 27)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -13 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 26)
(label 27)   (move o2 (special 7))
             (move o1 -11 q)
             (call member 2)
             (jumpe o1 28)
             (move o6 -35 q)
             (movem o6 -13 q)
             (jrst 26)
(label 28)   (move o6 (constant 4))
             (movem o6 -13 q)
(label 26)   (move o6 -11 q)
             (movem o6 -10 q)
             (move o2 (constant 8))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 32)
             (jrst 31)
(label 32)   (move o2 (constant 9))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 33)
             (move o6 -13 q)
             (movem o6 -25 q)
             (jrst 31)
(label 33)   (move o2 (constant 10))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 34)
             (move o6 -13 q)
             (movem o6 -26 q)
             (jrst 31)
(label 34)   (move o2 (constant 11))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 35)
             (move o6 -13 q)
             (movem o6 -24 q)
             (jrst 31)
(label 35)   (move o2 (constant 12))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 36)
             (move o6 -13 q)
             (movem o6 -23 q)
             (jrst 31)
(label 36)   (move o2 (constant 13))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 37)
             (move o6 -13 q)
             (movem o6 -22 q)
             (jrst 31)
(label 37)   (move o2 (constant 14))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 38)
             (move o6 -13 q)
             (movem o6 -21 q)
             (jrst 31)
(label 38)   (move o2 (constant 15))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 39)
             (movem nil -31 q)
             (jrst 31)
(label 39)   (move o2 (constant 16))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 40)
             (move o6 (constant 4))
             (movem o6 -29 q)
             (jrst 31)
(label 40)   (move o2 (constant 17))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 41)
             (move o1 -13 q)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -40 q)
             (move o2 (constant 0))
             (call lisp::%set-documentation 3)
             (jrst 31)
(label 41)   (move o2 (constant 18))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 42)
             (move o1 -13 q)
             (move o1 0 o1)
             (call symbol-name 1)
             (movem o1 -14 q)
             (jrst 31)
(label 42)   (move o2 (constant 19))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 43)
             (move o6 -13 q)
             (movem o6 -19 q)
             (jrst 31)
(label 43)   (move o2 (constant 20))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 44)
             (move o6 -13 q)
             (movem o6 -18 q)
             (jrst 31)
(label 44)   (move o2 (constant 21))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 45)
             (move o6 -13 q)
             (movem o6 -32 q)
             (jrst 31)
(label 45)   (move o2 (constant 22))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 46)
             (move o6 -13 q)
             (movem o6 -16 q)
             (jrst 31)
(label 46)   (move o2 (constant 23))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 47)
             (move o6 -13 q)
             (movem o6 -17 q)
             (jrst 31)
(label 47)   (move o2 (constant 24))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 48)
             (move o6 -13 q)
             (movem o6 -15 q)
             (jrst 31)
(label 48)   (move o2 (constant 25))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 49)
             (move o6 -13 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
(label 54)   (move o1 -9 q)
             (call atom 1)
             (jumpe o1 55)
             (jrst 50)
(label 55)   (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o2 o1)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -5 q)
(label 61)   (move o1 -6 q)
             (call atom 1)
             (jumpe o1 62)
             (jrst 57)
(label 62)   (move o2 -7 q)
             (move o1 -5 q)
             (call cons 2)
             (movem o1 -4 q)
             (move o2 -28 q)
             (move o1 -4 q)
             (call cons 2)
             (movem o1 -28 q)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (jrst 61)
(label 57)   (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (jrst 54)
(label 50)   (jrst 31)
(label 49)   (move o2 -11 q)
             (move o1 (constant 26))
             (call error 2)
(label 31)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 23)
(label 19)   (move o6 -39 q)
             (movem o6 -12 q)
             (move o6 -26 q)
             (movem o6 -11 q)
             (move o6 -25 q)
             (movem o6 -10 q)
             (move o6 -24 q)
             (movem o6 -9 q)
             (move o6 -23 q)
             (movem o6 -8 q)
             (push q -22 q)
             (push q -22 q)
             (move o1 -14 q)
             (move o2 -13 q)
             (move o3 -12 q)
             (move o4 -11 q)
             (move o5 -10 q)
             (call flavors::make-env 7)
             (movem o1 -20 q)
             (move o1 -14 q)
             (skipe nil o1)
             (movem o1 -14 q)
             (jumpn o1 66)
             (move o1 -40 q)
             (call symbol-name 1)
             (movem o1 -11 q)
             (move o3 (constant 28))
             (move o1 (constant 27))
             (move o2 -11 q)
             (call concatenate 3)
             (movem o1 -14 q)
(label 66)   (move o2 -34 q)
             (move o1 -38 q)
             (call equal 2)
             (jumpe1 o1 69)
             (move o2 -33 q)
             (move o1 -32 q)
             (call equal 2)
             (jumpe1 o1 69)
             (move o2 (constant 5))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -11 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -11 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (move o2 o1)
             (move o1 -31 q)
             (call eq 2)
             (jumpe1 o1 69)
             (move o2 (constant 30))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (skipn nil o1)
(label 69)   (jrst 68)
             (move o6 (constant 5))
             (movem o6 -12 q)
             (move o6 (constant 4))
             (movem o6 -11 q)
             (skipn nil -11 q)
             (jrst 71)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 72)
(label 71)   (move o6 (constant 5))
             (movem o6 -9 q)
(label 72)   (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o1 -36 q)
             (call flavors::flavor-name 1)
             (movem o1 -12 q)
             (move o2 (constant 31))
             (move o1 -12 q)
             (call eq 2)
             (jumpe o1 74)
             (move o6 (special 32))
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 79)   (move o1 -12 q)
             (call atom 1)
             (jumpe o1 80)
             (jrst 75)
(label 80)   (move o6 -11 q)
             (movem o6 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -10 q)
             (jumpn o1 82)
             (jrst 84)
             (move o2 -9 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -8 q)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o3 -5 q)
             (move o1 -7 q)
             (move o2 -6 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -9 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -8 q)
             (movem o6 -10 q)
             (jrst 82)
(label 84)   (move o2 -9 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -10 q)
(label 82)   (move o2 (constant 5))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -9 q)
             (move o1 -10 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -9 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 88)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 93)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 94)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 94)
(label 93)   (jrst 91)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (movem o1 -8 q)
             (move o2 (constant 5))
             (move o1 -8 q)
             (call > 2)
             (jumpn o1 96)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 96)
(label 91)   (jrst 90)
             (move o2 (special 34))
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 90)   (move o6 (constant 5))
             (movem o6 -9 q)
             (move o6 -10 q)
             (movem o6 -8 q)
             (move o6 (constant 4))
             (movem o6 -7 q)
             (skipn nil -7 q)
             (jrst 98)
             (move o6 (constant 29))
             (movem o6 -5 q)
             (jrst 99)
(label 98)   (move o6 (constant 5))
             (movem o6 -5 q)
(label 99)   (move o2 -9 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call dpb 3)
             (movem o1 -6 q)
             (move o3 -6 q)
             (move o1 -8 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
(label 88)   (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 79)
(label 75)   (jrst 73)
(label 74)   (move o1 (special 36))
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 5))
             (move o1 -11 q)
             (call > 2)
             (jumpe o1 103)
             (move o1 (special 36))
             (call vector-pop 1)
             (movem o1 -11 q)
             (move o2 (constant 5))
             (move o1 -11 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -11 q)
             (movem o6 -12 q)
             (jrst 102)
(label 103)  (move o5 (constant 5))
             (move o1 (constant 37))
             (move o2 (constant 38))
             (move o3 (constant 4))
             (move o4 (constant 39))
             (call make-array 5)
             (movem o1 -12 q)
(label 102)  (icall cunwind)
             (jrst 106)
             (jrst 107)
             (move o2 -12 q)
             (move o1 -36 q)
             (call vector-push-extend 2)
             (move o6 (constant 5))
             (movem o6 -11 q)
(label 112)  (move o1 -12 q)
             (call length 1)
             (move o2 o1)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 113)
             (jrst 108)
(label 113)  (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 119)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 120)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 120)
(label 119)  (jrst 117)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (movem o1 -8 q)
             (move o2 (constant 5))
             (move o1 -8 q)
             (call > 2)
             (jumpn o1 122)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 122)
(label 117)  (jrst 116)
             (move o2 (special 34))
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 116)  (move o6 (constant 5))
             (movem o6 -9 q)
             (move o6 -10 q)
             (movem o6 -8 q)
             (move o6 (constant 4))
             (movem o6 -7 q)
             (skipn nil -7 q)
             (jrst 124)
             (move o6 (constant 29))
             (movem o6 -5 q)
             (jrst 125)
(label 124)  (move o6 (constant 5))
             (movem o6 -5 q)
(label 125)  (move o2 -9 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call dpb 3)
             (movem o1 -6 q)
             (move o3 -6 q)
             (move o1 -8 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (call flavors::flavor-dependents 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
(label 130)  (move o1 -10 q)
             (call atom 1)
             (jumpe o1 131)
             (jrst 126)
(label 131)  (move o2 -12 q)
             (move o1 -9 q)
             (call position 2)
             (jumpn o1 134)
             (move o2 -12 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 134)  (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (jrst 130)
(label 126)  (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -11 q)
             (jrst 112)
(label 108)  (popj p)
(label 106)  (move o2 (constant 5))
             (move o1 -12 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -12 q)
             (move o2 nil)
             (move o3 (constant 40))
             (call fill 4)
             (move o2 (special 36))
             (move o1 -12 q)
             (call vector-push-extend 2)
             (popj p)
(label 107)
(label 73)   (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -32 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 41))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -38 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 30))
             (call lisp::%sp-svset 3)
             (move o6 (constant 5))
             (movem o6 -12 q)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -31 q)
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 137)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 138)
(label 137)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 138)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
             (move o6 -38 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 143)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 144)
             (jrst 139)
(label 144)  (move o6 -11 q)
             (movem o6 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -10 q)
             (jumpn o1 146)
             (jrst 148)
             (move o2 -9 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -8 q)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
             (move o6 -8 q)
             (movem o6 -5 q)
             (move o3 -5 q)
             (move o1 -7 q)
             (move o2 -6 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -9 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -8 q)
             (movem o6 -10 q)
             (jrst 146)
(label 148)  (move o2 -9 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -10 q)
(label 146)  (move o1 -10 q)
             (call flavors::flavor-dependents 1)
             (move o2 o1)
             (move o1 -36 q)
             (call adjoin 2)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -10 q)
             (move o2 (constant 43))
             (call lisp::%sp-svset 3)
             (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 143)
(label 139)
(label 68)   (move o6 (constant 29))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-required-flavors 1)
             (move o2 o1)
             (move o1 -18 q)
             (call equal 2)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -11 q)
             (skipn nil -11 q)
             (jrst 152)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 153)
(label 152)  (move o6 (constant 5))
             (movem o6 -9 q)
(label 153)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o6 (constant 44))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-required-methods 1)
             (move o2 o1)
             (move o1 -19 q)
             (call equal 2)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -11 q)
             (skipn nil -11 q)
             (jrst 154)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 155)
(label 154)  (move o6 (constant 5))
             (movem o6 -9 q)
(label 155)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o6 (constant 45))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-default-plist 1)
             (move o2 o1)
             (move o1 -17 q)
             (call equal 2)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -11 q)
             (skipn nil -11 q)
             (jrst 156)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 157)
(label 156)  (move o6 (constant 5))
             (movem o6 -9 q)
(label 157)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o6 (constant 46))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-init-keywords 1)
             (move o2 o1)
             (move o1 -16 q)
             (call equal 2)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -11 q)
             (skipn nil -11 q)
             (jrst 158)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 159)
(label 158)  (move o6 (constant 5))
             (movem o6 -9 q)
(label 159)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o6 (constant 47))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-required-inits 1)
             (move o2 o1)
             (move o1 -15 q)
             (call equal 2)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -11 q)
             (skipn nil -11 q)
             (jrst 160)
             (move o6 (constant 29))
             (movem o6 -9 q)
             (jrst 161)
(label 160)  (move o6 (constant 5))
             (movem o6 -9 q)
(label 161)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o3 -30 q)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -30 q)
             (move o1 -36 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -12 q)
             (skipn nil -12 q)
             (jrst 162)
             (move o1 -20 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -11 q)
             (move o1 -12 q)
             (call flavor-internals:iv-env-vector 1)
             (move o2 o1)
             (move o1 -11 q)
             (call equalp 2)
             (jumpn o1 164)
             (move o6 (constant 41))
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 165)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 166)
(label 165)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 166)  (move o2 -11 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o3 -30 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o6 -9 q)
             (movem o6 -30 q)
             (move o6 (constant 30))
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 167)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 168)
(label 167)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 168)  (move o2 -11 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o3 -30 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o6 -9 q)
             (movem o6 -30 q)
             (move o6 (constant 33))
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 169)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 170)
(label 169)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 170)  (move o2 -11 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o3 -30 q)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o6 -9 q)
             (movem o6 -30 q)
             (jrst 162)
(label 164)  (move o1 -12 q)
             (call flavors::method-env-ables 1)
             (movem o1 -11 q)
             (move o1 -20 q)
             (call flavors::method-env-ables 1)
             (movem o1 -10 q)
             (move o6 (constant 5))
             (movem o6 -9 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -8 q)
(label 176)  (move o2 -8 q)
             (move o1 -9 q)
             (call < 2)
             (jumpn o1 177)
             (jrst 172)
(label 177)  (move o2 (constant 30))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o2 -9 q)
             (move o1 -10 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (movem o1 -7 q)
             (move o2 (constant 30))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -6 q)
             (move o2 -9 q)
             (move o1 -11 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -6 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 4))
             (move o2 o1)
             (move o1 -7 q)
             (call eq 2)
             (jumpn o1 180)
             (move o6 (constant 48))
             (movem o6 -7 q)
             (move o6 (constant 4))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 181)
             (move o6 (constant 29))
             (movem o6 -4 q)
             (jrst 182)
(label 181)  (move o6 (constant 5))
             (movem o6 -4 q)
(label 182)  (move o2 -7 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -3 q)
             (move o3 -30 q)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o6 -5 q)
             (movem o6 -30 q)
(label 180)  (move o1 -9 q)
             (call 1+ 1)
             (movem o1 -9 q)
             (jrst 176)
(label 172)
(label 162)  (move o1 -36 q)
             (call flavors::flavor-combinations 1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 189)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 190)
             (jrst 185)
(label 190)  (move o4 (constant 50))
             (move o1 -11 q)
             (move o2 -28 q)
             (move o3 (constant 49))
             (call member 4)
             (jumpn o1 193)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -27 q)
             (move o1 -10 q)
             (call adjoin 2)
             (movem o1 -27 q)
(label 193)  (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 189)
(label 185)  (move o6 -28 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 199)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 200)
             (jrst 195)
(label 200)  (move o1 -36 q)
             (call flavors::flavor-combinations 1)
             (movem o1 -9 q)
             (move o4 (constant 50))
             (move o1 -11 q)
             (move o2 -9 q)
             (move o3 (constant 49))
             (call member 4)
             (jumpn o1 203)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o2 -27 q)
             (move o1 -10 q)
             (call adjoin 2)
             (movem o1 -27 q)
(label 203)  (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 199)
(label 195)  (move o2 (constant 29))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 207)
             (skipn nil -29 q)
             (jrst 207)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 209)
             (move o1 -36 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 210)
             (move o1 -36 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 210)
(label 209)  (jrst 207)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (skipn nil o1)
(label 207)  (jrst 206)
             (move o6 (constant 33))
             (movem o6 -12 q)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 212)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 213)
(label 212)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 213)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
             (move o6 (special 51))
             (movem o6 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-name 1)
             (move o3 o1)
             (move o1 -12 q)
             (move o2 (constant 52))
             (call format 3)
             (move o6 (constant 29))
             (movem o6 -12 q)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 214)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 215)
(label 214)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 215)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
             (move o1 -36 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:freeze-instances 1)
(label 206)  (move o2 (constant 29))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 219)
             (skipe nil -29 q)
(label 219)  (jrst 218)
             (move o2 -30 q)
             (move o1 (constant 53))
             (call logior 2)
             (movem o1 -30 q)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 (constant 53))
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (move o6 (constant 29))
             (movem o6 -12 q)
             (move o6 -36 q)
             (movem o6 -11 q)
             (movem nil -10 q)
             (skipn nil -10 q)
             (jrst 221)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 222)
(label 221)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 222)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
(label 218)  (move o1 -36 q)
             (call flavors::flavor-methods 1)
             (movem o1 -12 q)
             (move o6 -24 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 228)  (move o1 -11 q)
             (call atom 1)
             (jumpe o1 229)
             (jrst 224)
(label 229)  (move o1 -10 q)
             (call flavors::get-name 1)
             (movem o1 -9 q)
             (move o3 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (call flavors::method-find 3)
             (jumpn o1 232)
             (move o6 (constant 27))
             (movem o6 -7 q)
             (move o1 -40 q)
             (call symbol-name 1)
             (movem o1 -6 q)
             (move o6 (constant 28))
             (movem o6 -5 q)
             (move o6 -9 q)
             (movem o6 -4 q)
             (move o1 -4 q)
             (call symbolp 1)
             (jumpe o1 233)
             (move o6 (constant 55))
             (movem o6 -3 q)
             (move o1 -3 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -4 q)
             (call prin1-to-string 1)
             (movem o1 -4 q)
             (unbind 1)
             (jrst 234)
(label 233)  (move o6 -4 q)
             (movem o6 -4 q)
(label 234)  (move o6 (constant 28))
             (movem o6 -3 q)
             (move o6 (constant 54))
             (movem o6 -2 q)
             (move o1 -2 q)
             (call symbolp 1)
             (jumpe o1 235)
             (move o6 (constant 55))
             (movem o6 -1 q)
             (move o1 -1 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -2 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 236)
(label 235)  (push q -2 q)
(label 236)  (move o1 -8 q)
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (move o5 -4 q)
             (call concatenate 6)
             (movem o1 -7 q)
             (move o1 -40 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -7 q)
             (call intern 2)
             (movem o1 -8 q)
             (move o2 -10 q)
             (move o1 -8 q)
             (call flavor-internals:define-get-method 2)
             (move o4 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (move o3 -8 q)
             (call flavors::method-add 4)
             (move o2 -27 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -27 q)
(label 232)  (move o1 -10 q)
             (call flavors::set-name 1)
             (movem o1 -9 q)
             (move o3 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (call flavors::method-find 3)
             (jumpn o1 239)
             (move o6 (constant 27))
             (movem o6 -7 q)
             (move o1 -40 q)
             (call symbol-name 1)
             (movem o1 -6 q)
             (move o6 (constant 28))
             (movem o6 -5 q)
             (move o6 -9 q)
             (movem o6 -4 q)
             (move o1 -4 q)
             (call symbolp 1)
             (jumpe o1 240)
             (move o6 (constant 55))
             (movem o6 -3 q)
             (move o1 -3 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -4 q)
             (call prin1-to-string 1)
             (movem o1 -4 q)
             (unbind 1)
             (jrst 241)
(label 240)  (move o6 -4 q)
             (movem o6 -4 q)
(label 241)  (move o6 (constant 28))
             (movem o6 -3 q)
             (move o6 (constant 54))
             (movem o6 -2 q)
             (move o1 -2 q)
             (call symbolp 1)
             (jumpe o1 242)
             (move o6 (constant 55))
             (movem o6 -1 q)
             (move o1 -1 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -2 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 243)
(label 242)  (push q -2 q)
(label 243)  (move o1 -8 q)
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (move o5 -4 q)
             (call concatenate 6)
             (movem o1 -7 q)
             (move o1 -40 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -7 q)
             (call intern 2)
             (movem o1 -8 q)
             (move o2 -10 q)
             (move o1 -8 q)
             (call flavor-internals:define-set-method 2)
             (move o4 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (move o3 -8 q)
             (call flavors::method-add 4)
             (move o2 -27 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -27 q)
(label 239)  (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 228)
(label 224)  (move o6 -23 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 249)  (move o1 -11 q)
             (call atom 1)
             (jumpe o1 250)
             (jrst 245)
(label 250)  (move o1 -10 q)
             (call flavors::get-name 1)
             (movem o1 -9 q)
             (move o3 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (call flavors::method-find 3)
             (jumpn o1 253)
             (move o6 (constant 27))
             (movem o6 -7 q)
             (move o1 -40 q)
             (call symbol-name 1)
             (movem o1 -6 q)
             (move o6 (constant 28))
             (movem o6 -5 q)
             (move o6 -9 q)
             (movem o6 -4 q)
             (move o1 -4 q)
             (call symbolp 1)
             (jumpe o1 254)
             (move o6 (constant 55))
             (movem o6 -3 q)
             (move o1 -3 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -4 q)
             (call prin1-to-string 1)
             (movem o1 -4 q)
             (unbind 1)
             (jrst 255)
(label 254)  (move o6 -4 q)
             (movem o6 -4 q)
(label 255)  (move o6 (constant 28))
             (movem o6 -3 q)
             (move o6 (constant 54))
             (movem o6 -2 q)
             (move o1 -2 q)
             (call symbolp 1)
             (jumpe o1 256)
             (move o6 (constant 55))
             (movem o6 -1 q)
             (move o1 -1 q)
             (spec-bind (special 56))
             (movem o1 (special 56))
             (move o1 -2 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 257)
(label 256)  (push q -2 q)
(label 257)  (move o1 -8 q)
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (move o5 -4 q)
             (call concatenate 6)
             (movem o1 -7 q)
             (move o1 -40 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -7 q)
             (call intern 2)
             (movem o1 -8 q)
             (move o2 -10 q)
             (move o1 -8 q)
             (call flavor-internals:define-get-method 2)
             (move o4 -12 q)
             (move o1 -9 q)
             (move o2 (constant 54))
             (move o3 -8 q)
             (call flavors::method-add 4)
             (move o2 -27 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -27 q)
(label 253)  (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 249)
(label 245)  (move o2 (constant 30))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -11 q)
             (move o1 -36 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -11 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 260)
             (move o1 -20 q)
             (call flavors::method-env-ables 1)
             (movem o1 -11 q)
             (move o1 -20 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -10 q)
             (move o6 (constant 5))
             (movem o6 -9 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -8 q)
(label 265)  (move o2 -8 q)
             (move o1 -9 q)
             (call < 2)
             (jumpn o1 266)
             (jrst 261)
(label 266)  (move o2 -9 q)
             (move o1 -10 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o2 (constant 29))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -6 q)
             (move o2 -9 q)
             (move o1 -11 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -6 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 270)
             (move o2 -24 q)
             (move o1 -7 q)
             (call member 2)
             (skipe nil o1)
(label 270)  (jrst 269)
             (move o1 -7 q)
             (call flavors::set-name 1)
             (movem o1 -6 q)
             (move o3 nil)
             (move o1 -6 q)
             (move o2 -12 q)
             (call flavors::%get-method-types 3)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o4 (constant 58))
             (move o1 (constant 54))
             (move o2 -4 q)
             (move o3 (constant 57))
             (call delete 4)
             (move o2 -27 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -27 q)
(label 269)  (move o2 (constant 5))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -6 q)
             (move o2 -9 q)
             (move o1 -11 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -6 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 275)
             (move o2 -23 q)
             (move o1 -7 q)
             (call member 2)
             (skipe nil o1)
(label 275)  (jrst 274)
             (move o1 -7 q)
             (call flavors::get-name 1)
             (movem o1 -6 q)
             (move o3 nil)
             (move o1 -6 q)
             (move o2 -12 q)
             (call flavors::%get-method-types 3)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o4 (constant 58))
             (move o1 (constant 54))
             (move o2 -4 q)
             (move o3 (constant 57))
             (call delete 4)
             (move o2 -27 q)
             (move o1 -6 q)
             (call cons 2)
             (movem o1 -27 q)
(label 274)  (move o1 -9 q)
             (call 1+ 1)
             (movem o1 -9 q)
             (jrst 265)
(label 261)
(label 260)  (move o1 -30 q)
             (call zerop 1)
             (jumpe1 o1 281)
             (skipn nil -27 q)
(label 281)  (jrst 280)
             (move o1 (special 36))
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 5))
             (move o1 -11 q)
             (call > 2)
             (jumpe o1 284)
             (move o1 (special 36))
             (call vector-pop 1)
             (movem o1 -11 q)
             (move o2 (constant 5))
             (move o1 -11 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -11 q)
             (movem o6 -12 q)
             (jrst 283)
(label 284)  (move o5 (constant 5))
             (move o1 (constant 37))
             (move o2 (constant 38))
             (move o3 (constant 4))
             (move o4 (constant 39))
             (call make-array 5)
             (movem o1 -12 q)
(label 283)  (icall cunwind)
             (jrst 287)
             (jrst 288)
             (move o1 -36 q)
             (call flavors::flavor-name 1)
             (movem o1 -11 q)
             (move o2 (constant 31))
             (move o1 -11 q)
             (call eq 2)
             (jumpe o1 290)
             (move o6 (special 32))
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 295)  (move o1 -11 q)
             (call atom 1)
             (jumpe o1 296)
             (jrst 291)
(label 296)  (move o6 -10 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 298)
             (jrst 300)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 298)
(label 300)  (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 298)  (move o2 -12 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
             (move o2 (constant 5))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 304)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -8 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 309)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 310)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 310)
(label 309)  (jrst 307)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (movem o1 -7 q)
             (move o2 (constant 5))
             (move o1 -7 q)
             (call > 2)
             (jumpn o1 312)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 312)
(label 307)  (jrst 306)
             (move o2 (special 34))
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 306)  (move o6 -9 q)
             (movem o6 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -30 q)
             (call logior 2)
             (movem o1 -7 q)
             (move o3 -7 q)
             (move o1 -8 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (skipn nil -27 q)
             (jrst 314)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (jumpn o1 317)
             (call flavors::alloc-tiny-stack 0)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -27 q)
             (call vector-push-extend 2)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 -7 q)
             (movem o6 -5 q)
             (move o3 -5 q)
             (move o1 -6 q)
             (move o2 (constant 59))
             (call lisp::%sp-svset 3)
             (jrst 316)
(label 317)  (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (move o2 o1)
             (move o1 -27 q)
             (call vector-push-extend 2)
(label 316)
(label 314)
(label 304)  (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 295)
(label 291)  (jrst 289)
(label 290)  (move o2 -12 q)
             (move o1 -36 q)
             (call vector-push-extend 2)
             (move o6 (constant 5))
             (movem o6 -11 q)
(label 326)  (move o1 -12 q)
             (call length 1)
             (move o2 o1)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 327)
             (jrst 322)
(label 327)  (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o2 (constant 33))
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 333)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 334)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 334)
(label 333)  (jrst 331)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (movem o1 -8 q)
             (move o2 (constant 5))
             (move o1 -8 q)
             (call > 2)
             (jumpn o1 336)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 336)
(label 331)  (jrst 330)
             (move o2 (special 34))
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 330)  (move o6 -10 q)
             (movem o6 -9 q)
             (move o1 -10 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -30 q)
             (call logior 2)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -9 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (skipn nil -27 q)
             (jrst 338)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (jumpn o1 341)
             (call flavors::alloc-tiny-stack 0)
             (movem o1 -8 q)
             (move o2 -8 q)
             (move o1 -27 q)
             (call vector-push-extend 2)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o3 -6 q)
             (move o1 -7 q)
             (move o2 (constant 59))
             (call lisp::%sp-svset 3)
             (jrst 340)
(label 341)  (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (move o2 o1)
             (move o1 -27 q)
             (call vector-push-extend 2)
(label 340)
(label 338)  (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (call flavors::flavor-dependents 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
(label 348)  (move o1 -10 q)
             (call atom 1)
             (jumpe o1 349)
             (jrst 344)
(label 349)  (move o2 -12 q)
             (move o1 -9 q)
             (call position 2)
             (jumpn o1 352)
             (move o2 -12 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 352)  (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (jrst 348)
(label 344)  (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -11 q)
             (jrst 326)
(label 322)
(label 289)  (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -30 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -20 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 46))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -28 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 48))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -19 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 60))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -18 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 33))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -14 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 61))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -17 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 44))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -16 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 47))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 -15 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 45))
             (call lisp::%sp-svset 3)
             (move o6 (constant 30))
             (movem o6 -11 q)
             (move o6 -36 q)
             (movem o6 -10 q)
             (move o6 (constant 4))
             (movem o6 -9 q)
             (skipn nil -9 q)
             (jrst 355)
             (move o6 (constant 29))
             (movem o6 -7 q)
             (jrst 356)
(label 355)  (move o6 (constant 5))
             (movem o6 -7 q)
(label 356)  (move o2 -11 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call dpb 3)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
             (move o1 (special 36))
             (call length 1)
             (movem o1 -10 q)
             (move o2 (constant 5))
             (move o1 -10 q)
             (call > 2)
             (jumpe o1 358)
             (move o1 (special 36))
             (call vector-pop 1)
             (movem o1 -10 q)
             (move o2 (constant 5))
             (move o1 -10 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -10 q)
             (movem o6 -11 q)
             (jrst 357)
(label 358)  (move o5 (constant 5))
             (move o1 (constant 37))
             (move o2 (constant 38))
             (move o3 (constant 4))
             (move o4 (constant 39))
             (call make-array 5)
             (movem o1 -11 q)
(label 357)  (icall cunwind)
             (jrst 361)
             (jrst 362)
             (move o2 -11 q)
             (move o1 -12 q)
             (call flavors::order-flavors 2)
             (move o6 (constant 5))
             (movem o6 -10 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -9 q)
(label 367)  (move o2 -9 q)
             (move o1 -10 q)
             (call < 2)
             (jumpn o1 368)
             (jrst 363)
(label 368)  (move o2 -10 q)
             (move o1 -11 q)
             (call aref 2)
             (call flavors:cleanup-flavor 1)
             (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -10 q)
             (jrst 367)
(label 363)  (popj p)
(label 361)  (move o2 (constant 5))
             (move o1 -11 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -11 q)
             (move o2 nil)
             (move o3 (constant 40))
             (call fill 4)
             (move o2 (special 36))
             (move o1 -11 q)
             (call vector-push-extend 2)
             (popj p)
(label 362)  (popj p)
(label 287)  (move o2 (constant 5))
             (move o1 -12 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -12 q)
             (move o2 nil)
             (move o3 (constant 40))
             (call fill 4)
             (move o2 (special 36))
             (move o1 -12 q)
             (call vector-push-extend 2)
             (popj p)
(label 288)  (jrst 279)
(label 280)  (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -30 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 35))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -20 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 46))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -28 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 48))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -19 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 60))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -18 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 33))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -14 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 61))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -17 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 44))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -16 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 47))
             (call lisp::%sp-svset 3)
             (move o6 -36 q)
             (movem o6 -12 q)
             (move o6 -15 q)
             (movem o6 -11 q)
             (move o3 -11 q)
             (move o1 -12 q)
             (move o2 (constant 45))
             (call lisp::%sp-svset 3)
             (move o6 (constant 30))
             (movem o6 -12 q)
             (move o6 -36 q)
             (movem o6 -11 q)
             (move o6 (constant 4))
             (movem o6 -10 q)
             (skipn nil -10 q)
             (jrst 371)
             (move o6 (constant 29))
             (movem o6 -8 q)
             (jrst 372)
(label 371)  (move o6 (constant 5))
             (movem o6 -8 q)
(label 372)  (move o2 -12 q)
             (move o1 (constant 29))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -8 q)
             (move o2 -7 q)
             (call dpb 3)
             (movem o1 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 (constant 42))
             (call lisp::%sp-svset 3)
(label 279)  (move o1 -36 q)
             (call flavors::flavor-name 1)
             (movem o1 -12 q)
             (move o2 (special 32))
             (move o1 -12 q)
             (call adjoin 2)
             (movem o1 (special 32))
             (move o1 -36 q)
             (call flavors::flavor-name 1)
             (movem o1 -12 q)
             (move o2 (special 2))
             (move o1 -12 q)
             (call delete 2)
             (adjsp q -41)
             (popj p)
)

(%put (quote %defflavor) (quote lisp::%args-documentation) (quote (flavor-name ivs components options))) 
(%put (quote %defflavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote *cleanup-enable*) (quote lisp::globally-special) t) 
(or (boundp (quote *cleanup-enable*)) (setq *cleanup-enable* t)) 
(%put (quote *cleanup-enable*) (quote lisp::%var-documentation) (quote "If nil, cleanup is suppressed.")) 
(quote *cleanup-enable*) 
(%put (quote without-cleaning-flavors) (quote lisp::%fun-documentation) (quote "Suppresses heavy flavors calculation inside the body.  Useful when
  defining a series of wrappers or something, especially if you have
  *flavor-compile-methods* set to T.")) 

#_(lap #0_without-cleaning-flavors macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(progn let ((*cleanup-enable* nil)) ((setq *cleanup-enable* nil)))
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call list* 3)
             (movem o1 -3 q)
             (move o3 (constant 3))
             (move o1 (constant 0))
             (move o2 -3 q)
             (call list* 3)
             (adjsp q -7)
             (popj p)
)

(%put (quote without-cleaning-flavors) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote without-cleaning-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote *flavors-compile*) (quote lisp::globally-special) t) 
(or (boundp (quote *flavors-compile*)) (setq *flavors-compile* nil)) 
(quote *flavors-compile*) 
(%put (quote *dont-do-methods*) (quote lisp::globally-special) t) 
(or (boundp (quote *dont-do-methods*)) (setq *dont-do-methods* nil)) 
(quote *dont-do-methods*) 
(%put (quote *uninstantiable*) (quote lisp::globally-special) t) 
(or (boundp (quote *uninstantiable*)) (setq *uninstantiable* nil)) 
(quote *uninstantiable*) 
(%put (quote *inheritablep*) (quote lisp::globally-special) t) 
(or (boundp (quote *inheritablep*)) (setq *inheritablep* nil)) 
(quote *inheritablep*) 
(%put (quote *remap*) (quote lisp::globally-special) t) 
(or (boundp (quote *remap*)) (setq *remap* nil)) 
(quote *remap*) 
(%put (quote *definer*) (quote lisp::globally-special) t) 
(or (boundp (quote *definer*)) (setq *definer* nil)) 
(quote *definer*) 
(%put (quote *set-handlers*) (quote lisp::globally-special) t) 
(or (boundp (quote *set-handlers*)) (setq *set-handlers* nil)) 
(quote *set-handlers*) 
(%put (quote *methods*) (quote lisp::globally-special) t) 
(or (boundp (quote *methods*)) (setq *methods* nil)) 
(quote *methods*) 
(%put (quote *description*) (quote lisp::globally-special) t) 
(or (boundp (quote *description*)) (setq *description* nil)) 
(quote *description*) 
(%put (quote *called-methods*) (quote lisp::globally-special) t) 
(or (boundp (quote *called-methods*)) (setq *called-methods* nil)) 
(quote *called-methods*) 
(%put (quote *message*) (quote lisp::globally-special) t) 
(or (boundp (quote *message*)) (setq *message* nil)) 
(quote *message*) 

#_(lap #0_dissociate-instances expr
       (entry-points (2-few 2-few 2 3 4 5 6) rest)
       #0_(1 4 t 0 19 *error-output* "Instances of flavor ~S temporarily dissociated:~%" format *flavors-compile* "Could not instantiated flavor ~S:~%")
       (code-start)
(label 2)    (move o3 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest3)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest4)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest5)
             (jrst 1)
(label 6)    (movei w2 2)
             (icall restx)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (movem o2 -9 q)
             (movem o3 -8 q)
             (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -10 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 12)
             (move o1 -10 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 13)
             (move o1 -10 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 13)
(label 12)   (jrst 10)
             (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -10 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (skipn nil o1)
(label 10)   (jrst 9)
             (move o6 (constant 1))
             (movem o6 -7 q)
             (move o6 -10 q)
             (movem o6 -6 q)
             (move o6 (constant 2))
             (movem o6 -5 q)
             (skipn nil -5 q)
             (jrst 15)
             (move o6 (constant 0))
             (movem o6 -3 q)
             (jrst 16)
(label 15)   (move o6 (constant 3))
             (movem o6 -3 q)
(label 16)   (move o2 -7 q)
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -2 q)
             (move o1 -6 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -3 q)
             (move o2 -2 q)
             (call dpb 3)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (move o6 (special 5))
             (movem o6 -7 q)
             (move o1 -10 q)
             (call flavors::flavor-name 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 (constant 6))
             (call format 3)
             (move o6 (special 5))
             (movem o6 -6 q)
             (move o4 -8 q)
             (move o1 (constant 7))
             (move o2 -6 q)
             (move o3 -9 q)
             (call apply 4)
             (move o1 -10 q)
             (call flavors::flavor-descriptor 1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call flavor-internals:freeze-instances 1)
             (jrst 8)
(label 9)    (skipn nil (special 8))
             (jrst 17)
             (move o6 (special 5))
             (movem o6 -7 q)
             (move o2 (constant 9))
             (move o1 -7 q)
             (call format 2)
             (move o6 (special 5))
             (movem o6 -6 q)
             (move o4 -8 q)
             (move o1 (constant 7))
             (move o2 -6 q)
             (move o3 -9 q)
             (call apply 4)
             (jrst 8)
(label 17)   (move o1 nil)
             (movei n 1)
(label 8)    (adjsp q -11)
             (popj p)
)

(%put (quote dissociate-instances) (quote lisp::%args-documentation) (quote (flavor why &rest why-args))) 
(%put (quote dissociate-instances) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_descriptor-set-handlers expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(0 5 compiler::delkey compiler::nilkey)
       (code-start)
(label 1)    (adjsp q 17)
             (movem o1 -16 q)
             (movem o2 -15 q)
             (movem o3 -14 q)
             (movem o4 -13 q)
             (skipn nil -16 q)
             (jrst 4)
             (move o6 (constant 0))
             (movem o6 -12 q)
             (move o1 -15 q)
             (call length 1)
             (movem o1 -11 q)
(label 9)    (move o2 -11 q)
             (move o1 -12 q)
             (call < 2)
             (jumpn o1 10)
             (jrst 5)
(label 10)   (move o2 -12 q)
             (move o1 -14 q)
             (call aref 2)
             (jumpe o1 13)
             (move o2 -12 q)
             (move o1 -15 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o2 -12 q)
             (move o1 -14 q)
             (call aref 2)
             (move o3 o1)
             (move o1 -10 q)
             (move o2 -16 q)
             (call flavor-internals:handle-message 3)
             (jrst 12)
(label 13)   (move o2 -12 q)
             (move o1 -15 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o2 -16 q)
             (move o1 -10 q)
             (call flavor-internals:unhandle-message 2)
(label 12)   (move o1 -12 q)
             (call 1+ 1)
             (movem o1 -12 q)
             (jrst 9)
(label 5)    (skipn nil -13 q)
             (jrst 17)
             (move o1 -16 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -12 q)
             (skipn nil -12 q)
             (jrst 20)
             (move o6 -12 q)
             (movem o6 -11 q)
             (move o2 (constant 0))
             (move o1 -11 q)
             (call lisp::%sp-svref 2)
             (movem o1 -10 q)
             (move o2 (constant 1))
             (move o1 -11 q)
             (call lisp::%sp-svref 2)
             (movem o1 -9 q)
             (movem nil -8 q)
             (move o6 (constant 0))
             (movem o6 -7 q)
             (move o6 -10 q)
             (movem o6 -6 q)
(label 25)   (move o2 -10 q)
             (move o1 -7 q)
             (call eq 2)
             (jumpe o1 26)
             (move o1 nil)
             (movei n 1)
             (jrst 21)
(label 26)   (move o2 -7 q)
             (move o1 -9 q)
             (call lisp::%sp-svref 2)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 30)
             (move o2 (special 2))
             (move o1 -8 q)
             (call eq 2)
             (skipe nil o1)
(label 30)   (jrst 29)
             (move o2 (special 3))
             (move o1 -8 q)
             (call eq 2)
             (jumpe o1 31)
             (movem nil -8 q)
(label 31)   (move o6 -8 q)
             (movem o6 -5 q)
             (move o2 -6 q)
             (move o1 -9 q)
             (call lisp::%sp-svref 2)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call flavor-internals::entry-function 1)
             (call symbol-value 1)
             (call flavor-internals::method-fn-name 1)
             (movem o1 -3 q)
             (move o2 -15 q)
             (move o1 -5 q)
             (call find 2)
             (jumpn o1 34)
             (move o2 -16 q)
             (move o1 -5 q)
             (call flavor-internals:unhandle-message 2)
(label 34)
(label 29)   (move o1 -7 q)
             (call 1+ 1)
             (movem o1 -5 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -4 q)
             (move o6 -5 q)
             (movem o6 -7 q)
             (move o6 -4 q)
             (movem o6 -6 q)
             (jrst 25)
(label 21)   (jrst 19)
(label 20)   (move o1 nil)
             (movei n 1)
(label 19)   (jrst 16)
(label 17)   (move o1 nil)
             (movei n 1)
(label 16)   (jrst 3)
(label 4)    (move o1 nil)
             (movei n 1)
(label 3)    (adjsp q -17)
             (popj p)
)

(%put (quote descriptor-set-handlers) (quote lisp::%args-documentation) (quote (descriptor names fn-stack all-p))) 
(%put (quote descriptor-set-handlers) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_flavor-set-handlers-internal-17 expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(internal-init)
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call system:send 2)
             (adjsp q -4)
             (popj p)
)


#_(lap #0_flavor-set-handlers expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(1 4 t default-handler 12 0 5 compiler::delkey compiler::nilkey flavor-set-handlers-internal-17 19 *error-output* "Instances of flavor ~S reunited with the flavor.")
       (code-start)
(label 1)    (adjsp q 22)
             (movem o1 -21 q)
             (movem o2 -20 q)
             (movem o3 -19 q)
             (movem o4 -18 q)
             (move o1 -21 q)
             (call flavors::flavor-descriptor 1)
             (movem o1 -17 q)
             (move o1 -21 q)
             (call flavors::flavor-instance-env 1)
             (movem o1 -16 q)
             (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -14 q)
             (move o1 -21 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -14 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 2))
             (movem o1 -15 q)
             (skipe nil -17 q)
             (jrst 4)
             (move o1 -21 q)
             (call flavors::flavor-name 1)
             (movem o1 -13 q)
             (move o3 (constant 3))
             (move o1 -13 q)
             (move o2 -16 q)
             (call flavor-internals:make-instance-descriptor 3)
             (movem o1 -14 q)
             (move o4 -18 q)
             (move o1 -14 q)
             (move o2 -20 q)
             (move o3 -19 q)
             (call flavors::descriptor-set-handlers 4)
             (move o6 -21 q)
             (movem o6 -13 q)
             (move o6 -14 q)
             (movem o6 -12 q)
             (move o3 -12 q)
             (move o1 -13 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (jrst 3)
(label 4)    (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -14 q)
             (move o1 -21 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -14 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 9)
             (move o1 -21 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 10)
             (move o1 -21 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 10)
(label 9)    (jrst1 7)
             (move o1 -16 q)
             (call flavors::instance-env-vector 1)
             (movem o1 -14 q)
             (move o1 -17 q)
             (call flavor-internals:instance-descriptor-env 1)
             (call flavors::instance-env-vector 1)
             (move o2 o1)
             (move o1 -14 q)
             (call equalp 2)
             (skipn nil o1)
(label 7)    (jrst1 6)
             (skipn nil -15 q)
(label 6)    (jrst 5)
             (move o1 -21 q)
             (call flavors::flavor-name 1)
             (movem o1 -13 q)
             (move o3 (constant 3))
             (move o1 -13 q)
             (move o2 -16 q)
             (call flavor-internals:make-instance-descriptor 3)
             (movem o1 -14 q)
             (move o1 -17 q)
             (call flavor-internals::instance-descriptor-table 1)
             (movem o1 -13 q)
             (skipn nil -13 q)
             (jrst 14)
             (move o6 -13 q)
             (movem o6 -12 q)
             (move o2 (constant 5))
             (move o1 -12 q)
             (call lisp::%sp-svref 2)
             (movem o1 -11 q)
             (move o2 (constant 6))
             (move o1 -12 q)
             (call lisp::%sp-svref 2)
             (movem o1 -10 q)
             (movem nil -9 q)
             (move o6 (constant 5))
             (movem o6 -8 q)
             (move o6 -11 q)
             (movem o6 -7 q)
(label 19)   (move o2 -11 q)
             (move o1 -8 q)
             (call eq 2)
             (jumpe o1 20)
             (jrst 15)
(label 20)   (move o2 -8 q)
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -9 q)
             (skipn nil -9 q)
             (jrst 24)
             (move o2 (special 7))
             (move o1 -9 q)
             (call eq 2)
             (skipe nil o1)
(label 24)   (jrst 23)
             (move o2 (special 8))
             (move o1 -9 q)
             (call eq 2)
             (jumpe o1 25)
             (movem nil -9 q)
(label 25)   (move o6 -9 q)
             (movem o6 -6 q)
             (move o2 -7 q)
             (move o1 -10 q)
             (call lisp::%sp-svref 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call flavor-internals::entry-function 1)
             (call symbol-value 1)
             (call flavor-internals::method-fn-name 1)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -14 q)
             (call flavor-internals:handle-message 3)
(label 23)   (move o1 -8 q)
             (call 1+ 1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (call 1+ 1)
             (movem o1 -5 q)
             (move o6 -6 q)
             (movem o6 -8 q)
             (move o6 -5 q)
             (movem o6 -7 q)
             (jrst 19)
(label 15)
(label 14)   (move o4 -18 q)
             (move o1 -14 q)
             (move o2 -20 q)
             (move o3 -19 q)
             (call flavors::descriptor-set-handlers 4)
             (move o3 (constant 9))
             (move o1 -17 q)
             (move o2 -14 q)
             (call flavor-internals:resize-instances 3)
             (move o6 -21 q)
             (movem o6 -13 q)
             (move o6 -14 q)
             (movem o6 -12 q)
             (move o3 -12 q)
             (move o1 -13 q)
             (move o2 (constant 4))
             (call lisp::%sp-svset 3)
             (move o6 (constant 1))
             (movem o6 -13 q)
             (move o6 -21 q)
             (movem o6 -12 q)
             (movem nil -11 q)
             (skipn nil -11 q)
             (jrst 29)
             (move o6 (constant 0))
             (movem o6 -9 q)
             (jrst 30)
(label 29)   (move o6 (constant 5))
             (movem o6 -9 q)
(label 30)   (move o2 -13 q)
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -12 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o3 -10 q)
             (move o1 -12 q)
             (move o2 (constant 10))
             (call lisp::%sp-svset 3)
             (skipn nil -15 q)
             (jrst 32)
             (move o6 (special 11))
             (movem o6 -14 q)
             (move o1 -21 q)
             (call flavors::flavor-name 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 (constant 12))
             (call format 3)
             (jrst 31)
(label 32)   (move o1 nil)
             (movei n 1)
(label 31)   (jrst 3)
(label 5)    (move o1 -21 q)
             (call flavors::flavor-descriptor 1)
             (movem o1 -14 q)
             (move o4 -18 q)
             (move o1 -14 q)
             (move o2 -20 q)
             (move o3 -19 q)
             (call flavors::descriptor-set-handlers 4)
(label 3)    (adjsp q -22)
             (popj p)
)

(%put (quote flavor-set-handlers) (quote lisp::%args-documentation) (quote (flavor names fns all-p))) 
(%put (quote flavor-set-handlers) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote *undefined-components*) (quote lisp::globally-special) t) 
(or (boundp (quote *undefined-components*)) (setq *undefined-components* (function (lambda (f c) (error "Flavor ~S has undefined components - ~S." f c))))) 
(quote *undefined-components*) 

#_(lap #0_flavor-all-components expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1 0 *undefined-components* 21 2046 18)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o2 (constant 1))
             (move o1 (constant 0))
             (call cons 2)
             (movem o1 -5 q)
             (move o1 -6 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -5 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 5)
             (move o1 -6 q)
             (call flavors::flavor-all-components+ 1)
             (skipe nil o1)
(label 5)    (jrst 4)
             (move o6 -6 q)
             (movem o6 -5 q)
             (move o2 (special 2))
             (move o1 -6 q)
             (call flavors::calculate-all-components 2)
             (movem o1 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 3))
             (call lisp::%sp-svset 3)
             (move o6 -6 q)
             (movem o6 -5 q)
             (move o6 (constant 4))
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -5 q)
             (move o2 (constant 5))
             (call lisp::%sp-svset 3)
(label 4)    (move o1 -6 q)
             (call flavors::flavor-all-components+ 1)
             (adjsp q -7)
             (popj p)
)

(%put (quote flavor-all-components) (quote lisp::%args-documentation) (quote (flavor))) 
(%put (quote flavor-all-components) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_internal-cleanup-flavor-internal-20 auxiliary
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(progn setf get quote ((quote description)) internal-define-method (&rest %combined-args) method-add *message* :combined flavor-methods get-flavor)
       (code-start)
(label 1)    (adjsp q 16)
             (movem o1 -15 q)
             (movem o2 -14 q)
             (movem o3 -13 q)
             (movem o4 -12 q)
             (move o2 -15 q)
             (move o1 (constant 3))
             (call list 2)
             (movem o1 -8 q)
             (move o3 (constant 4))
             (move o1 (constant 2))
             (move o2 -8 q)
             (call list* 3)
             (movem o1 -9 q)
             (move o1 -13 q)
             (call copy-seq 1)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 -9 q)
             (call list 3)
             (movem o1 -10 q)
             (move o1 -14 q)
             (call flavors::flavor-instance-env 1)
             (movem o1 -7 q)
             (move o1 -12 q)
             (call list 1)
             (move o5 o1)
             (move o1 (constant 5))
             (move o2 -15 q)
             (move o3 -7 q)
             (move o4 (constant 6))
             (call list 5)
             (movem o1 -9 q)
             (move o2 (special 8))
             (move o1 (constant 3))
             (call list 2)
             (movem o1 -7 q)
             (move o2 -15 q)
             (move o1 (constant 3))
             (call list 2)
             (movem o1 -5 q)
             (move o1 -14 q)
             (call flavors::flavor-name 1)
             (move o2 o1)
             (move o1 (constant 3))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 11))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 10))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 7))
             (move o2 -7 q)
             (move o3 (constant 9))
             (move o4 -5 q)
             (call list 5)
             (move o4 o1)
             (move o1 (constant 0))
             (move o2 -10 q)
             (move o3 -9 q)
             (call list 4)
             (adjsp q -16)
             (popj p)
)


#_(lap #0_internal-cleanup-flavor-internal-21 expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 4)
             (movem o1 -3 q)
             (move o2 (special 21))
             (move o1 -3 q)
             (call find 2)
             (adjsp q -4)
             (popj p)
)


#_(lap #0_internal-cleanup-flavor expr
       (entry-points (2-few 1 2 2-many 2-many 2-many 2-many))
       #0_(*cleanup-enable* *flavors-compile* 1 2 3 2046 18 *uninstantiable* "Additional required flavors: ~S." 0 t 4 22 "Required instance variables ~S." dont-do-methods *dont-do-methods* %stacks% 1000 :adjustable :fill-pointer *description* *called-methods* 5 :combined :key car :test-not eq *methods* *message* "Method combination conflict for method ~S." *default-combination* ordering "No such combination: ~S." description internal-cleanup-flavor-internal-21 *inheritablep* :redefine string "-" :upcase *print-case* mixer method-apply *definer* 6 "Additonal required methods: ~S." *set-handlers* :end 23 *changed-method-stacks* 19 10 "KEYWORD" 16 7 8 9 foo 13 15 14)
       (code-start)
(label 1)    (move o2 (special 0))
(label 2)    (adjsp q 22)
             (movem o1 -20 q)
             (movem o2 -19 q)
             (movem nil -21 q)
             (spec-bind (special 1))
             (skipe nil -19 q)
             (jrst 5)
             (move o1 nil)
             (movei n 1)
             (jrst 3)
(label 5)    (skipn nil (special 1))
             (jrst 7)
             (move o2 (constant 3))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 11)
             (move o2 (constant 4))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (skipe nil o1)
(label 11)   (jrst 9)
             (movem nil (special 1))
             (jrst 10)
(label 9)    (move o6 -20 q)
             (movem o6 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 (constant 5))
             (call logior 2)
             (movem o1 -17 q)
             (move o3 -17 q)
             (move o1 -18 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 10)   (jrst 8)
(label 7)    (move o2 (constant 3))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn1 o1 15)
             (move o2 (constant 4))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (skipn nil o1)
(label 15)   (jrst 14)
             (move o1 nil)
             (movei n 1)
             (jrst 3)
(label 14)
(label 8)    (move o1 -20 q)
             (call flavors::flavor-all-components 1)
             (movem o1 -21 q)
             (move o2 (constant 2))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 19)
             (move o2 (constant 2))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 20)
             (move o6 -21 q)
             (movem o6 -18 q)
             (move o1 -18 q)
             (move o1 0 o1)
             (movem o1 -17 q)
(label 27)   (move o1 -18 q)
             (call atom 1)
             (jumpe o1 28)
             (jrst 23)
(label 28)   (movem nil -16 q)
             (move o1 -17 q)
             (call flavors::flavor-required-flavors 1)
             (movem o1 -15 q)
             (move o1 -15 q)
             (move o1 0 o1)
             (movem o1 -14 q)
(label 34)   (move o1 -15 q)
             (call atom 1)
             (jumpe o1 35)
             (jrst 30)
(label 35)   (move o2 -21 q)
             (move o1 -14 q)
             (call member 2)
             (jumpn o1 38)
             (move o2 -16 q)
             (move o1 -14 q)
             (call cons 2)
             (movem o1 -16 q)
(label 38)   (move o1 -15 q)
             (move o1 1 o1)
             (movem o1 -15 q)
             (move o1 -15 q)
             (move o1 0 o1)
             (movem o1 -14 q)
             (jrst 34)
(label 30)   (skipn nil -16 q)
             (jrst 41)
             (move o6 (special 7))
             (movem o6 -15 q)
             (move o4 -16 q)
             (move o1 -15 q)
             (move o2 -20 q)
             (move o3 (constant 8))
             (call funcall 4)
(label 41)   (move o1 -18 q)
             (move o1 1 o1)
             (movem o1 -18 q)
             (move o1 -18 q)
             (move o1 0 o1)
             (movem o1 -17 q)
             (jrst 27)
(label 23)
(label 20)   (move o6 (constant 2))
             (movem o6 -18 q)
             (move o6 -20 q)
             (movem o6 -17 q)
             (movem nil -16 q)
             (skipn nil -16 q)
             (jrst 44)
             (move o6 (constant 2))
             (movem o6 -14 q)
             (jrst 45)
(label 44)   (move o6 (constant 9))
             (movem o6 -14 q)
(label 45)   (move o2 -18 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (call dpb 3)
             (movem o1 -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 19)   (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (movem o1 -18 q)
             (move o2 (constant 4))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -17 q)
             (move o2 -18 q)
             (move o1 -17 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (jumpn o1 49)
             (move o2 (constant 3))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -17 q)
             (move o2 -18 q)
             (move o1 -17 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (jumpn o1 49)
             (move o2 (constant 11))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -17 q)
             (move o2 -18 q)
             (move o1 -17 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
(label 49)   (jumpe o1 48)
             (move o6 -20 q)
             (movem o6 -17 q)
             (move o1 -20 q)
             (call flavors::calculate-instance-env 1)
             (movem o1 -16 q)
             (move o3 -16 q)
             (move o1 -17 q)
             (move o2 (constant 12))
             (call lisp::%sp-svset 3)
             (movem o1 -18 q)
             (move o1 -18 q)
             (call flavors::instance-env-required 1)
             (jumpe o1 51)
             (move o2 (constant 2))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -17 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -17 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 53)
             (move o6 (special 7))
             (movem o6 -17 q)
             (move o1 -18 q)
             (call flavors::instance-env-required 1)
             (move o4 o1)
             (move o1 -17 q)
             (move o2 -20 q)
             (move o3 (constant 13))
             (call funcall 4)
(label 53)
(label 51)   (move o6 (constant 3))
             (movem o6 -17 q)
             (move o6 -20 q)
             (movem o6 -16 q)
             (movem nil -15 q)
             (skipn nil -15 q)
             (jrst 56)
             (move o6 (constant 2))
             (movem o6 -13 q)
             (jrst 57)
(label 56)   (move o6 (constant 9))
             (movem o6 -13 q)
(label 57)   (move o2 -17 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -16 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -13 q)
             (move o2 -12 q)
             (call dpb 3)
             (movem o1 -14 q)
             (move o3 -14 q)
             (move o1 -16 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 48)   (move o6 (constant 4))
             (movem o6 -18 q)
             (move o6 -20 q)
             (movem o6 -17 q)
             (movem nil -16 q)
             (skipn nil -16 q)
             (jrst 59)
             (move o6 (constant 2))
             (movem o6 -14 q)
             (jrst 60)
(label 59)   (move o6 (constant 9))
             (movem o6 -14 q)
(label 60)   (move o2 -18 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (call dpb 3)
             (movem o1 -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o6 (constant 11))
             (movem o6 -18 q)
             (move o6 -20 q)
             (movem o6 -17 q)
             (movem nil -16 q)
             (skipn nil -16 q)
             (jrst 61)
             (move o6 (constant 2))
             (movem o6 -14 q)
             (jrst 62)
(label 61)   (move o6 (constant 9))
             (movem o6 -14 q)
(label 62)   (move o2 -18 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (call dpb 3)
             (movem o1 -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o1 (constant 14))
             (icall ccatch)
             (jrst 63)
             (skipn nil (special 15))
             (jrst 64)
             (move o1 (constant 14))
             (icall cthrow)
             (move o1 nil)
             (movei n 1)
             (popj p)
(label 64)   (move o1 (special 16))
             (call length 1)
             (movem o1 -17 q)
             (move o2 (constant 9))
             (move o1 -17 q)
             (call > 2)
             (jumpe o1 67)
             (move o1 (special 16))
             (call vector-pop 1)
             (movem o1 -17 q)
             (move o2 (constant 9))
             (move o1 -17 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -17 q)
             (movem o6 -18 q)
             (jrst 66)
(label 67)   (move o5 (constant 9))
             (move o1 (constant 17))
             (move o2 (constant 18))
             (move o3 (constant 10))
             (move o4 (constant 19))
             (call make-array 5)
             (movem o1 -18 q)
(label 66)   (move o1 (special 16))
             (call length 1)
             (movem o1 -16 q)
             (move o2 (constant 9))
             (move o1 -16 q)
             (call > 2)
             (jumpe o1 71)
             (move o1 (special 16))
             (call vector-pop 1)
             (movem o1 -16 q)
             (move o2 (constant 9))
             (move o1 -16 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -16 q)
             (movem o6 -17 q)
             (jrst 70)
(label 71)   (move o5 (constant 9))
             (move o1 (constant 17))
             (move o2 (constant 18))
             (move o3 (constant 10))
             (move o4 (constant 19))
             (call make-array 5)
             (movem o1 -17 q)
(label 70)   (move o1 (special 16))
             (call length 1)
             (movem o1 -15 q)
             (move o2 (constant 9))
             (move o1 -15 q)
             (call > 2)
             (jumpe o1 75)
             (move o1 (special 16))
             (call vector-pop 1)
             (movem o1 -15 q)
             (move o2 (constant 9))
             (move o1 -15 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -15 q)
             (movem o6 -16 q)
             (jrst 74)
(label 75)   (move o5 (constant 9))
             (move o1 (constant 17))
             (move o2 (constant 18))
             (move o3 (constant 10))
             (move o4 (constant 19))
             (call make-array 5)
             (movem o1 -16 q)
(label 74)   (move o1 (special 16))
             (call length 1)
             (movem o1 -14 q)
             (move o2 (constant 9))
             (move o1 -14 q)
             (call > 2)
             (jumpe o1 79)
             (move o1 (special 16))
             (call vector-pop 1)
             (movem o1 -14 q)
             (move o2 (constant 9))
             (move o1 -14 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -14 q)
             (movem o6 -15 q)
             (jrst 78)
(label 79)   (move o5 (constant 9))
             (move o1 (constant 17))
             (move o2 (constant 18))
             (move o3 (constant 10))
             (move o4 (constant 19))
             (call make-array 5)
             (movem o1 -15 q)
(label 78)   (move o1 (special 16))
             (call length 1)
             (movem o1 -13 q)
             (move o2 (constant 9))
             (move o1 -13 q)
             (call > 2)
             (jumpe o1 83)
             (move o1 (special 16))
             (call vector-pop 1)
             (movem o1 -13 q)
             (move o2 (constant 9))
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -13 q)
             (movem o6 -14 q)
             (jrst 82)
(label 83)   (move o5 (constant 9))
             (move o1 (constant 17))
             (move o2 (constant 18))
             (move o3 (constant 10))
             (move o4 (constant 19))
             (call make-array 5)
             (movem o1 -14 q)
(label 82)   (move o1 -15 q)
             (spec-bind (special 20))
             (movem o1 (special 20))
             (move o1 -14 q)
             (spec-bind (special 21))
             (movem o1 (special 21))
             (icall cunwind)
             (jrst 86)
             (jrst 87)
             (move o2 (constant 22))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -13 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 89)
             (move o6 -21 q)
             (movem o6 -13 q)
             (move o1 -13 q)
             (move o1 0 o1)
             (movem o1 -12 q)
(label 94)   (move o1 -13 q)
             (call atom 1)
             (jumpe o1 95)
             (jrst 90)
(label 95)   (move o1 -12 q)
             (call flavors::flavor-methods 1)
             (movem o1 -11 q)
             (move o6 -11 q)
             (movem o6 -10 q)
             (move o1 -10 q)
             (call flavors::method-structure-methods 1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (call flavors::method-structure-types 1)
             (movem o1 -8 q)
(label 101)  (skipe nil -9 q)
             (jrst 102)
             (jrst 97)
(label 102)  (move o1 -8 q)
             (move o1 0 o1)
             (jumpe o1 105)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -18 q)
             (move o1 -7 q)
             (call find 2)
             (jumpn o1 107)
             (move o6 (constant 23))
             (movem o6 -6 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o6 (constant 24))
             (movem o6 -4 q)
             (move o6 (constant 25))
             (movem o6 -3 q)
             (move o6 (constant 26))
             (movem o6 -2 q)
             (push q (constant 27))
             (move o1 -7 q)
             (move o2 -6 q)
             (move o3 -5 q)
             (move o4 -4 q)
             (move o5 -3 q)
             (call find 6)
             (jumpe o1 109)
             (move o2 -18 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 109)
(label 107)
(label 105)  (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o6 -7 q)
             (movem o6 -9 q)
             (move o6 -6 q)
             (movem o6 -8 q)
             (jrst 101)
(label 97)   (move o1 -13 q)
             (move o1 1 o1)
             (movem o1 -13 q)
             (move o1 -13 q)
             (move o1 0 o1)
             (movem o1 -12 q)
             (jrst 94)
(label 90)   (jrst 88)
(label 89)   (move o1 -20 q)
             (call flavors::flavor-changed-methods 1)
             (jumpe o1 113)
             (move o1 -20 q)
             (call flavors::flavor-changed-methods 1)
             (movem o1 -13 q)
             (move o6 (constant 9))
             (movem o6 -12 q)
             (move o1 -13 q)
             (call length 1)
             (movem o1 -11 q)
(label 118)  (move o2 -11 q)
             (move o1 -12 q)
             (call < 2)
             (jumpn o1 119)
             (jrst 114)
(label 119)  (move o2 -12 q)
             (move o1 -13 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call listp 1)
             (jumpe o1 121)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
(label 127)  (move o1 -9 q)
             (call atom 1)
             (jumpe o1 128)
             (jrst 123)
(label 128)  (move o2 -18 q)
             (move o1 -8 q)
             (call find 2)
             (jumpn o1 131)
             (move o2 -18 q)
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 131)  (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (jrst 127)
(label 123)  (jrst 122)
(label 121)  (move o2 -18 q)
             (move o1 -10 q)
             (call find 2)
             (jumpn o1 134)
             (move o2 -18 q)
             (move o1 -10 q)
             (call vector-push-extend 2)
(label 134)
(label 122)  (move o1 -12 q)
             (call 1+ 1)
             (movem o1 -12 q)
             (jrst 118)
(label 114)
(label 113)
(label 88)   (move o6 -17 q)
             (movem o6 -13 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 9))
             (move o1 -13 q)
             (call array-dimension 2)
             (movem o1 -11 q)
             (move o2 -12 q)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 138)
             (move o2 -12 q)
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
             (jrst 137)
(label 138)  (move o2 -12 q)
             (move o1 -13 q)
             (call adjust-array 2)
             (move o2 -12 q)
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
(label 137)  (move o6 -16 q)
             (movem o6 -13 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 9))
             (move o1 -13 q)
             (call array-dimension 2)
             (movem o1 -11 q)
             (move o2 -12 q)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 142)
             (move o2 -12 q)
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
             (jrst 141)
(label 142)  (move o2 -12 q)
             (move o1 -13 q)
             (call adjust-array 2)
             (move o2 -12 q)
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
(label 141)  (movem nil -13 q)
             (move o1 -13 q)
             (spec-bind (special 28))
             (movem o1 (special 28))
             (move o6 -21 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 149)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 150)
             (jrst 145)
(label 150)  (move o6 (constant 9))
             (movem o6 -10 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -9 q)
(label 156)  (move o2 -9 q)
             (move o1 -10 q)
             (call < 2)
             (jumpn o1 157)
             (jrst 152)
(label 157)  (move o2 -10 q)
             (move o1 -18 q)
             (call aref 2)
             (spec-bind (special 29))
             (movem o1 (special 29))
             (move o6 (special 29))
             (movem o6 -7 q)
             (move o1 -11 q)
             (call flavors::flavor-combinations 1)
             (move o2 o1)
             (move o1 -7 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -8 q)
             (movem nil -7 q)
             (skipn nil -8 q)
             (jrst 160)
             (move o2 -10 q)
             (move o1 -17 q)
             (call aref 2)
             (movem o1 -7 q)
             (skipn nil -7 q)
             (jrst 162)
             (move o2 -7 q)
             (move o1 -8 q)
             (call equal 2)
             (jumpn o1 163)
             (move o2 (special 29))
             (move o1 (constant 30))
             (call error 2)
(label 163)  (jrst 161)
(label 162)  (move o3 -8 q)
             (move o1 -17 q)
             (move o2 -10 q)
             (call lisp::%aset 3)
(label 161)
(label 160)  (unbind 1)
             (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -10 q)
             (jrst 156)
(label 152)  (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 149)
(label 145)  (move o6 -21 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 172)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 173)
             (jrst 168)
(label 173)  (move o1 -11 q)
             (call flavors::flavor-methods 1)
             (movem o1 -10 q)
             (move o6 (constant 9))
             (movem o6 -9 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -8 q)
(label 179)  (move o2 -8 q)
             (move o1 -9 q)
             (call < 2)
             (jumpn o1 180)
             (jrst 175)
(label 180)  (move o2 -9 q)
             (move o1 -18 q)
             (call aref 2)
             (spec-bind (special 29))
             (movem o1 (special 29))
             (move o6 (special 29))
             (movem o6 -6 q)
             (move o3 nil)
             (move o1 -6 q)
             (move o2 -10 q)
             (call flavors::%get-method-types 3)
             (move o1 0 o1)
             (movem o1 -7 q)
             (skipn nil -7 q)
             (jrst 183)
             (move o2 -9 q)
             (move o1 -17 q)
             (call aref 2)
             (skipe nil o1)
             (movem o1 -6 q)
             (jumpn o1 184)
             (move o6 (special 31))
             (movem o6 -6 q)
(label 184)  (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o2 (constant 32))
             (move o1 -5 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -5 q)
             (jumpn o1 185)
             (move o2 -5 q)
             (move o1 (constant 33))
             (call error 2)
             (movem o1 -5 q)
(label 185)  (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -4 q)
             (move o3 -7 q)
             (move o1 -5 q)
             (move o2 -4 q)
             (call funcall 3)
(label 183)  (unbind 1)
             (move o1 -9 q)
             (call 1+ 1)
             (movem o1 -9 q)
             (jrst 179)
(label 175)  (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 172)
(label 168)  (move o6 (constant 9))
             (movem o6 -12 q)
             (move o1 -18 q)
             (call length 1)
             (movem o1 -11 q)
(label 191)  (move o2 -11 q)
             (move o1 -12 q)
             (call < 2)
             (jumpn o1 192)
             (jrst 187)
(label 192)  (move o2 -12 q)
             (move o1 -18 q)
             (call aref 2)
             (spec-bind (special 29))
             (movem o1 (special 29))
             (move o2 -12 q)
             (move o1 -17 q)
             (call aref 2)
             (skipe nil o1)
             (movem o1 -10 q)
             (jumpn o1 194)
             (move o6 (special 31))
             (movem o6 -10 q)
(label 194)  (move o6 (special 20))
             (movem o6 -9 q)
             (move o2 (constant 9))
             (move o1 -9 q)
             (call lisp::%set-fill-pointer 2)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o2 (constant 32))
             (move o1 -9 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 195)
             (move o2 -9 q)
             (move o1 (constant 33))
             (call error 2)
             (movem o1 -9 q)
(label 195)  (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o4 (constant 10))
             (move o1 -9 q)
             (move o2 -8 q)
             (move o3 nil)
             (call funcall 4)
             (movem nil -9 q)
             (movem nil -8 q)
             (move o6 -21 q)
             (movem o6 -7 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -6 q)
(label 200)  (move o1 -7 q)
             (call atom 1)
             (jumpe o1 201)
             (jrst 196)
(label 201)  (move o6 (special 29))
             (movem o6 -5 q)
             (move o1 -6 q)
             (call flavors::flavor-methods 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 (constant 23))
             (call flavors::method-find 3)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 205)
             (move o6 (special 20))
             (movem o6 -5 q)
             (move o2 (constant 34))
             (move o1 -8 q)
             (call get 2)
             (move o2 o1)
             (move o1 -5 q)
             (call equalp 2)
             (jumpe o1 205)
             (move o1 -8 q)
             (call flavor-internals:method-called-methods 1)
             (call length 1)
             (movem o1 -5 q)
             (move o1 (special 21))
             (call length 1)
             (move o2 o1)
             (move o1 -5 q)
             (call = 2)
             (jumpe o1 205)
             (move o1 -8 q)
             (call flavor-internals:method-called-methods 1)
             (move o2 o1)
             (move o1 (constant 35))
             (call every 2)
             (jumpe o1 205)
             (move o6 (special 36))
             (movem o6 -5 q)
             (move o3 (special 29))
             (move o1 -5 q)
             (move o2 -6 q)
             (call funcall 3)
             (movem o1 -9 q)
             (jrst 206)
(label 205)  (movem nil -9 q)
(label 206)  (skipn nil -9 q)
             (jrst 204)
             (jrst 196)
(label 204)  (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (jrst 200)
(label 196)  (move o2 (constant 37))
             (move o1 -9 q)
             (call eq 2)
             (jumpn1 o1 210)
             (skipe nil -9 q)
(label 210)  (jrst 209)
             (skipe nil -8 q)
             (jrst 212)
             (move o6 (constant 38))
             (movem o6 -7 q)
             (move o1 -20 q)
             (call flavors::flavor-name 1)
             (call symbol-name 1)
             (movem o1 -6 q)
             (move o6 (constant 39))
             (movem o6 -5 q)
             (move o6 (special 29))
             (movem o6 -4 q)
             (move o1 -4 q)
             (call symbolp 1)
             (jumpe o1 213)
             (move o6 (constant 40))
             (movem o6 -3 q)
             (move o1 -3 q)
             (spec-bind (special 41))
             (movem o1 (special 41))
             (move o1 -4 q)
             (call prin1-to-string 1)
             (movem o1 -4 q)
             (unbind 1)
             (jrst 214)
(label 213)  (move o6 -4 q)
             (movem o6 -4 q)
(label 214)  (move o6 (constant 39))
             (movem o6 -3 q)
             (move o6 (constant 23))
             (movem o6 -2 q)
             (move o1 -2 q)
             (call symbolp 1)
             (jumpe o1 215)
             (move o6 (constant 40))
             (movem o6 -1 q)
             (move o1 -1 q)
             (spec-bind (special 41))
             (movem o1 (special 41))
             (move o1 -2 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 216)
(label 215)  (push q -2 q)
(label 216)  (move o1 -8 q)
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (move o5 -4 q)
             (call concatenate 6)
             (movem o1 -7 q)
             (move o1 -20 q)
             (call flavors::flavor-name 1)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -7 q)
             (call intern 2)
             (movem o1 -8 q)
(label 212)  (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o2 (constant 42))
             (move o1 -6 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -6 q)
             (jumpn o1 218)
             (move o2 -6 q)
             (move o1 (constant 33))
             (call error 2)
             (movem o1 -6 q)
(label 218)  (move o1 -10 q)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -6 q)
             (call funcall 2)
             (movem o1 -7 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o2 (constant 43))
             (move o1 -6 q)
             (call eq 2)
             (jumpe o1 220)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o3 o1)
             (move o1 -16 q)
             (move o2 -12 q)
             (call lisp::%aset 3)
             (jrst 219)
(label 220)  (move o6 (special 44))
             (movem o6 -6 q)
             (move o6 (special 20))
             (movem o6 -2 q)
             (move o4 -7 q)
             (move o1 -8 q)
             (move o2 -20 q)
             (move o3 -2 q)
             (call flavors::internal-cleanup-flavor-internal-20 4)
             (move o3 o1)
             (move o1 -6 q)
             (move o2 -8 q)
             (call funcall 3)
             (move o3 -8 q)
             (move o1 -16 q)
             (move o2 -12 q)
             (call lisp::%aset 3)
(label 219)  (jrst 208)
(label 209)  (move o3 -8 q)
             (move o1 -16 q)
             (move o2 -12 q)
             (call lisp::%aset 3)
(label 208)  (unbind 1)
             (move o1 -12 q)
             (call 1+ 1)
             (movem o1 -12 q)
             (jrst 191)
(label 187)  (unbind 1)
             (move o2 (constant 45))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -13 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 226)
             (move o2 (constant 2))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -13 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 227)
             (movem nil -13 q)
             (move o6 -21 q)
             (movem o6 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
(label 234)  (move o1 -12 q)
             (call atom 1)
             (jumpe o1 235)
             (jrst 230)
(label 235)  (move o1 -11 q)
             (call flavors::flavor-required-methods 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
(label 241)  (move o1 -10 q)
             (call atom 1)
             (jumpe o1 242)
             (jrst 237)
(label 242)  (move o2 -18 q)
             (move o1 -9 q)
             (call position 2)
             (move o2 o1)
             (move o1 -16 q)
             (call aref 2)
             (jumpn o1 246)
             (move o1 -20 q)
             (call flavors::flavor-descriptor 1)
             (jumpe1 o1 247)
             (move o1 -20 q)
             (call flavors::flavor-descriptor 1)
             (move o2 o1)
             (move o1 -9 q)
             (call flavor-internals:get-handler 2)
             (skipe nil o1)
(label 247)
(label 246)  (jrst 245)
             (move o2 -13 q)
             (move o1 -9 q)
             (call cons 2)
             (movem o1 -13 q)
(label 245)  (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (jrst 241)
(label 237)  (move o1 -12 q)
             (move o1 1 o1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (move o1 0 o1)
             (movem o1 -11 q)
             (jrst 234)
(label 230)  (skipn nil -13 q)
             (jrst 251)
             (move o6 (special 7))
             (movem o6 -12 q)
             (move o4 -13 q)
             (move o1 -12 q)
             (move o2 -20 q)
             (move o3 (constant 46))
             (call funcall 4)
(label 251)
(label 227)  (move o6 (constant 45))
             (movem o6 -13 q)
             (move o6 -20 q)
             (movem o6 -12 q)
             (movem nil -11 q)
             (skipn nil -11 q)
             (jrst 254)
             (move o6 (constant 2))
             (movem o6 -9 q)
             (jrst 255)
(label 254)  (move o6 (constant 9))
             (movem o6 -9 q)
(label 255)  (move o2 -13 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -12 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o3 -10 q)
             (move o1 -12 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 226)  (move o2 (constant 2))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -20 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -13 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 258)
             (move o6 (special 47))
             (movem o6 -13 q)
             (move o2 (constant 22))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -9 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -9 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (move o5 o1)
             (move o1 -13 q)
             (move o2 -20 q)
             (move o3 -18 q)
             (move o4 -16 q)
             (call funcall 5)
             (jrst 257)
(label 258)  (move o1 nil)
             (movei n 1)
(label 257)  (popj p)
(label 86)   (move o2 (constant 9))
             (move o1 -18 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -18 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o2 (special 16))
             (move o1 -18 q)
             (call vector-push-extend 2)
             (move o2 (constant 9))
             (move o1 -17 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -17 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o2 (special 16))
             (move o1 -17 q)
             (call vector-push-extend 2)
             (move o2 (constant 9))
             (move o1 -16 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -16 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o2 (special 16))
             (move o1 -16 q)
             (call vector-push-extend 2)
             (move o6 (special 20))
             (movem o6 -13 q)
             (move o6 (special 20))
             (movem o6 -10 q)
             (move o2 (constant 9))
             (move o1 -10 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -13 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o6 (special 20))
             (movem o6 -13 q)
             (move o2 (special 16))
             (move o1 -13 q)
             (call vector-push-extend 2)
             (move o6 (special 21))
             (movem o6 -13 q)
             (move o6 (special 21))
             (movem o6 -10 q)
             (move o2 (constant 9))
             (move o1 -10 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -13 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o6 (special 21))
             (movem o6 -13 q)
             (move o2 (special 16))
             (move o1 -13 q)
             (call vector-push-extend 2)
             (popj p)
(label 87)   (unbind 2)
             (popj p)
(label 63)   (move o6 -20 q)
             (movem o6 -17 q)
             (move o1 -17 q)
             (call flavors::flavor-changed-methods 1)
             (movem o1 -16 q)
             (movem nil -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 49))
             (call lisp::%sp-svset 3)
             (move o6 -16 q)
             (movem o6 -18 q)
             (skipn nil -18 q)
             (jrst 261)
             (move o2 (constant 9))
             (move o1 -18 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -18 q)
             (move o2 nil)
             (move o3 (constant 48))
             (call fill 4)
             (move o2 (special 50))
             (move o1 -18 q)
             (call vector-push-extend 2)
(label 261)  (move o6 (constant 22))
             (movem o6 -18 q)
             (move o6 -20 q)
             (movem o6 -17 q)
             (movem nil -16 q)
             (skipn nil -16 q)
             (jrst 263)
             (move o6 (constant 2))
             (movem o6 -14 q)
             (jrst 264)
(label 263)  (move o6 (constant 9))
             (movem o6 -14 q)
(label 264)  (move o2 -18 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (call dpb 3)
             (movem o1 -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o6 -20 q)
             (movem o6 -18 q)
             (move o6 (constant 10))
             (movem o6 -17 q)
             (move o6 (constant 4))
             (movem o6 -16 q)
             (move o6 -18 q)
             (movem o6 -15 q)
             (move o6 -17 q)
             (movem o6 -14 q)
             (skipn nil -14 q)
             (jrst 265)
             (move o6 (constant 2))
             (movem o6 -12 q)
             (jrst 266)
(label 265)  (move o6 (constant 9))
             (movem o6 -12 q)
(label 266)  (move o2 -16 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -11 q)
             (move o1 -15 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -12 q)
             (move o2 -11 q)
             (call dpb 3)
             (movem o1 -13 q)
             (move o3 -13 q)
             (move o1 -15 q)
             (move o2 (constant 51))
             (call lisp::%sp-svset 3)
             (move o2 (constant 52))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -18 q)
             (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (move o2 o1)
             (move o1 -18 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 268)
             (move o1 -20 q)
             (call flavors::flavor-instance-env 1)
             (movem o1 -18 q)
             (move o1 -18 q)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -17 q)
             (move o1 -18 q)
             (call flavors::method-env-ables 1)
             (movem o1 -16 q)
             (move o1 (constant 53))
             (call find-package 1)
             (movem o1 -15 q)
             (movem nil -14 q)
             (move o6 (constant 9))
             (movem o6 -13 q)
             (move o1 -17 q)
             (call length 1)
             (movem o1 -12 q)
(label 273)  (move o2 -12 q)
             (move o1 -13 q)
             (call < 2)
             (jumpn o1 274)
             (jrst 269)
(label 274)  (move o2 (constant 3))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -11 q)
             (move o2 -13 q)
             (move o1 -16 q)
             (call aref 2)
             (move o2 o1)
             (move o1 -11 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 277)
             (move o2 -13 q)
             (move o1 -17 q)
             (call aref 2)
             (call symbol-name 1)
             (movem o1 -11 q)
             (move o2 -15 q)
             (move o1 -11 q)
             (call intern 2)
             (movem o1 -11 q)
             (move o2 -13 q)
             (move o1 -11 q)
             (call cons 2)
             (movem o1 -11 q)
             (move o2 -14 q)
             (move o1 -11 q)
             (call cons 2)
             (movem o1 -14 q)
(label 277)  (move o1 -13 q)
             (call 1+ 1)
             (movem o1 -13 q)
             (jrst 273)
(label 269)  (move o6 -20 q)
             (movem o6 -13 q)
             (move o6 -14 q)
             (movem o6 -12 q)
             (move o3 -12 q)
             (move o1 -13 q)
             (move o2 (constant 54))
             (call lisp::%sp-svset 3)
             (move o6 (constant 52))
             (movem o6 -18 q)
             (move o6 -20 q)
             (movem o6 -17 q)
             (movem nil -16 q)
             (skipn nil -16 q)
             (jrst 279)
             (move o6 (constant 2))
             (movem o6 -14 q)
             (jrst 280)
(label 279)  (move o6 (constant 9))
             (movem o6 -14 q)
(label 280)  (move o2 -18 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -17 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (call dpb 3)
             (movem o1 -15 q)
             (move o3 -15 q)
             (move o1 -17 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 268)  (move o1 -20 q)
             (call flavors::flavor-changed 1)
             (movem o1 -18 q)
             (move o2 (constant 55))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -16 q)
             (move o2 -18 q)
             (move o1 -16 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (movem o1 -17 q)
             (move o2 (constant 56))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -15 q)
             (move o2 -18 q)
             (move o1 -15 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (movem o1 -16 q)
             (move o2 (constant 57))
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -14 q)
             (move o2 -18 q)
             (move o1 -14 q)
             (call ldb 2)
             (call zerop 1)
             (tdcn o1 o1)
             (move o1 (constant 10))
             (movem o1 -15 q)
             (skipe nil -17 q)
             (jrst1 284)
             (skipe nil -16 q)
             (jrst1 284)
             (skipn nil -15 q)
(label 284)  (jrst 283)
             (movem nil -14 q)
             (movem nil -13 q)
             (movem nil -12 q)
             (move o6 -21 q)
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 289)  (move o1 -11 q)
             (call atom 1)
             (jumpe o1 290)
             (jrst 285)
(label 290)  (skipn nil -17 q)
             (jrst 293)
             (move o1 -10 q)
             (call flavors::flavor-required-inits 1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
(label 298)  (move o1 -9 q)
             (call atom 1)
             (jumpe o1 299)
             (jrst 294)
(label 299)  (move o2 -14 q)
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 -14 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (jrst 298)
(label 294)
(label 293)  (skipn nil -16 q)
             (jrst 303)
             (move o1 -10 q)
             (call flavors::flavor-default-plist 1)
             (movem o1 -9 q)
(label 308)  (move o1 -9 q)
             (move o1 1 o1)
             (call endp 1)
             (jumpe o1 309)
             (jrst 304)
(label 309)  (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o3 (constant 58))
             (move o1 -13 q)
             (move o2 -6 q)
             (call getf 3)
             (move o2 o1)
             (move o1 (constant 58))
             (call eq 2)
             (jumpe o1 312)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 -13 q)
             (move o1 -8 q)
             (call cons 2)
             (movem o1 -13 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 -13 q)
             (move o1 -8 q)
             (call cons 2)
             (movem o1 -13 q)
(label 312)  (move o1 -9 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -9 q)
             (jrst 308)
(label 304)
(label 303)  (skipn nil -15 q)
             (jrst 316)
             (move o1 -10 q)
             (call flavors::flavor-init-keywords 1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
(label 321)  (move o1 -9 q)
             (call atom 1)
             (jumpe o1 322)
             (jrst 317)
(label 322)  (move o2 -12 q)
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 -12 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (jrst 321)
(label 317)
(label 316)  (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 289)
(label 285)  (skipn nil -17 q)
             (jrst 326)
             (move o6 -20 q)
             (movem o6 -11 q)
             (move o6 -14 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 59))
             (call lisp::%sp-svset 3)
             (move o6 (constant 55))
             (movem o6 -11 q)
             (move o6 -20 q)
             (movem o6 -10 q)
             (movem nil -9 q)
             (skipn nil -9 q)
             (jrst 327)
             (move o6 (constant 2))
             (movem o6 -7 q)
             (jrst 328)
(label 327)  (move o6 (constant 9))
             (movem o6 -7 q)
(label 328)  (move o2 -11 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call dpb 3)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 326)  (skipn nil -16 q)
             (jrst 331)
             (move o6 -20 q)
             (movem o6 -11 q)
             (move o6 -13 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 60))
             (call lisp::%sp-svset 3)
             (move o6 (constant 56))
             (movem o6 -11 q)
             (move o6 -20 q)
             (movem o6 -10 q)
             (movem nil -9 q)
             (skipn nil -9 q)
             (jrst 332)
             (move o6 (constant 2))
             (movem o6 -7 q)
             (jrst 333)
(label 332)  (move o6 (constant 9))
             (movem o6 -7 q)
(label 333)  (move o2 -11 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call dpb 3)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
(label 331)  (skipn nil -15 q)
             (jrst 336)
             (move o6 -20 q)
             (movem o6 -11 q)
             (move o6 -12 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 61))
             (call lisp::%sp-svset 3)
             (move o6 (constant 57))
             (movem o6 -11 q)
             (move o6 -20 q)
             (movem o6 -10 q)
             (movem nil -9 q)
             (skipn nil -9 q)
             (jrst 337)
             (move o6 (constant 2))
             (movem o6 -7 q)
             (jrst 338)
(label 337)  (move o6 (constant 9))
             (movem o6 -7 q)
(label 338)  (move o2 -11 q)
             (move o1 (constant 2))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call dpb 3)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 (constant 6))
             (call lisp::%sp-svset 3)
             (move o1 -9 q)
             (movei n 1)
             (jrst 335)
(label 336)  (move o1 nil)
             (movei n 1)
(label 335)  (jrst 282)
(label 283)  (move o1 nil)
             (movei n 1)
(label 282)
(label 3)    (unbind 1)
             (adjsp q -22)
             (popj p)
)

(%put (quote internal-cleanup-flavor) (quote lisp::%args-documentation) (quote (flavor &optional (really *cleanup-enable*) &aux all-components (*flavors-compile* *flavors-compile*)))) 
(%put (quote internal-cleanup-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(defun order-flavors (stack result-stack) (lisp::*macroexpansion* (let ((touched (cond ((> (length %stacks%) 0) (let ((res (vector-pop %stacks%))) (setf (fill-pointer res) 0) res)) (t (make-array 1000 :adjustable t :fill-pointer 0))))) (unwind-protect (progn (macrolet ((touch (f) (list (quote cond) (list (list* (quote find) f (quote (touched)))) (list (list* (quote find) f (quote (result-stack)))) (list t (list (quote touch-components) f))))) (labels ((touch-components (f) (catch (quote out) (vector-push-extend f touched) (let ((*undefined-components* (function (lambda (f c) (format *error-output* "Flavor ~S has undefined components ~S." (flavor-name f) c) (vector-pop touched) (throw (quote out) nil))))) (dolist (c (flavor-all-components f)) (touch c))) (when (find f stack) (vector-push-extend f result-stack)) (vector-pop touched)))) (dotimes (i (length stack)) (let ((thing (aref stack i))) (touch thing)))))) (progn (fill touched nil :end (array-dimension touched 0)) (vector-push-extend touched %stacks%)))) (with-stacks (touched) (macrolet ((touch (f) (list (quote cond) (list (list* (quote find) f (quote (touched)))) (list (list* (quote find) f (quote (result-stack)))) (list t (list (quote touch-components) f))))) (labels ((touch-components (f) (catch (quote out) (vector-push-extend f touched) (let ((*undefined-components* (function (lambda (f c) (format *error-output* "Flavor ~S has undefined components ~S." (flavor-name f) c) (vector-pop touched) (throw (quote out) nil))))) (dolist (c (flavor-all-components f)) (touch c))) (when (find f stack) (vector-push-extend f result-stack)) (vector-pop touched)))) (dotimes (i (length stack)) (let ((thing (aref stack i))) (touch thing)))))))) 
(%put (quote cleanup-all-flavors) (quote lisp::%fun-documentation) (quote "Optimizes the cleaning of dirty flavors, allowing effective sharing
  of combined methods.")) 

#_(lap #0_cleanup-all-flavors expr
       (entry-points (1 2-many 2-many 2-many 2-many 2-many 2-many))
       #0_(%stacks% 0 1000 :adjustable t :fill-pointer *dirty-flavors* :end)
       (code-start)
(label 1)    (adjsp q 7)
             (move o1 (special 0))
             (call length 1)
             (movem o1 -5 q)
             (move o2 (constant 1))
             (move o1 -5 q)
             (call > 2)
             (jumpe o1 4)
             (move o1 (special 0))
             (call vector-pop 1)
             (movem o1 -5 q)
             (move o2 (constant 1))
             (move o1 -5 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 3)
(label 4)    (move o5 (constant 1))
             (move o1 (constant 2))
             (move o2 (constant 3))
             (move o3 (constant 4))
             (move o4 (constant 5))
             (call make-array 5)
             (movem o1 -6 q)
(label 3)    (icall cunwind)
             (jrst 7)
             (jrst 8)
             (move o6 (special 6))
             (movem o6 -5 q)
             (move o2 -6 q)
             (move o1 -5 q)
             (call flavors::order-flavors 2)
             (move o6 (constant 1))
             (movem o6 -5 q)
             (move o1 -6 q)
             (call length 1)
             (movem o1 -4 q)
(label 13)   (move o2 -4 q)
             (move o1 -5 q)
             (call < 2)
             (jumpn o1 14)
             (jrst 9)
(label 14)   (move o2 -5 q)
             (move o1 -6 q)
             (call aref 2)
             (call flavors:cleanup-flavor 1)
             (move o1 -5 q)
             (call 1+ 1)
             (movem o1 -5 q)
             (jrst 13)
(label 9)    (popj p)
(label 7)    (move o2 (constant 1))
             (move o1 -6 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -6 q)
             (move o2 nil)
             (move o3 (constant 7))
             (call fill 4)
             (move o2 (special 0))
             (move o1 -6 q)
             (call vector-push-extend 2)
             (popj p)
(label 8)    (move o6 (special 6))
             (movem o6 -6 q)
             (move o2 (constant 1))
             (move o1 -6 q)
             (call lisp::%set-fill-pointer 2)
             (adjsp q -7)
             (popj p)
)

(%put (quote cleanup-all-flavors) (quote lisp::%args-documentation) (quote nil)) 
(%put (quote cleanup-all-flavors) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote cleanup-flavor) (quote lisp::%fun-documentation) (quote "Cleans the flavor.")) 

#_(lap #0_cleanup-flavor-internal-26 expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(*flavor-compile-methods* lambda)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (movem o2 -5 q)
             (skipn nil (special 0))
             (jrst 2)
             (move o3 -5 q)
             (move o1 (constant 1))
             (move o2 nil)
             (call list 3)
             (move o2 o1)
             (move o1 nil)
             (call compile 2)
             (call funcall 1)
             (jrst 3)
(label 2)    (move o1 -5 q)
             (call eval 1)
(label 3)    (adjsp q -7)
             (popj p)
)


#_(lap #0_cleanup-flavor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." dissociate-instances message-clean-p cleanup-flavor-internal-26 flavor-set-handlers *uninstantiable* *inheritablep* *definer* *set-handlers* t)
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 -9 q)
             (call symbolp 1)
             (jumpe o1 4)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 5)
             (jrst 7)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 5)
(label 7)    (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 5)
(label 4)    (move o6 (constant 4))
             (movem o6 -8 q)
             (move o6 (constant 5))
             (movem o6 -7 q)
             (move o6 (constant 6))
             (movem o6 -6 q)
             (move o6 (constant 7))
             (movem o6 -5 q)
             (move o1 -8 q)
             (spec-bind (special 8))
             (movem o1 (special 8))
             (move o1 -7 q)
             (spec-bind (special 9))
             (movem o1 (special 9))
             (move o1 -6 q)
             (spec-bind (special 10))
             (movem o1 (special 10))
             (move o1 -5 q)
             (spec-bind (special 11))
             (movem o1 (special 11))
             (move o2 (constant 12))
             (move o1 -9 q)
             (call flavors::internal-cleanup-flavor 2)
             (unbind 4)
             (adjsp q -10)
             (popj p)
)

(%put (quote cleanup-flavor) (quote lisp::%args-documentation) (quote (flavor))) 
(%put (quote cleanup-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote recompile-flavor) (quote lisp::%fun-documentation) (quote "Use this when something compiled into a combined method has changed,
  for instance a macro used by a wrapper and hence compiled into the 
  combined method.")) 

#_(lap #0_recompile-flavor-internal-30 expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(*flavor-compile-methods* lambda)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (movem o2 -5 q)
             (skipn nil (special 0))
             (jrst 2)
             (move o3 -5 q)
             (move o1 (constant 1))
             (move o2 nil)
             (call list 3)
             (move o2 o1)
             (move o1 nil)
             (call compile 2)
             (call funcall 1)
             (jrst 3)
(label 2)    (move o1 -5 q)
             (call eval 1)
(label 3)    (adjsp q -7)
             (popj p)
)


#_(lap #0_recompile-flavor expr
       (entry-points (2-few 1 2 3 2-many 2-many 2-many))
       #0_(t flavor :name *undefined-flavor-names* "Flavor ~S does not exist." dissociate-instances message-clean-p recompile-flavor-internal-30 flavor-set-handlers *uninstantiable* *inheritablep* *definer* *set-handlers* %stacks% 0 1000 :adjustable :fill-pointer vanilla-flavor *all-flavor-names* 1 4 *dirty-flavors* 5 18 23 :end)
       (code-start)
(label 1)    (move o2 nil)
(label 2)    (move o3 (constant 0))
(label 3)    (adjsp q 22)
             (movem o1 -21 q)
             (movem o2 -20 q)
             (movem o3 -19 q)
             (move o6 -21 q)
             (movem o6 -17 q)
             (move o2 (constant 1))
             (move o1 -17 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -18 q)
             (jumpn o1 5)
             (jrst 7)
             (move o2 -17 q)
             (move o1 (constant 2))
             (call flavors::make-flavor 2)
             (movem o1 -16 q)
             (move o6 -17 q)
             (movem o6 -15 q)
             (move o6 (constant 1))
             (movem o6 -14 q)
             (move o6 -16 q)
             (movem o6 -13 q)
             (move o3 -13 q)
             (move o1 -15 q)
             (move o2 -14 q)
             (call %put 3)
             (move o2 (special 3))
             (move o1 -17 q)
             (call adjoin 2)
             (movem o1 (special 3))
             (move o6 -16 q)
             (movem o6 -18 q)
             (jrst 5)
(label 7)    (move o2 -17 q)
             (move o1 (constant 4))
             (call error 2)
             (movem o1 -18 q)
(label 5)    (move o6 (constant 5))
             (movem o6 -17 q)
             (move o6 (constant 6))
             (movem o6 -16 q)
             (move o6 (constant 7))
             (movem o6 -15 q)
             (move o6 (constant 8))
             (movem o6 -14 q)
             (move o1 -17 q)
             (spec-bind (special 9))
             (movem o1 (special 9))
             (move o1 -16 q)
             (spec-bind (special 10))
             (movem o1 (special 10))
             (move o1 -15 q)
             (spec-bind (special 11))
             (movem o1 (special 11))
             (move o1 -14 q)
             (spec-bind (special 12))
             (movem o1 (special 12))
             (skipn nil -19 q)
             (jrst 11)
             (move o1 (special 13))
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 14))
             (move o1 -12 q)
             (call > 2)
             (jumpe o1 13)
             (move o1 (special 13))
             (call vector-pop 1)
             (movem o1 -12 q)
             (move o2 (constant 14))
             (move o1 -12 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -12 q)
             (movem o6 -13 q)
             (jrst 12)
(label 13)   (move o5 (constant 14))
             (move o1 (constant 15))
             (move o2 (constant 16))
             (move o3 (constant 0))
             (move o4 (constant 17))
             (call make-array 5)
             (movem o1 -13 q)
(label 12)   (move o1 (special 13))
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 14))
             (move o1 -11 q)
             (call > 2)
             (jumpe o1 17)
             (move o1 (special 13))
             (call vector-pop 1)
             (movem o1 -11 q)
             (move o2 (constant 14))
             (move o1 -11 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -11 q)
             (movem o6 -12 q)
             (jrst 16)
(label 17)   (move o5 (constant 14))
             (move o1 (constant 15))
             (move o2 (constant 16))
             (move o3 (constant 0))
             (move o4 (constant 17))
             (call make-array 5)
             (movem o1 -12 q)
(label 16)   (icall cunwind)
             (jrst 20)
             (jrst 21)
             (move o1 -18 q)
             (call flavors::flavor-name 1)
             (movem o1 -11 q)
             (move o2 (constant 18))
             (move o1 -11 q)
             (call eq 2)
             (jumpe o1 23)
             (move o6 (special 19))
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 28)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 29)
             (jrst 24)
(label 29)   (move o6 -10 q)
             (movem o6 -8 q)
             (move o2 (constant 1))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 31)
             (jrst 33)
             (move o2 -8 q)
             (move o1 (constant 2))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 1))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 3))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 3))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 31)
(label 33)   (move o2 -8 q)
             (move o1 (constant 4))
             (call error 2)
             (movem o1 -9 q)
(label 31)   (move o2 -13 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
             (move o2 (constant 14))
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 37)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o2 (constant 21))
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -8 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 42)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 43)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 43)
(label 42)   (jrst 40)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (movem o1 -7 q)
             (move o2 (constant 14))
             (move o1 -7 q)
             (call > 2)
             (jumpn o1 45)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 45)
(label 40)   (jrst 39)
             (move o2 (special 22))
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 39)   (skipe nil -20 q)
             (jrst 47)
             (move o6 (constant 23))
             (movem o6 -8 q)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 (constant 0))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 49)
             (move o6 (constant 20))
             (movem o6 -4 q)
             (jrst 50)
(label 49)   (move o6 (constant 14))
             (movem o6 -4 q)
(label 50)   (move o2 -8 q)
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -3 q)
             (move o1 -7 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -7 q)
             (move o2 (constant 24))
             (call lisp::%sp-svset 3)
             (jrst 48)
(label 47)   (move o6 -9 q)
             (movem o6 -8 q)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (jumpn o1 52)
             (call flavors::alloc-tiny-stack 0)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -20 q)
             (call vector-push-extend 2)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 -7 q)
             (movem o6 -5 q)
             (move o3 -5 q)
             (move o1 -6 q)
             (move o2 (constant 25))
             (call lisp::%sp-svset 3)
             (jrst 51)
(label 52)   (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (move o2 o1)
             (move o1 -20 q)
             (call vector-push-extend 2)
(label 51)
(label 48)
(label 37)   (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 28)
(label 24)   (jrst 22)
(label 23)   (move o2 -13 q)
             (move o1 -18 q)
             (call vector-push-extend 2)
             (move o6 (constant 14))
             (movem o6 -11 q)
(label 61)   (move o1 -13 q)
             (call length 1)
             (move o2 o1)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 62)
             (jrst 57)
(label 62)   (move o2 -11 q)
             (move o1 -13 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o2 (constant 21))
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 68)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 69)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 69)
(label 68)   (jrst 66)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (movem o1 -8 q)
             (move o2 (constant 14))
             (move o1 -8 q)
             (call > 2)
             (jumpn o1 71)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 71)
(label 66)   (jrst 65)
             (move o2 (special 22))
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 65)   (skipe nil -20 q)
             (jrst 73)
             (move o6 (constant 23))
             (movem o6 -9 q)
             (move o6 -10 q)
             (movem o6 -8 q)
             (move o6 (constant 0))
             (movem o6 -7 q)
             (skipn nil -7 q)
             (jrst 75)
             (move o6 (constant 20))
             (movem o6 -5 q)
             (jrst 76)
(label 75)   (move o6 (constant 14))
             (movem o6 -5 q)
(label 76)   (move o2 -9 q)
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call dpb 3)
             (movem o1 -6 q)
             (move o3 -6 q)
             (move o1 -8 q)
             (move o2 (constant 24))
             (call lisp::%sp-svset 3)
             (jrst 74)
(label 73)   (move o6 -10 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (jumpn o1 78)
             (call flavors::alloc-tiny-stack 0)
             (movem o1 -8 q)
             (move o2 -8 q)
             (move o1 -20 q)
             (call vector-push-extend 2)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o3 -6 q)
             (move o1 -7 q)
             (move o2 (constant 25))
             (call lisp::%sp-svset 3)
             (jrst 77)
(label 78)   (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (move o2 o1)
             (move o1 -20 q)
             (call vector-push-extend 2)
(label 77)
(label 74)   (move o2 -11 q)
             (move o1 -13 q)
             (call aref 2)
             (call flavors::flavor-dependents 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
(label 85)   (move o1 -10 q)
             (call atom 1)
             (jumpe o1 86)
             (jrst 81)
(label 86)   (move o2 -13 q)
             (move o1 -9 q)
             (call position 2)
             (jumpn o1 89)
             (move o2 -13 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 89)   (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (jrst 85)
(label 81)   (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -11 q)
             (jrst 61)
(label 57)
(label 22)   (move o2 -12 q)
             (move o1 -13 q)
             (call flavors::order-flavors 2)
             (move o6 -12 q)
             (movem o6 -11 q)
             (move o6 (constant 14))
             (movem o6 -10 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -9 q)
(label 96)   (move o2 -9 q)
             (move o1 -10 q)
             (call < 2)
             (jumpn o1 97)
             (move o1 nil)
             (movei n 1)
             (jrst 92)
(label 97)   (move o2 -10 q)
             (move o1 -11 q)
             (call aref 2)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call flavors::internal-cleanup-flavor 1)
             (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -10 q)
             (jrst 96)
(label 92)   (popj p)
(label 20)   (move o2 (constant 14))
             (move o1 -13 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -13 q)
             (move o2 nil)
             (move o3 (constant 26))
             (call fill 4)
             (move o2 (special 13))
             (move o1 -13 q)
             (call vector-push-extend 2)
             (move o2 (constant 14))
             (move o1 -12 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -12 q)
             (move o2 nil)
             (move o3 (constant 26))
             (call fill 4)
             (move o2 (special 13))
             (move o1 -12 q)
             (call vector-push-extend 2)
             (popj p)
(label 21)   (jrst 10)
(label 11)   (skipe nil -20 q)
             (jrst 99)
             (move o6 -18 q)
             (movem o6 -13 q)
             (move o2 (constant 21))
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -13 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 104)
             (move o1 -13 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 105)
             (move o1 -13 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 105)
(label 104)  (jrst 102)
             (move o1 -13 q)
             (call flavors::flavor-changed 1)
             (movem o1 -12 q)
             (move o2 (constant 14))
             (move o1 -12 q)
             (call > 2)
             (jumpn o1 107)
             (move o1 -13 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 107)
(label 102)  (jrst 101)
             (move o2 (special 22))
             (move o1 -13 q)
             (call vector-push-extend 2)
(label 101)  (move o6 (constant 23))
             (movem o6 -13 q)
             (move o6 -18 q)
             (movem o6 -12 q)
             (move o6 (constant 0))
             (movem o6 -11 q)
             (skipn nil -11 q)
             (jrst 109)
             (move o6 (constant 20))
             (movem o6 -9 q)
             (jrst 110)
(label 109)  (move o6 (constant 14))
             (movem o6 -9 q)
(label 110)  (move o2 -13 q)
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -12 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -9 q)
             (move o2 -8 q)
             (call dpb 3)
             (movem o1 -10 q)
             (move o3 -10 q)
             (move o1 -12 q)
             (move o2 (constant 24))
             (call lisp::%sp-svset 3)
             (move o1 -18 q)
             (call flavors::internal-cleanup-flavor 1)
             (jrst 10)
(label 99)   (move o6 -18 q)
             (movem o6 -13 q)
             (move o2 (constant 21))
             (move o1 (constant 20))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -13 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 116)
             (move o1 -13 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 117)
             (move o1 -13 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 117)
(label 116)  (jrst 114)
             (move o1 -13 q)
             (call flavors::flavor-changed 1)
             (movem o1 -12 q)
             (move o2 (constant 14))
             (move o1 -12 q)
             (call > 2)
             (jumpn o1 119)
             (move o1 -13 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 119)
(label 114)  (jrst 113)
             (move o2 (special 22))
             (move o1 -13 q)
             (call vector-push-extend 2)
(label 113)  (move o6 -18 q)
             (movem o6 -13 q)
             (move o1 -13 q)
             (call flavors::flavor-changed-methods 1)
             (jumpn o1 122)
             (call flavors::alloc-tiny-stack 0)
             (movem o1 -12 q)
             (move o2 -12 q)
             (move o1 -20 q)
             (call vector-push-extend 2)
             (move o6 -13 q)
             (movem o6 -11 q)
             (move o6 -12 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 25))
             (call lisp::%sp-svset 3)
             (jrst 121)
(label 122)  (move o1 -13 q)
             (call flavors::flavor-changed-methods 1)
             (move o2 o1)
             (move o1 -20 q)
             (call vector-push-extend 2)
(label 121)  (move o1 -18 q)
             (call flavors::internal-cleanup-flavor 1)
(label 10)   (unbind 4)
             (adjsp q -22)
             (popj p)
)

(%put (quote recompile-flavor) (quote lisp::%args-documentation) (quote (flavor-name &optional message (do-dependents t)))) 
(%put (quote recompile-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote compile-flavor) (quote lisp::%fun-documentation) (quote "Makes a non-abstract flavor ready for instantiation, and an abstract
  flavor sharable with respect to combined methods.  If you're doing this
  for a file, use compiler-compile-flavors instead.")) 

#_(lap #0_compile-flavor expr
       (entry-points (2-few 1 2 2-many 2-many 2-many 2-many))
       #0_(*flavor-compile-methods* t *flavors-compile*)
       (code-start)
(label 1)    (move o2 (special 0))
(label 2)    (adjsp q 3)
             (movem o1 -2 q)
             (spec-bind (special 0))
             (movem o2 (special 0))
             (move o6 (constant 1))
             (movem o6 -1 q)
             (move o1 -1 q)
             (spec-bind (special 2))
             (movem o1 (special 2))
             (move o1 -2 q)
             (call flavors:cleanup-flavor 1)
             (unbind 1)
             (unbind 1)
             (adjsp q -3)
             (popj p)
)

(%put (quote compile-flavor) (quote lisp::%args-documentation) (quote (flavor &optional (*flavor-compile-methods* *flavor-compile-methods*)))) 
(%put (quote compile-flavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote compiler-compile-flavors) (quote lisp::%fun-documentation) (quote "Just like compile-flavors, only it includes the definitions of all
  combined methods - compile-flavors doesn't redefine methods it can
  find in the runtime environment.  This way, you're guaranteed to have
  all the functions you expect when you load the file.
  Uses the cleanup machinery, so it cleans up affected flavors first.")) 
(macro compiler-compile-flavors (lisp::**macroarg**) "Just like compile-flavors, only it includes the definitions of all
  combined methods - compile-flavors doesn't redefine methods it can
  find in the runtime environment.  This way, you're guaranteed to have
  all the functions you expect when you load the file.
  Uses the cleanup machinery, so it cleans up affected flavors first." (let* ((flavor-names (cdr lisp::**macroarg**))) (with-stacks (stack ordered defined-methods) (dolist (f flavor-names) (vector-push-extend (get-flavor f) stack)) (order-flavors stack ordered) (dotimes (i (length ordered)) (cleanup-flavor (aref ordered i))) (setf (fill-pointer ordered) 0) (dolist (name flavor-names) (let ((flavor (get-flavor name))) (setf (lisp::*macroexpansion* (logbitp 5 (flavor-changed flavor)) (changed-all-methods (flavor-changed flavor))) t))) (let* ((forms nil) (*uninstantiable* (function dissociate-instances)) (*inheritablep* (function (lambda (flavor message) (cond ((member (flavor-name flavor) flavor-names) t) ((message-clean-p flavor message) :redefine) (t nil))))) (*definer* (function (lambda (name form) (unless (find name defined-methods) (push form forms) (vector-push-extend name defined-methods))))) (*set-handlers* (function (lambda (flavor name-stack fn-stack all-p) (declare (ignore all-p)) (push (list* (quote flavor-set-handlers) (list (quote get-flavor) (list (quote quote) (flavor-name flavor))) (list (quote quote) (copy-seq name-stack)) (list (quote quote) (copy-seq fn-stack)) (quote (t))) forms)))) (*flavors-compile* t)) (order-flavors stack ordered) (dotimes (i (length ordered)) (internal-cleanup-flavor (aref ordered i) t)) (list (quote progn) (list (quote eval-when) (quote (load)) (list (quote let) (quote ((*dont-do-methods* t))) (list (quote mapc) (quote (function compile-flavor)) (list (quote quote) flavor-names)))) (list* (quote eval-when) (quote (compile load)) (nreverse forms))))))) 

#_(lap #0_get-slot macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." get-slot my-assoc (*methods*))
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -7 q)
             (move o2 (constant 0))
             (move o1 -7 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -8 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -8 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o3 (constant 4))
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -7 q)
             (call list 3)
(label 3)    (adjsp q -9)
             (popj p)
)

(%put (quote get-slot) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote get-slot) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote method-list) (quote lisp::%fun-documentation) (quote "Takes the slot-name given in order-methods.  Returns the list of
  method-function-names resulting from the ordering.  For a :primary
  ordered slot, this will be a list of one function.")) 

#_(lap #0_method-list expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(*message* *methods*)
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o6 (special 0))
             (movem o6 -3 q)
             (move o2 (special 1))
             (move o1 -4 q)
             (call assoc 2)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -3 q)
             (call assoc 2)
             (move o1 1 o1)
             (movei n 1)
             (adjsp q -5)
             (popj p)
)

(%put (quote method-list) (quote lisp::%args-documentation) (quote (slot-name))) 
(%put (quote method-list) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote call-methods) (quote lisp::%fun-documentation) (quote "Takes either a slot-name or a list of method function names.  Returns a list
  of forms that call them.")) 

#_(lap #0_call-methods expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(*message* *methods* method-apply (%combined-args))
       (code-start)
(label 1)    (adjsp q 10)
             (movem o1 -9 q)
             (move o1 nil)
             (call list 1)
             (movem o1 -8 q)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o1 -9 q)
             (call listp 1)
             (jumpe o1 4)
             (move o6 -9 q)
             (movem o6 -6 q)
             (jrst 5)
(label 4)    (move o6 (special 0))
             (movem o6 -5 q)
             (move o2 (special 1))
             (move o1 -9 q)
             (call assoc 2)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -5 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -6 q)
(label 5)
(label 9)    (skipe nil -6 q)
             (jrst 10)
             (move o1 -8 q)
             (move o1 1 o1)
             (movei n 1)
             (jrst 3)
(label 10)   (move o6 -7 q)
             (movem o6 -5 q)
             (move o1 -6 q)
             (move o1 0 o1)
             (movem o1 -4 q)
             (move o3 (constant 3))
             (move o1 (constant 2))
             (move o2 -4 q)
             (call list* 3)
             (call list 1)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -5 q)
             (call rplacd 2)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -6 q)
             (jrst 9)
(label 3)    (adjsp q -10)
             (popj p)
)

(%put (quote call-methods) (quote lisp::%args-documentation) (quote (slot-name-or-list))) 
(%put (quote call-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote wrapper-mix) (quote lisp::%fun-documentation) (quote "Wraps the form with the wrappers (and whoppers) of the given types. 
  (See defwrapper, defwhopper.)  The ordering of the wrapper functions
  is the reverse of the order in which the wrappings will be encountered
  at runtime.")) 

#_(lap #0_wrapper-mix expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(*message* *methods*)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (movem o2 -6 q)
             (move o1 -7 q)
             (call atom 1)
             (jumpe o1 3)
             (move o6 (special 0))
             (movem o6 -4 q)
             (move o2 (special 1))
             (move o1 -7 q)
             (call assoc 2)
             (move o1 1 o1)
             (move o2 o1)
             (move o1 -4 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -5 q)
             (jrst 4)
(label 3)    (move o6 -7 q)
             (movem o6 -5 q)
(label 4)    (move o6 -5 q)
             (movem o6 -4 q)
             (move o1 -4 q)
             (move o1 0 o1)
             (movem o1 -3 q)
(label 9)    (move o1 -4 q)
             (call atom 1)
             (jumpe o1 10)
             (jrst 5)
(label 10)   (move o2 -6 q)
             (move o1 -3 q)
             (call funcall 2)
             (movem o1 -6 q)
             (move o1 -4 q)
             (move o1 1 o1)
             (movem o1 -4 q)
             (move o1 -4 q)
             (move o1 0 o1)
             (movem o1 -3 q)
             (jrst 9)
(label 5)    (move o1 -6 q)
             (movei n 1)
             (adjsp q -8)
             (popj p)
)

(%put (quote wrapper-mix) (quote lisp::%args-documentation) (quote (slot-name-or-list form))) 
(%put (quote wrapper-mix) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defcombination-ordering) (quote lisp::%fun-documentation) (quote "Should use ORDER-METHODS or ORDER-WRAPPERS (almost exclusively) to
  order the method types of a method into named slots.
  Keep in mind that the code may be executed many times, depending upon the
  implementation.")) 

#_(lap #0_defcombination-ordering macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." defcombination-ordering defun (type-assoc &optional reverse-and-describe) dolist (cons (if reverse-and-describe (quote ((foo . bar))) type-assoc)) let ((type (car cons)) (method (cdr cons))))
       (code-start)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 0))
             (move o1 -11 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -12 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -12 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -11 q)
             (move o1 -12 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o1 -12 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o2 (constant 4))
             (move o1 -10 q)
             (call cons 2)
             (movem o1 -6 q)
             (move o3 -9 q)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 5))
             (move o2 (constant 6))
             (call list 3)
             (move o4 o1)
             (move o1 (constant 3))
             (move o2 -11 q)
             (move o3 -6 q)
             (call list 4)
(label 3)    (adjsp q -13)
             (popj p)
)

(%put (quote defcombination-ordering) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defcombination-ordering) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote order-methods) (quote lisp::%fun-documentation) (quote "Slot and types are evaled.  Slot-name is the name used in message-list, etc.
  Order is one of :base-flavor-last, :primary, or :base-flavor-first,
  as described in the documentation.  The method-types in the list are added
  in order to the list of methods in the slot.")) 

#_(lap #0_order-methods macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." order-methods :primary if reverse-and-describe let thing car get-slot *message* ((unless (find thing *called-methods*) (vector-push-extend thing *called-methods*))) when member type unless push method :base-flavor-first dolist m ((unless (find m *called-methods*) (vector-push-extend m *called-methods*))) :base-flavor-last nreversef)
       (code-start)
(label 1)    (adjsp q 18)
             (movem o1 -17 q)
             (move o1 -17 q)
             (call length 1)
             (movem o1 -16 q)
             (move o2 (constant 0))
             (move o1 -16 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -17 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -17 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -16 q)
             (move o1 -17 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -15 q)
             (move o1 -17 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o6 -16 q)
             (movem o6 -13 q)
             (move o2 (constant 3))
             (move o1 -13 q)
             (call eq 2)
             (jumpe o1 7)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o2 o1)
             (move o1 (constant 8))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 7))
             (call list 2)
             (call list 1)
             (movem o1 -9 q)
             (move o3 (constant 11))
             (move o1 (constant 6))
             (move o2 -9 q)
             (call list* 3)
             (movem o1 -10 q)
             (move o3 -14 q)
             (move o1 (constant 13))
             (move o2 (constant 14))
             (call list 3)
             (movem o1 -8 q)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (movem o1 -6 q)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 16))
             (move o2 (constant 17))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 15))
             (move o2 -6 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -8 q)
             (call list 3)
             (move o4 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 -10 q)
             (call list 4)
             (jrst 6)
(label 7)    (move o2 (constant 18))
             (move o1 -13 q)
             (call eq 2)
             (jumpe o1 8)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o2 o1)
             (move o1 (constant 20))
             (call list 2)
             (movem o1 -9 q)
             (move o3 (constant 21))
             (move o1 (constant 19))
             (move o2 -9 q)
             (call list* 3)
             (movem o1 -10 q)
             (move o3 -14 q)
             (move o1 (constant 13))
             (move o2 (constant 14))
             (call list 3)
             (movem o1 -8 q)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 16))
             (move o2 (constant 17))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -8 q)
             (call list 3)
             (move o4 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 -10 q)
             (call list 4)
             (jrst 6)
(label 8)    (move o2 (constant 22))
             (move o1 -13 q)
             (call eq 2)
             (jumpe o1 9)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o2 o1)
             (move o1 (constant 23))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 20))
             (call list 2)
             (movem o1 -9 q)
             (move o3 (constant 21))
             (move o1 (constant 19))
             (move o2 -9 q)
             (call list* 3)
             (movem o1 -10 q)
             (move o3 -14 q)
             (move o1 (constant 13))
             (move o2 (constant 14))
             (call list 3)
             (movem o1 -8 q)
             (move o3 -15 q)
             (move o1 (constant 9))
             (move o2 (constant 10))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 16))
             (move o2 (constant 17))
             (call list 3)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -8 q)
             (call list 3)
             (move o4 o1)
             (move o1 (constant 4))
             (move o2 (constant 5))
             (move o3 -10 q)
             (call list 4)
             (jrst 6)
(label 9)    (move o1 nil)
             (movei n 1)
(label 6)
(label 3)    (adjsp q -18)
             (popj p)
)

(%put (quote order-methods) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote order-methods) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote order-wrappers) (quote lisp::%fun-documentation) (quote "Just like order-methods, except remembers the list of wrapper functions
  along with the list of methods.")) 

#_(lap #0_order-wrappers macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." order-wrappers cond reverse-and-describe :base-flavor-last nreversef get-slot *message* vector-push-extend (*description*) t order-methods)
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -10 q)
             (move o2 (constant 0))
             (move o1 -10 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -11 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -11 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -11 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 (constant 5))
             (move o1 -10 q)
             (call eq 2)
             (jumpe o1 6)
             (move o3 -9 q)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (call list 3)
             (move o2 o1)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -5 q)
             (jrst 7)
(label 6)    (movem nil -5 q)
(label 7)    (move o3 -9 q)
             (move o1 (constant 7))
             (move o2 (constant 8))
             (call list 3)
             (movem o1 -3 q)
             (move o3 (constant 10))
             (move o1 (constant 9))
             (move o2 -3 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 4))
             (move o2 -5 q)
             (call list 3)
             (movem o1 -6 q)
             (move o4 -8 q)
             (move o1 (constant 12))
             (move o2 -10 q)
             (move o3 -9 q)
             (call list 4)
             (move o2 o1)
             (move o1 (constant 11))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 3))
             (move o2 -6 q)
             (call list 3)
(label 3)    (adjsp q -12)
             (popj p)
)

(%put (quote order-wrappers) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote order-wrappers) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defcombination) (quote lisp::%fun-documentation) (quote "The order-arg is bound to the argument of the combination name.
  the ordering-fn is used to order the methods of the method we're combining
  (see defcombination-ordering).  The body of this form should produce
  the actual combined method, using the functions METHOD-LIST, CALL-METHODS,
  CALL-METHOD, AND WRAPPER-MIX to access the slots of the ordered methods.
  The system will optimize only bare method-calls, not those surrounded
  by AND, etc.")) 

#_(lap #0_defcombination macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(4 "Macro ~S cannot be called with ~S args." defcombination make-combination quote function lambda)
       (code-start)
(label 1)    (adjsp q 14)
             (movem o1 -13 q)
             (move o1 -13 q)
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 0))
             (move o1 -12 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -13 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -13 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -12 q)
             (move o1 -13 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -11 q)
             (move o1 -13 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -10 q)
             (move o1 -13 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -9 q)
             (move o2 -12 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -7 q)
             (move o2 -11 q)
             (move o1 (constant 4))
             (call list 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call list 1)
             (movem o1 -3 q)
             (move o4 -9 q)
             (move o1 (constant 6))
             (move o2 -3 q)
             (move o3 -10 q)
             (call list* 4)
             (move o2 o1)
             (move o1 (constant 5))
             (call list 2)
             (move o4 o1)
             (move o1 (constant 3))
             (move o2 -7 q)
             (move o3 -6 q)
             (call list 4)
(label 3)    (adjsp q -14)
             (popj p)
)

(%put (quote defcombination) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defcombination) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote symeval-in-instance) (quote lisp::%fun-documentation) (quote "If no-error-p is non-nil, unbound ivs will simply return the value of
  the second optional. Ivs not present in the environment will signal an error
  in either case.")) 

#_(lap #0_symeval-in-instance expr
       (entry-points (2-few 2-few 1 2 3 2-many 2-many))
       #0_(0 "Instance variable ~S not found in instance ~S." system::unbound "Instance variable ~S unbound.")
       (code-start)
(label 1)    (move o3 nil)
(label 2)    (move o4 nil)
(label 3)    (adjsp q 12)
             (movem o1 -11 q)
             (movem o2 -10 q)
             (movem o3 -9 q)
             (movem o4 -8 q)
             (move o6 -11 q)
             (movem o6 -6 q)
(label 9)    (move o1 -6 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 0))
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call system:instancep 1)
             (jumpe o1 10)
             (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 11)
(label 10)   (move o1 -6 q)
             (jrst 5)
(label 11)   (jrst 9)
(label 5)    (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call aref 2)
             (call flavor-internals:instance-descriptor-env 1)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 -10 q)
             (call position 2)
             (movem o1 -6 q)
             (skipe nil -6 q)
             (jrst 13)
             (move o3 -11 q)
             (move o1 (constant 1))
             (move o2 -10 q)
             (call error 3)
             (jrst 12)
(label 13)   (move o6 -11 q)
             (movem o6 -4 q)
(label 19)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 0))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 20)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 21)
(label 20)   (move o1 -4 q)
             (jrst 15)
(label 21)   (jrst 19)
(label 15)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o1 -6 q)
             (call 1+ 1)
             (move o2 o1)
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o2 -5 q)
             (move o1 (constant 2))
             (call eq 2)
             (jumpe o1 14)
             (skipn nil -9 q)
             (jrst 22)
             (move o1 -8 q)
             (movei n 1)
             (jrst 23)
(label 22)   (move o2 -10 q)
             (move o1 (constant 3))
             (call error 2)
(label 23)   (jrst 12)
(label 14)   (move o6 -11 q)
             (movem o6 -5 q)
(label 29)   (move o1 -5 q)
             (call system::%instance-vector 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call aref 2)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call system:instancep 1)
             (jumpe o1 30)
             (move o6 -4 q)
             (movem o6 -5 q)
             (jrst 31)
(label 30)   (move o1 -5 q)
             (jrst 25)
(label 31)   (jrst 29)
(label 25)   (call system::%instance-vector 1)
             (movem o1 -5 q)
             (move o1 -6 q)
             (call 1+ 1)
             (move o2 o1)
             (move o1 -5 q)
             (call aref 2)
(label 12)   (adjsp q -12)
             (popj p)
)

(%put (quote symeval-in-instance) (quote lisp::%args-documentation) (quote (instance symbol &optional no-error-p unbound))) 
(%put (quote symeval-in-instance) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote set-in-instance) (quote lisp::%fun-documentation) (quote "An error is signalled if the symbol is not an instance variable in the given
  instance.")) 

#_(lap #0_set-in-instance expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(0 "Instance variable ~S not found in instance ~S.")
       (code-start)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (movem o3 -10 q)
             (move o6 -12 q)
             (movem o6 -8 q)
(label 7)    (move o1 -8 q)
             (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call system:instancep 1)
             (jumpe o1 8)
             (move o6 -7 q)
             (movem o6 -8 q)
             (jrst 9)
(label 8)    (move o1 -8 q)
             (jrst 3)
(label 9)    (jrst 7)
(label 3)    (call system::%instance-vector 1)
             (movem o1 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call aref 2)
             (call flavor-internals:instance-descriptor-env 1)
             (call flavor-internals:iv-env-vector 1)
             (movem o1 -9 q)
             (move o2 -9 q)
             (move o1 -11 q)
             (call position 2)
             (movem o1 -8 q)
             (skipe nil -8 q)
             (jrst 11)
             (move o3 -12 q)
             (move o1 (constant 1))
             (move o2 -11 q)
             (call error 3)
             (jrst 10)
(label 11)   (move o6 -12 q)
             (movem o6 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 -10 q)
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
(label 17)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 0))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 18)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 19)
(label 18)   (move o1 -4 q)
             (jrst 13)
(label 19)   (jrst 17)
(label 13)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -3 q)
             (move o3 -5 q)
             (move o1 -4 q)
             (move o2 -3 q)
             (call lisp::%aset 3)
(label 10)   (adjsp q -13)
             (popj p)
)

(%put (quote set-in-instance) (quote lisp::%args-documentation) (quote (instance symbol value))) 
(%put (quote set-in-instance) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote get-handler-for) (quote lisp::%fun-documentation) (quote "Returns the function that handles the given message.")) 

#_(lap #0_get-handler-for expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_NIL
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (movem o2 -3 q)
             (move o2 -4 q)
             (move o1 -3 q)
             (call flavor-internals:get-handler 2)
             (adjsp q -5)
             (popj p)
)

(%put (quote get-handler-for) (quote lisp::%args-documentation) (quote (object message))) 
(%put (quote get-handler-for) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote lexpr-funcall-self) (quote lisp::%fun-documentation) (quote "Supplied for compatibility with Symbolics Flavors.")) 

#_(lap #0_lexpr-funcall-self macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." lexpr-funcall-self apply (function send) self)
       (code-start)
(label 1)    (adjsp q 9)
             (movem o1 -8 q)
             (move o1 -8 q)
             (call length 1)
             (movem o1 -7 q)
             (move o2 (constant 0))
             (move o1 -7 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -8 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -8 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -8 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -6 q)
             (move o5 -6 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (move o3 (constant 5))
             (move o4 -7 q)
             (call list* 5)
(label 3)    (adjsp q -9)
             (popj p)
)

(%put (quote lexpr-funcall-self) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote lexpr-funcall-self) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote funcall-self) (quote lisp::%fun-documentation) (quote "Supplied for compatibility with Symbolics Flavors.")) 

#_(lap #0_funcall-self macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." funcall-self send self)
       (code-start)
(label 1)    (adjsp q 8)
             (movem o1 -7 q)
             (move o1 -7 q)
             (call length 1)
             (movem o1 -6 q)
             (move o2 (constant 0))
             (move o1 -6 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -7 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -7 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -6 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o4 -5 q)
             (move o1 (constant 3))
             (move o2 (constant 4))
             (move o3 -6 q)
             (call list* 4)
(label 3)    (adjsp q -8)
             (popj p)
)

(%put (quote funcall-self) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote funcall-self) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote flavor-allowed-init-keywords) (quote lisp::%fun-documentation) (quote "Returns a list of the allowable init-keywords for the flavor.")) 

#_(lap #0_flavor-allowed-init-keywords expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." string-lessp :key symbol-name)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 3)
(label 5)    (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 3)    (movem nil -8 q)
             (move o1 -9 q)
             (call flavors::flavor-all-components 1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -6 q)
(label 12)   (move o1 -7 q)
             (call atom 1)
             (jumpe o1 13)
             (jrst 8)
(label 13)   (move o1 -6 q)
             (call flavors::flavor-init-keywords 1)
             (movem o1 -5 q)
             (move o2 -8 q)
             (move o1 -5 q)
             (call append 2)
             (movem o1 -8 q)
             (move o1 -7 q)
             (move o1 1 o1)
             (movem o1 -7 q)
             (move o1 -7 q)
             (move o1 0 o1)
             (movem o1 -6 q)
             (jrst 12)
(label 8)    (move o4 (constant 6))
             (move o1 -8 q)
             (move o2 (constant 4))
             (move o3 (constant 5))
             (call sort 4)
             (adjsp q -11)
             (popj p)
)

(%put (quote flavor-allowed-init-keywords) (quote lisp::%args-documentation) (quote (flavor-name))) 
(%put (quote flavor-allowed-init-keywords) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote flavor-allows-init-keyword-p) (quote lisp::%fun-documentation) (quote "Returns the flavor that provides this init option, or NIL if none.")) 

#_(lap #0_flavor-allows-init-keyword-p expr
       (entry-points (2-few 2-few 1 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist.")
       (code-start)
(label 1)    (adjsp q 12)
             (movem o1 -11 q)
             (movem o2 -10 q)
             (move o6 -11 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 3)
(label 5)    (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 3)    (move o1 -9 q)
             (call flavors::flavor-all-components 1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -7 q)
(label 12)   (move o1 -8 q)
             (call atom 1)
             (jumpe o1 13)
             (move o1 nil)
             (movei n 1)
             (jrst 8)
(label 13)   (move o1 -7 q)
             (call flavors::flavor-method-env 1)
             (call flavors::flavor-init-keywords 1)
             (move o2 o1)
             (move o1 -10 q)
             (call find 2)
             (jumpe o1 15)
             (move o1 -11 q)
             (movei n 1)
             (jrst 2)
(label 15)   (move o1 -8 q)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (jrst 12)
(label 8)
(label 2)    (adjsp q -12)
             (popj p)
)

(%put (quote flavor-allows-init-keyword-p) (quote lisp::%args-documentation) (quote (flavor-name keyword))) 
(%put (quote flavor-allows-init-keyword-p) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote make-instance) (quote lisp::%fun-documentation) (quote "Compiles the flavor and makes sure it's initable, inits any initable
  instance variables from the init-plist and inits others if inits given,
  then sends :INIT with the plist if it's handled.  Returns the new instance.")) 

#_(lap #0_make-instance expr
       (entry-points (2-few 2 3 4 5 6 7) rest)
       #0_(list symbol "Init-plist not list or symbol - ~S." flavor :name *undefined-flavor-names* "Flavor ~S does not exist." 1 "Attempt to instantiate an abstract flavor: ~S." t *flavors-compile* %stacks% 0 1000 :adjustable :fill-pointer system::unbound frob "Unknown init keywords for make-instance: ~S." internal-init "Additional required keywords for flavor ~S: ~S." :send-if-handles :init :end)
       (code-start)
(label 2)    (move o2 nil)
             (jrst 1)
(label 3)    (movei w2 1)
             (icall rest2)
             (jrst 1)
(label 4)    (movei w2 2)
             (icall rest3)
             (jrst 1)
(label 5)    (movei w2 3)
             (icall rest4)
             (jrst 1)
(label 6)    (movei w2 4)
             (icall rest5)
             (jrst 1)
(label 7)    (movei w2 1)
             (icall restx)
(label 1)    (adjsp q 18)
             (movem o1 -17 q)
             (movem o2 -16 q)
             (move o6 -16 q)
             (movem o6 -15 q)
             (move o2 (constant 0))
             (move o1 -15 q)
             (call typep 2)
             (jumpe o1 10)
             (jrst 9)
(label 10)   (move o2 (constant 1))
             (move o1 -15 q)
             (call typep 2)
             (jumpe o1 11)
             (move o1 -16 q)
             (call symbol-plist 1)
             (movem o1 -16 q)
             (jrst 9)
(label 11)   (move o2 -16 q)
             (move o1 (constant 2))
             (call error 2)
(label 9)    (move o6 -17 q)
             (movem o6 -14 q)
             (move o2 (constant 3))
             (move o1 -14 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -15 q)
             (jumpn o1 14)
             (jrst 16)
             (move o2 -14 q)
             (move o1 (constant 4))
             (call flavors::make-flavor 2)
             (movem o1 -13 q)
             (move o6 -14 q)
             (movem o6 -12 q)
             (move o6 (constant 3))
             (movem o6 -11 q)
             (move o6 -13 q)
             (movem o6 -10 q)
             (move o3 -10 q)
             (move o1 -12 q)
             (move o2 -11 q)
             (call %put 3)
             (move o2 (special 5))
             (move o1 -14 q)
             (call adjoin 2)
             (movem o1 (special 5))
             (move o6 -13 q)
             (movem o6 -15 q)
             (jrst 14)
(label 16)   (move o2 -14 q)
             (move o1 (constant 6))
             (call error 2)
             (movem o1 -15 q)
(label 14)   (move o2 (constant 7))
             (move o1 (constant 7))
             (call cons 2)
             (movem o1 -14 q)
             (move o1 -15 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -14 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 20)
             (move o2 -17 q)
             (move o1 (constant 8))
             (call error 2)
(label 20)   (move o6 (constant 9))
             (movem o6 -14 q)
             (move o1 -14 q)
             (spec-bind (special 10))
             (movem o1 (special 10))
             (move o6 -17 q)
             (movem o6 -13 q)
             (move o2 (constant 3))
             (move o1 -13 q)
             (call get 2)
             (jumpn o1 22)
             (jrst 24)
             (move o2 -13 q)
             (move o1 (constant 4))
             (call flavors::make-flavor 2)
             (movem o1 -12 q)
             (move o6 -13 q)
             (movem o6 -11 q)
             (move o6 (constant 3))
             (movem o6 -10 q)
             (move o6 -12 q)
             (movem o6 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 -10 q)
             (call %put 3)
             (move o2 (special 5))
             (move o1 -13 q)
             (call adjoin 2)
             (movem o1 (special 5))
             (move o1 -12 q)
             (jrst 22)
(label 24)   (move o2 -13 q)
             (move o1 (constant 6))
             (call error 2)
(label 22)   (call flavors:cleanup-flavor 1)
             (unbind 1)
             (move o1 (special 11))
             (call length 1)
             (movem o1 -13 q)
             (move o2 (constant 12))
             (move o1 -13 q)
             (call > 2)
             (jumpe o1 28)
             (move o1 (special 11))
             (call vector-pop 1)
             (movem o1 -13 q)
             (move o2 (constant 12))
             (move o1 -13 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -13 q)
             (movem o6 -14 q)
             (jrst 27)
(label 28)   (move o5 (constant 12))
             (move o1 (constant 13))
             (move o2 (constant 14))
             (move o3 (constant 9))
             (move o4 (constant 15))
             (call make-array 5)
             (movem o1 -14 q)
(label 27)   (move o1 (special 11))
             (call length 1)
             (movem o1 -12 q)
             (move o2 (constant 12))
             (move o1 -12 q)
             (call > 2)
             (jumpe o1 32)
             (move o1 (special 11))
             (call vector-pop 1)
             (movem o1 -12 q)
             (move o2 (constant 12))
             (move o1 -12 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -12 q)
             (movem o6 -13 q)
             (jrst 31)
(label 32)   (move o5 (constant 12))
             (move o1 (constant 13))
             (move o2 (constant 14))
             (move o3 (constant 9))
             (move o4 (constant 15))
             (call make-array 5)
             (movem o1 -13 q)
(label 31)   (icall cunwind)
             (jrst 35)
             (jrst 36)
             (move o1 -15 q)
             (call flavors::flavor-descriptor 1)
             (movem o1 -12 q)
             (move o1 -12 q)
             (call flavor-internals:instantiate-instance-descriptor 1)
             (movem o1 -11 q)
             (movem nil -10 q)
             (move o6 -16 q)
             (movem o6 -9 q)
(label 41)   (move o1 -9 q)
             (call endp 1)
             (jumpe o1 42)
             (jrst 37)
(label 42)   (move o1 -14 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 12))
             (move o1 -8 q)
             (call > 2)
             (jumpe o1 44)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -15 q)
             (call flavors::flavor-init-keywords* 1)
             (move o2 o1)
             (move o1 -8 q)
             (call find 2)
             (jumpn o1 46)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 -14 q)
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 46)   (jrst 45)
(label 44)   (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -15 q)
             (call flavors::flavor-iv-keywords* 1)
             (move o2 o1)
             (move o1 -7 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 49)
             (move o6 -11 q)
             (movem o6 -6 q)
(label 56)   (move o1 -6 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 12))
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call system:instancep 1)
             (jumpe o1 57)
             (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 58)
(label 57)   (move o1 -6 q)
             (jrst 52)
(label 58)   (jrst 56)
(label 52)   (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o1 -8 q)
             (call 1+ 1)
             (move o2 o1)
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 (constant 16))
             (call eq 2)
             (jumpe o1 51)
             (move o6 -11 q)
             (movem o6 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
(label 63)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 12))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 64)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 65)
(label 64)   (move o1 -4 q)
             (jrst 59)
(label 65)   (jrst 63)
(label 59)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -3 q)
             (move o3 -5 q)
             (move o1 -4 q)
             (move o2 -3 q)
             (call lisp::%aset 3)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -13 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 51)   (jrst 48)
(label 49)   (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -15 q)
             (call flavors::flavor-init-keywords* 1)
             (move o2 o1)
             (move o1 -7 q)
             (call find 2)
             (jumpe o1 67)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o3 (constant 17))
             (move o1 -10 q)
             (move o2 -5 q)
             (call getf 3)
             (move o2 o1)
             (move o1 (constant 17))
             (call eq 2)
             (jumpe o1 69)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -13 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (call eval 1)
             (movem o1 -7 q)
             (move o2 -10 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -10 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -10 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -10 q)
(label 69)   (jrst 48)
(label 67)   (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -14 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 48)
(label 45)   (move o1 -9 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -9 q)
             (jrst 41)
(label 37)   (move o1 -15 q)
             (call flavors::flavor-default-plist* 1)
             (movem o1 -9 q)
(label 77)   (move o1 -9 q)
             (call endp 1)
             (jumpe o1 78)
             (jrst 73)
(label 78)   (move o1 -14 q)
             (call length 1)
             (movem o1 -8 q)
             (move o2 (constant 12))
             (move o1 -8 q)
             (call > 2)
             (jumpe o1 80)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -15 q)
             (call flavors::flavor-init-keywords* 1)
             (move o2 o1)
             (move o1 -8 q)
             (call find 2)
             (jumpn o1 82)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o2 -14 q)
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 82)   (jrst 81)
(label 80)   (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -15 q)
             (call flavors::flavor-iv-keywords* 1)
             (move o2 o1)
             (move o1 -7 q)
             (call assoc 2)
             (move o1 1 o1)
             (movem o1 -8 q)
             (skipn nil -8 q)
             (jrst 85)
             (move o6 -11 q)
             (movem o6 -6 q)
(label 92)   (move o1 -6 q)
             (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o2 (constant 12))
             (move o1 -4 q)
             (call aref 2)
             (movem o1 -5 q)
             (move o1 -5 q)
             (call system:instancep 1)
             (jumpe o1 93)
             (move o6 -5 q)
             (movem o6 -6 q)
             (jrst 94)
(label 93)   (move o1 -6 q)
             (jrst 88)
(label 94)   (jrst 92)
(label 88)   (call system::%instance-vector 1)
             (movem o1 -6 q)
             (move o1 -8 q)
             (call 1+ 1)
             (move o2 o1)
             (move o1 -6 q)
             (call aref 2)
             (movem o1 -7 q)
             (move o2 -7 q)
             (move o1 (constant 16))
             (call eq 2)
             (jumpe o1 87)
             (move o6 -11 q)
             (movem o6 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (call eval 1)
             (movem o1 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
(label 99)   (move o1 -4 q)
             (call system::%instance-vector 1)
             (movem o1 -2 q)
             (move o2 (constant 12))
             (move o1 -2 q)
             (call aref 2)
             (movem o1 -3 q)
             (move o1 -3 q)
             (call system:instancep 1)
             (jumpe o1 100)
             (move o6 -3 q)
             (movem o6 -4 q)
             (jrst 101)
(label 100)  (move o1 -4 q)
             (jrst 95)
(label 101)  (jrst 99)
(label 95)   (call system::%instance-vector 1)
             (movem o1 -4 q)
             (move o1 -6 q)
             (call 1+ 1)
             (movem o1 -3 q)
             (move o3 -5 q)
             (move o1 -4 q)
             (move o2 -3 q)
             (call lisp::%aset 3)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -13 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 87)   (jrst 84)
(label 85)   (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o1 -15 q)
             (call flavors::flavor-init-keywords* 1)
             (move o2 o1)
             (move o1 -7 q)
             (call find 2)
             (jumpe o1 103)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -5 q)
             (move o3 (constant 17))
             (move o1 -10 q)
             (move o2 -5 q)
             (call getf 3)
             (move o2 o1)
             (move o1 (constant 17))
             (call eq 2)
             (jumpe o1 105)
             (move o1 -9 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -10 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -10 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -10 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -10 q)
             (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -13 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 105)  (jrst 84)
(label 103)  (move o1 -9 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o2 -14 q)
             (move o1 -7 q)
             (call vector-push-extend 2)
(label 84)
(label 81)   (move o1 -9 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -9 q)
             (jrst 77)
(label 73)   (move o1 -14 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 12))
             (move o1 -9 q)
             (call > 2)
             (jumpe o1 109)
             (move o2 (constant 0))
             (move o1 -14 q)
             (call coerce 2)
             (move o2 o1)
             (move o1 (constant 18))
             (call error 2)
(label 109)  (move o2 (constant 19))
             (move o1 -11 q)
             (call system:send 2)
             (movem nil -9 q)
             (move o1 -15 q)
             (call flavors::flavor-required-inits* 1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -7 q)
(label 115)  (move o1 -8 q)
             (call atom 1)
             (jumpe o1 116)
             (jrst 111)
(label 116)  (move o2 -13 q)
             (move o1 -7 q)
             (call find 2)
             (jumpn o1 119)
             (move o2 -9 q)
             (move o1 -7 q)
             (call cons 2)
             (movem o1 -9 q)
(label 119)  (move o1 -8 q)
             (move o1 1 o1)
             (movem o1 -8 q)
             (move o1 -8 q)
             (move o1 0 o1)
             (movem o1 -7 q)
             (jrst 115)
(label 111)  (skipn nil -9 q)
             (jrst 121)
             (move o3 -9 q)
             (move o1 (constant 20))
             (move o2 -17 q)
             (call error 3)
(label 121)  (move o4 -10 q)
             (move o1 -11 q)
             (move o2 (constant 21))
             (move o3 (constant 22))
             (call system:send 4)
             (move o1 -11 q)
             (movei n 1)
             (popj p)
(label 35)   (move o2 (constant 12))
             (move o1 -14 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -14 q)
             (move o2 nil)
             (move o3 (constant 23))
             (call fill 4)
             (move o2 (special 11))
             (move o1 -14 q)
             (call vector-push-extend 2)
             (move o2 (constant 12))
             (move o1 -13 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -13 q)
             (move o2 nil)
             (move o3 (constant 23))
             (call fill 4)
             (move o2 (special 11))
             (move o1 -13 q)
             (call vector-push-extend 2)
             (popj p)
(label 36)   (adjsp q -18)
             (popj p)
)

(%put (quote make-instance) (quote lisp::%args-documentation) (quote (flavor-name &rest init-plist))) 
(%put (quote make-instance) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote undefflavor) (quote lisp::%fun-documentation) (quote "Permanently dissociates the flavor's instances and undefines the flavor.")) 

#_(lap #0_undefflavor expr
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." 1 2 %stacks% 0 1000 :adjustable t :fill-pointer vanilla-flavor *all-flavor-names* 4 *dirty-flavors* 18 "Flavor has been undefflavored." 20 12 3 19 :end)
       (code-start)
(label 1)    (adjsp q 15)
             (movem o1 -14 q)
             (move o6 -14 q)
             (movem o6 -12 q)
             (move o2 (constant 0))
             (move o1 -12 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -13 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -12 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -11 q)
             (move o6 -12 q)
             (movem o6 -10 q)
             (move o6 (constant 0))
             (movem o6 -9 q)
             (move o6 -11 q)
             (movem o6 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 -9 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -12 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -11 q)
             (movem o6 -13 q)
             (jrst 3)
(label 5)    (move o2 -12 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -13 q)
(label 3)    (move o2 (constant 5))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -13 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 9)
             (move o1 (special 6))
             (call length 1)
             (movem o1 -11 q)
             (move o2 (constant 7))
             (move o1 -11 q)
             (call > 2)
             (jumpe o1 11)
             (move o1 (special 6))
             (call vector-pop 1)
             (movem o1 -11 q)
             (move o2 (constant 7))
             (move o1 -11 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -11 q)
             (movem o6 -12 q)
             (jrst 10)
(label 11)   (move o5 (constant 7))
             (move o1 (constant 8))
             (move o2 (constant 9))
             (move o3 (constant 10))
             (move o4 (constant 11))
             (call make-array 5)
             (movem o1 -12 q)
(label 10)   (icall cunwind)
             (jrst 14)
             (jrst 15)
             (move o1 -13 q)
             (call flavors::flavor-name 1)
             (movem o1 -11 q)
             (move o2 (constant 12))
             (move o1 -11 q)
             (call eq 2)
             (jumpe o1 17)
             (move o6 (special 13))
             (movem o6 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 22)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 23)
             (jrst 18)
(label 23)   (move o6 -10 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 25)
             (jrst 27)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 25)
(label 27)   (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 25)   (move o2 -12 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
             (move o2 (constant 7))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpn o1 31)
             (move o6 -9 q)
             (movem o6 -8 q)
             (move o2 (constant 14))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -7 q)
             (move o1 -8 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -7 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 36)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 37)
             (move o1 -8 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 37)
(label 36)   (jrst 34)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (movem o1 -7 q)
             (move o2 (constant 7))
             (move o1 -7 q)
             (call > 2)
             (jumpn o1 39)
             (move o1 -8 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 39)
(label 34)   (jrst 33)
             (move o2 (special 15))
             (move o1 -8 q)
             (call vector-push-extend 2)
(label 33)   (move o6 (constant 7))
             (movem o6 -8 q)
             (move o6 -9 q)
             (movem o6 -7 q)
             (move o6 (constant 10))
             (movem o6 -6 q)
             (skipn nil -6 q)
             (jrst 41)
             (move o6 (constant 4))
             (movem o6 -4 q)
             (jrst 42)
(label 41)   (move o6 (constant 7))
             (movem o6 -4 q)
(label 42)   (move o2 -8 q)
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -3 q)
             (move o1 -7 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -4 q)
             (move o2 -3 q)
             (call dpb 3)
             (movem o1 -5 q)
             (move o3 -5 q)
             (move o1 -7 q)
             (move o2 (constant 16))
             (call lisp::%sp-svset 3)
(label 31)   (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 22)
(label 18)   (jrst 16)
(label 17)   (move o2 -12 q)
             (move o1 -13 q)
             (call vector-push-extend 2)
             (move o6 (constant 7))
             (movem o6 -11 q)
(label 49)   (move o1 -12 q)
             (call length 1)
             (move o2 o1)
             (move o1 -11 q)
             (call < 2)
             (jumpn o1 50)
             (jrst 45)
(label 50)   (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (movem o1 -10 q)
             (move o6 -10 q)
             (movem o6 -9 q)
             (move o2 (constant 14))
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -8 q)
             (move o1 -9 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -8 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe1 o1 56)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (jumpe o1 57)
             (move o1 -9 q)
             (call flavors::flavor-descriptor 1)
             (call flavor-internals:instance-descriptor-instantiated-p 1)
             (skipn nil o1)
(label 57)
(label 56)   (jrst 54)
             (move o1 -9 q)
             (call flavors::flavor-changed 1)
             (movem o1 -8 q)
             (move o2 (constant 7))
             (move o1 -8 q)
             (call > 2)
             (jumpn o1 59)
             (move o1 -9 q)
             (call flavors::flavor-changed-methods 1)
             (skipe nil o1)
(label 59)
(label 54)   (jrst 53)
             (move o2 (special 15))
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 53)   (move o6 (constant 7))
             (movem o6 -9 q)
             (move o6 -10 q)
             (movem o6 -8 q)
             (move o6 (constant 10))
             (movem o6 -7 q)
             (skipn nil -7 q)
             (jrst 61)
             (move o6 (constant 4))
             (movem o6 -5 q)
             (jrst 62)
(label 61)   (move o6 (constant 7))
             (movem o6 -5 q)
(label 62)   (move o2 -9 q)
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call flavors::flavor-changed 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call dpb 3)
             (movem o1 -6 q)
             (move o3 -6 q)
             (move o1 -8 q)
             (move o2 (constant 16))
             (call lisp::%sp-svset 3)
             (move o2 -11 q)
             (move o1 -12 q)
             (call aref 2)
             (call flavors::flavor-dependents 1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
(label 67)   (move o1 -10 q)
             (call atom 1)
             (jumpe o1 68)
             (jrst 63)
(label 68)   (move o2 -12 q)
             (move o1 -9 q)
             (call position 2)
             (jumpn o1 71)
             (move o2 -12 q)
             (move o1 -9 q)
             (call vector-push-extend 2)
(label 71)   (move o1 -10 q)
             (move o1 1 o1)
             (movem o1 -10 q)
             (move o1 -10 q)
             (move o1 0 o1)
             (movem o1 -9 q)
             (jrst 67)
(label 63)   (move o1 -11 q)
             (call 1+ 1)
             (movem o1 -11 q)
             (jrst 49)
(label 45)
(label 16)   (move o2 (constant 17))
             (move o1 -13 q)
             (call flavors::dissociate-instances 2)
             (move o6 -13 q)
             (movem o6 -11 q)
             (call flavors::make-method-structure 0)
             (movem o1 -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 18))
             (call lisp::%sp-svset 3)
             (move o6 -13 q)
             (movem o6 -11 q)
             (movem nil -10 q)
             (move o3 -10 q)
             (move o1 -11 q)
             (move o2 (constant 19))
             (call lisp::%sp-svset 3)
             (move o6 -13 q)
             (movem o6 -11 q)
             (movem nil -10 q)
             (move o6 (constant 20))
             (movem o6 -9 q)
             (move o6 -11 q)
             (movem o6 -8 q)
             (move o6 -10 q)
             (movem o6 -7 q)
             (skipn nil -7 q)
             (jrst 74)
             (move o6 (constant 4))
             (movem o6 -5 q)
             (jrst 75)
(label 74)   (move o6 (constant 7))
             (movem o6 -5 q)
(label 75)   (move o2 -9 q)
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -4 q)
             (move o1 -8 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -5 q)
             (move o2 -4 q)
             (call dpb 3)
             (movem o1 -6 q)
             (move o3 -6 q)
             (move o1 -8 q)
             (move o2 (constant 21))
             (call lisp::%sp-svset 3)
             (move o6 (constant 5))
             (movem o6 -11 q)
             (move o6 -13 q)
             (movem o6 -10 q)
             (movem nil -9 q)
             (skipn nil -9 q)
             (jrst 76)
             (move o6 (constant 4))
             (movem o6 -7 q)
             (jrst 77)
(label 76)   (move o6 (constant 7))
             (movem o6 -7 q)
(label 77)   (move o2 -11 q)
             (move o1 (constant 4))
             (call cons 2)
             (movem o1 -6 q)
             (move o1 -10 q)
             (call flavors::flavor-flags 1)
             (move o3 o1)
             (move o1 -7 q)
             (move o2 -6 q)
             (call dpb 3)
             (movem o1 -8 q)
             (move o3 -8 q)
             (move o1 -10 q)
             (move o2 (constant 21))
             (call lisp::%sp-svset 3)
             (move o2 (special 13))
             (move o1 -14 q)
             (call delete 2)
             (move o1 -13 q)
             (call flavors::flavor-components 1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
(label 82)   (move o1 -11 q)
             (call atom 1)
             (jumpe o1 83)
             (jrst 78)
(label 83)   (move o6 -10 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (jumpn o1 85)
             (jrst 87)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o1 -7 q)
             (jrst 85)
(label 87)   (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
(label 85)   (call flavors::flavor-dependents 1)
             (move o2 o1)
             (move o1 -14 q)
             (call delete 2)
             (move o1 -11 q)
             (move o1 1 o1)
             (movem o1 -11 q)
             (move o1 -11 q)
             (move o1 0 o1)
             (movem o1 -10 q)
             (jrst 82)
(label 78)   (move o1 (special 6))
             (call length 1)
             (movem o1 -10 q)
             (move o2 (constant 7))
             (move o1 -10 q)
             (call > 2)
             (jumpe o1 91)
             (move o1 (special 6))
             (call vector-pop 1)
             (movem o1 -10 q)
             (move o2 (constant 7))
             (move o1 -10 q)
             (call lisp::%set-fill-pointer 2)
             (move o6 -10 q)
             (movem o6 -11 q)
             (jrst 90)
(label 91)   (move o5 (constant 7))
             (move o1 (constant 8))
             (move o2 (constant 9))
             (move o3 (constant 10))
             (move o4 (constant 11))
             (call make-array 5)
             (movem o1 -11 q)
(label 90)   (icall cunwind)
             (jrst 94)
             (jrst 95)
             (move o2 -11 q)
             (move o1 -12 q)
             (call flavors::order-flavors 2)
             (move o6 (constant 7))
             (movem o6 -10 q)
             (move o1 -11 q)
             (call length 1)
             (movem o1 -9 q)
(label 100)  (move o2 -9 q)
             (move o1 -10 q)
             (call < 2)
             (jumpn o1 101)
             (jrst 96)
(label 101)  (move o2 -10 q)
             (move o1 -11 q)
             (call aref 2)
             (call flavors:cleanup-flavor 1)
             (move o1 -10 q)
             (call 1+ 1)
             (movem o1 -10 q)
             (jrst 100)
(label 96)   (popj p)
(label 94)   (move o2 (constant 7))
             (move o1 -11 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -11 q)
             (move o2 nil)
             (move o3 (constant 22))
             (call fill 4)
             (move o2 (special 6))
             (move o1 -11 q)
             (call vector-push-extend 2)
             (popj p)
(label 95)   (popj p)
(label 14)   (move o2 (constant 7))
             (move o1 -12 q)
             (call array-dimension 2)
             (move o4 o1)
             (move o1 -12 q)
             (move o2 nil)
             (move o3 (constant 22))
             (call fill 4)
             (move o2 (special 6))
             (move o1 -12 q)
             (call vector-push-extend 2)
             (popj p)
(label 15)
(label 9)    (move o1 -14 q)
             (movei n 1)
             (adjsp q -15)
             (popj p)
)

(%put (quote undefflavor) (quote lisp::%args-documentation) (quote (name))) 
(%put (quote undefflavor) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote undefmethod) (quote lisp::%fun-documentation) (quote "Undoes the effect of the corresponding defmethod, defwrapper (use type :wrapper)
  , or whopper (type :whopper).")) 

#_(lap #0_undefmethod macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(2 "Macro ~S cannot be called with ~S args." undefmethod t :primary %undefmethod quote)
       (code-start)
(label 1)    (adjsp q 11)
             (movem o1 -10 q)
             (move o1 -10 q)
             (call length 1)
             (movem o1 -9 q)
             (move o2 (constant 0))
             (move o1 -9 q)
             (call = 2)
             (jumpn o1 4)
             (move o1 -10 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -9 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -8 q)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 7)
             (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -7 q)
             (jrst 6)
(label 7)    (movem nil -7 q)
(label 6)    (move o1 -10 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (tdcn o1 o1)
             (move o1 (constant 3))
             (tdcn o1 o1)
             (move o1 (constant 3))
             (movem o1 -6 q)
             (skipe nil -6 q)
             (jrst 10)
             (move o6 -8 q)
             (movem o6 -7 q)
             (move o6 (constant 4))
             (movem o6 -8 q)
(label 10)   (move o2 -9 q)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -4 q)
             (move o2 -7 q)
             (move o1 (constant 6))
             (call list 2)
             (movem o1 -3 q)
             (move o2 -8 q)
             (move o1 (constant 6))
             (call list 2)
             (move o4 o1)
             (move o1 (constant 5))
             (move o2 -4 q)
             (move o3 -3 q)
             (call list 4)
(label 3)    (adjsp q -11)
             (popj p)
)

(%put (quote undefmethod) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote undefmethod) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_%undefmethod expr
       (entry-points (2-few 2-few 2-few 1 2-many 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist." :key car)
       (code-start)
(label 1)    (adjsp q 13)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (movem o3 -10 q)
             (move o6 -12 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -9 q)
             (jumpn o1 3)
             (jrst 5)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o6 -7 q)
             (movem o6 -9 q)
             (jrst 3)
(label 5)    (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
             (movem o1 -9 q)
(label 3)    (move o1 -9 q)
             (call flavors::flavor-methods 1)
             (movem o1 -6 q)
             (move o3 nil)
             (move o1 -11 q)
             (move o2 -6 q)
             (call flavors::%get-method-types 3)
             (move o1 0 o1)
             (movem o1 -7 q)
             (move o4 (constant 5))
             (move o1 -10 q)
             (move o2 -7 q)
             (move o3 (constant 4))
             (call delete 4)
             (move o1 -9 q)
             (call flavors::flavor-name 1)
             (movem o1 -8 q)
             (move o2 -11 q)
             (move o1 -8 q)
             (call flavors:recompile-flavor 2)
             (move o1 -11 q)
             (movei n 1)
             (adjsp q -13)
             (popj p)
)

(%put (quote %undefmethod) (quote lisp::%args-documentation) (quote (flavor-name message type))) 
(%put (quote %undefmethod) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defwrapper) (quote lisp::%fun-documentation) (quote "Wrappers are sort of like macros, getting expanded into the combined method
  for flavors that inherit it.  The args is either ignore or a list that
  is destructure-bound at send-time to the method's argument-list.  The
  passed-body gets bound at 'expansion time' to the 'inside' of the wrapper.")) 

#_(lap #0_defwrapper macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." defwrapper t :wrapper ignore string "-" :upcase *print-case* defun &rest let form progn list (quote mydlet) quote (%combined-args) (form) eval-when (compile eval load) (compile eval) new-defun old-defun get ((quote old-defun)) ((new-hash nil)) when or and (null old-defun) hash ((quote sxhash)) ((or (null hash) (not (= hash (setq new-hash (sxhash new-defun)))))) ((not (equal new-defun old-defun))) method-add flavor-methods get-flavor recompile-flavor setf (new-defun) if new-hash (new-hash) (load) new sxhash (or (null hash) (not (= hash new))) (new))
       (code-start)
(label 1)    (adjsp q 28)
             (movem o1 -27 q)
             (move o1 -27 q)
             (call length 1)
             (movem o1 -26 q)
             (move o2 (constant 0))
             (move o1 -26 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -27 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -27 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -26 q)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -25 q)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 7)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -24 q)
             (jrst 6)
(label 7)    (movem nil -24 q)
(label 6)    (move o1 -27 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (tdcn o1 o1)
             (move o1 (constant 3))
             (tdcn o1 o1)
             (move o1 (constant 3))
             (movem o1 -23 q)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -22 q)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (movem o1 -21 q)
             (move o1 -27 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -20 q)
             (skipe nil -23 q)
             (jrst 10)
             (move o6 -25 q)
             (movem o6 -24 q)
             (move o6 (constant 4))
             (movem o6 -25 q)
(label 10)   (move o2 (constant 5))
             (move o1 -22 q)
             (call eq 2)
             (jumpe o1 12)
             (movem nil -22 q)
(label 12)   (move o6 (constant 6))
             (movem o6 -18 q)
             (move o1 -26 q)
             (call symbol-name 1)
             (movem o1 -17 q)
             (move o6 (constant 7))
             (movem o6 -16 q)
             (move o6 -24 q)
             (movem o6 -15 q)
             (move o1 -15 q)
             (call symbolp 1)
             (jumpe o1 14)
             (move o6 (constant 8))
             (movem o6 -14 q)
             (move o1 -14 q)
             (spec-bind (special 9))
             (movem o1 (special 9))
             (move o1 -15 q)
             (call prin1-to-string 1)
             (movem o1 -15 q)
             (unbind 1)
             (jrst 15)
(label 14)   (move o6 -15 q)
             (movem o6 -15 q)
(label 15)   (move o6 (constant 7))
             (movem o6 -14 q)
             (move o6 -25 q)
             (movem o6 -13 q)
             (move o1 -13 q)
             (call symbolp 1)
             (jumpe o1 16)
             (move o6 (constant 8))
             (movem o6 -12 q)
             (move o1 -12 q)
             (spec-bind (special 9))
             (movem o1 (special 9))
             (move o1 -13 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 17)
(label 16)   (push q -13 q)
(label 17)   (move o1 -19 q)
             (move o2 -18 q)
             (move o3 -17 q)
             (move o4 -16 q)
             (move o5 -15 q)
             (call concatenate 6)
             (movem o1 -18 q)
             (move o1 -26 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -18 q)
             (call intern 2)
             (movem o1 -19 q)
             (move o2 -21 q)
             (move o1 (constant 11))
             (call list 2)
             (movem o1 -15 q)
             (move o2 -20 q)
             (move o1 (constant 14))
             (call cons 2)
             (move o2 o1)
             (move o1 (constant 13))
             (call list 2)
             (call list 1)
             (movem o1 -13 q)
             (move o2 (constant 18))
             (move o1 -22 q)
             (call cons 2)
             (call list 1)
             (move o2 o1)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -10 q)
             (move o4 (constant 19))
             (move o1 (constant 15))
             (move o2 (constant 16))
             (move o3 -10 q)
             (call list* 4)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -13 q)
             (call list 3)
             (move o4 o1)
             (move o1 (constant 10))
             (move o2 -19 q)
             (move o3 -15 q)
             (call list 4)
             (movem o1 -18 q)
             (move o3 -18 q)
             (move o1 (constant 20))
             (move o2 (constant 21))
             (call list 3)
             (movem o1 -16 q)
             (move o2 -18 q)
             (move o1 (constant 17))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 23))
             (call list 2)
             (movem o1 -12 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -9 q)
             (move o3 (constant 26))
             (move o1 (constant 25))
             (move o2 -9 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 24))
             (call list 2)
             (movem o1 -11 q)
             (move o3 (constant 27))
             (move o1 -12 q)
             (move o2 -11 q)
             (call list* 3)
             (movem o1 -12 q)
             (move o6 (constant 28))
             (movem o6 -11 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -4 q)
             (move o3 (constant 33))
             (move o1 (constant 25))
             (move o2 -4 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 32))
             (call list 2)
             (call list 1)
             (movem o1 -6 q)
             (move o3 (constant 34))
             (move o1 (constant 12))
             (move o2 -6 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 30))
             (move o2 (constant 31))
             (call list 3)
             (movem o1 -9 q)
             (move o3 (constant 35))
             (move o1 (constant 29))
             (move o2 -9 q)
             (call list* 3)
             (movem o1 -10 q)
             (move o2 -24 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -8 q)
             (move o2 -25 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -7 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -6 q)
             (move o2 -26 q)
             (move o1 (constant 17))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 38))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 37))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 36))
             (move o2 -8 q)
             (move o3 -7 q)
             (move o4 -6 q)
             (call list 5)
             (movem o1 -9 q)
             (move o2 -26 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -7 q)
             (move o2 -24 q)
             (move o1 (constant 17))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 39))
             (move o2 -7 q)
             (call list 3)
             (movem o1 -8 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -5 q)
             (move o3 (constant 26))
             (move o1 (constant 25))
             (move o2 -5 q)
             (call list* 3)
             (movem o1 -6 q)
             (move o3 (constant 41))
             (move o1 (constant 40))
             (move o2 -6 q)
             (call list* 3)
             (movem o1 -7 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -2 q)
             (move o3 (constant 33))
             (move o1 (constant 25))
             (move o2 -2 q)
             (call list* 3)
             (movem o1 -3 q)
             (move o3 (constant 44))
             (move o1 (constant 40))
             (move o2 -3 q)
             (call list* 3)
             (move o3 o1)
             (move o1 (constant 42))
             (move o2 (constant 43))
             (call list 3)
             (push q o1)
             (move o1 -12 q)
             (move o2 -11 q)
             (move o3 -10 q)
             (move o4 -9 q)
             (move o5 -8 q)
             (call list 6)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -12 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 20))
             (move o2 (constant 22))
             (call list 3)
             (movem o1 -15 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -9 q)
             (move o3 (constant 33))
             (move o1 (constant 25))
             (move o2 -9 q)
             (call list* 3)
             (move o2 o1)
             (move o1 (constant 32))
             (call list 2)
             (movem o1 -11 q)
             (move o2 -18 q)
             (move o1 (constant 47))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 46))
             (call list 2)
             (move o2 o1)
             (move o1 -11 q)
             (call list 2)
             (movem o1 -11 q)
             (move o2 -24 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -7 q)
             (move o2 -25 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -6 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -5 q)
             (move o2 -26 q)
             (move o1 (constant 17))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 38))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 37))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 36))
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (call list 5)
             (movem o1 -8 q)
             (move o2 -26 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -6 q)
             (move o2 -24 q)
             (move o1 (constant 17))
             (call list 2)
             (move o3 o1)
             (move o1 (constant 39))
             (move o2 -6 q)
             (call list 3)
             (movem o1 -7 q)
             (move o2 -19 q)
             (move o1 (constant 17))
             (call list 2)
             (movem o1 -4 q)
             (move o3 (constant 33))
             (move o1 (constant 25))
             (move o2 -4 q)
             (call list* 3)
             (movem o1 -5 q)
             (move o3 (constant 49))
             (move o1 (constant 40))
             (move o2 -5 q)
             (call list* 3)
             (move o5 o1)
             (move o1 (constant 28))
             (move o2 (constant 48))
             (move o3 -8 q)
             (move o4 -7 q)
             (call list 5)
             (move o3 o1)
             (move o1 (constant 12))
             (move o2 -11 q)
             (call list 3)
             (move o3 o1)
             (move o1 (constant 20))
             (move o2 (constant 45))
             (call list 3)
             (movem o1 -14 q)
             (move o2 -24 q)
             (move o1 (constant 17))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 14))
             (move o2 -16 q)
             (move o3 -15 q)
             (move o4 -14 q)
             (call list 5)
(label 3)    (adjsp q -28)
             (popj p)
)

(%put (quote defwrapper) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defwrapper) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defmethod) (quote lisp::%fun-documentation) (quote "Refer to the flavor documentation for details.")) 

#_(lap #0_defmethod macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." defmethod t :primary flavor :name *undefined-flavor-names* "Flavor ~S does not exist." string "-" :upcase *print-case* 1 2 "Flavor ~S not defined." eval-when (eval load compile) internal-define-method block %defmethod quote)
       (code-start)
(label 1)    (adjsp q 22)
             (movem o1 -21 q)
             (move o1 -21 q)
             (call length 1)
             (movem o1 -20 q)
             (move o2 (constant 0))
             (move o1 -20 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -21 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -21 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -20 q)
             (move o1 -21 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -19 q)
             (move o1 -21 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (jumpe o1 7)
             (move o1 -21 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -18 q)
             (jrst 6)
(label 7)    (movem nil -18 q)
(label 6)    (move o1 -21 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (tdcn o1 o1)
             (move o1 (constant 3))
             (tdcn o1 o1)
             (move o1 (constant 3))
             (movem o1 -17 q)
             (move o1 -21 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -16 q)
             (move o1 -21 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -15 q)
             (skipe nil -17 q)
             (jrst 10)
             (move o6 -19 q)
             (movem o6 -14 q)
             (move o6 (constant 4))
             (movem o6 -13 q)
             (move o6 -14 q)
             (movem o6 -18 q)
             (move o6 -13 q)
             (movem o6 -19 q)
(label 10)   (move o6 -20 q)
             (movem o6 -13 q)
             (move o2 (constant 5))
             (move o1 -13 q)
             (call get 2)
             (skipe nil o1)
             (movem o1 -14 q)
             (jumpn o1 12)
             (jrst 14)
             (move o2 -13 q)
             (move o1 (constant 6))
             (call flavors::make-flavor 2)
             (movem o1 -12 q)
             (move o6 -13 q)
             (movem o6 -11 q)
             (move o6 (constant 5))
             (movem o6 -10 q)
             (move o6 -12 q)
             (movem o6 -9 q)
             (move o3 -9 q)
             (move o1 -11 q)
             (move o2 -10 q)
             (call %put 3)
             (move o2 (special 7))
             (move o1 -13 q)
             (call adjoin 2)
             (movem o1 (special 7))
             (move o6 -12 q)
             (movem o6 -14 q)
             (jrst 12)
(label 14)   (move o2 -13 q)
             (move o1 (constant 8))
             (call error 2)
             (movem o1 -14 q)
(label 12)   (move o6 (constant 9))
             (movem o6 -12 q)
             (move o1 -20 q)
             (call symbol-name 1)
             (movem o1 -11 q)
             (move o6 (constant 10))
             (movem o6 -10 q)
             (move o6 -18 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (call symbolp 1)
             (jumpe o1 17)
             (move o6 (constant 11))
             (movem o6 -8 q)
             (move o1 -8 q)
             (spec-bind (special 12))
             (movem o1 (special 12))
             (move o1 -9 q)
             (call prin1-to-string 1)
             (movem o1 -9 q)
             (unbind 1)
             (jrst 18)
(label 17)   (move o6 -9 q)
             (movem o6 -9 q)
(label 18)   (move o6 (constant 10))
             (movem o6 -8 q)
             (move o6 -19 q)
             (movem o6 -7 q)
             (move o1 -7 q)
             (call symbolp 1)
             (jumpe o1 19)
             (move o6 (constant 11))
             (movem o6 -6 q)
             (move o1 -6 q)
             (spec-bind (special 12))
             (movem o1 (special 12))
             (move o1 -7 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 20)
(label 19)   (push q -7 q)
(label 20)   (move o1 -13 q)
             (move o2 -12 q)
             (move o3 -11 q)
             (move o4 -10 q)
             (move o5 -9 q)
             (call concatenate 6)
             (movem o1 -12 q)
             (move o1 -20 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -12 q)
             (call intern 2)
             (movem o1 -13 q)
             (move o2 (constant 14))
             (move o1 (constant 13))
             (call cons 2)
             (movem o1 -12 q)
             (move o1 -14 q)
             (call flavors::flavor-flags 1)
             (move o2 o1)
             (move o1 -12 q)
             (call ldb 2)
             (call zerop 1)
             (jumpe o1 22)
             (move o2 -20 q)
             (move o1 (constant 15))
             (call error 2)
(label 22)   (move o1 -15 q)
             (call flavors::extract-doc-and-declares 1)
             (adjust-values 2)
             (movem o1 -12 q)
             (movem o2 -11 q)
             (move o1 -14 q)
             (call flavors::flavor-method-env 1)
             (movem o1 -6 q)
             (move o3 -11 q)
             (move o1 (constant 19))
             (move o2 -18 q)
             (call list* 3)
             (call list 1)
             (move o2 o1)
             (move o1 -12 q)
             (call append 2)
             (move o5 o1)
             (move o1 (constant 18))
             (move o2 -13 q)
             (move o3 -6 q)
             (move o4 -16 q)
             (call list 5)
             (movem o1 -8 q)
             (move o2 -20 q)
             (move o1 (constant 21))
             (call list 2)
             (movem o1 -6 q)
             (move o2 -18 q)
             (move o1 (constant 21))
             (call list 2)
             (movem o1 -5 q)
             (move o2 -19 q)
             (move o1 (constant 21))
             (call list 2)
             (movem o1 -4 q)
             (move o2 -13 q)
             (move o1 (constant 21))
             (call list 2)
             (move o5 o1)
             (move o1 (constant 20))
             (move o2 -6 q)
             (move o3 -5 q)
             (move o4 -4 q)
             (call list 5)
             (move o4 o1)
             (move o1 (constant 16))
             (move o2 (constant 17))
             (move o3 -8 q)
             (call list 4)
(label 3)    (adjsp q -22)
             (popj p)
)

(%put (quote defmethod) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defmethod) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 

#_(lap #0_%defmethod expr
       (entry-points (2-few 2-few 2-few 2-few 1 2-many 2-many))
       #0_(flavor :name *undefined-flavor-names* "Flavor ~S does not exist.")
       (code-start)
(label 1)    (adjsp q 16)
             (movem o1 -15 q)
             (movem o2 -14 q)
             (movem o3 -13 q)
             (movem o4 -12 q)
             (move o6 -15 q)
             (movem o6 -8 q)
             (move o2 (constant 0))
             (move o1 -8 q)
             (call get 2)
             (jumpn o1 5)
             (jrst 7)
             (move o2 -8 q)
             (move o1 (constant 1))
             (call flavors::make-flavor 2)
             (movem o1 -7 q)
             (move o6 -8 q)
             (movem o6 -6 q)
             (move o6 (constant 0))
             (movem o6 -5 q)
             (move o6 -7 q)
             (movem o6 -4 q)
             (move o3 -4 q)
             (move o1 -6 q)
             (move o2 -5 q)
             (call %put 3)
             (move o2 (special 2))
             (move o1 -8 q)
             (call adjoin 2)
             (movem o1 (special 2))
             (move o1 -7 q)
             (jrst 5)
(label 7)    (move o2 -8 q)
             (move o1 (constant 3))
             (call error 2)
(label 5)    (call flavors::flavor-methods 1)
             (move o4 o1)
             (move o1 -14 q)
             (move o2 -13 q)
             (move o3 -12 q)
             (call flavors::method-add 4)
             (jumpe o1 3)
             (move o2 -14 q)
             (move o1 -15 q)
             (call flavors:recompile-flavor 2)
(label 3)    (move o1 -14 q)
             (movei n 1)
             (adjsp q -16)
             (popj p)
)

(%put (quote %defmethod) (quote lisp::%args-documentation) (quote (flavor-name method type function-name))) 
(%put (quote %defmethod) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote defwhopper) (quote lisp::%fun-documentation) (quote "Whoppers are to wrappers what functions are to macros.  Whoppers
  are functions that call continue-whopper, lexpr-continue-whopper,
  or continue-whopper-all with the desired arguments to continue with the
  wrapped code.")) 

#_(lap #0_defwhopper macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(3 "Macro ~S cannot be called with ~S args." defwhopper :whopper string "-" :upcase *print-case* "WHOPPER" progn defmethod %continuation %combined-args defwrapper (nil . wrapper-body) list* (quote apply) (quote (function send)) (quote self) quote ((list (quote function) (list* (quote lambda) (quote (%arglist &rest %combined-args)) (quote (if (listp %arglist) (setq %combined-args %arglist))) wrapper-body)) (quote (%combined-args %combined-args))))
       (code-start)
(label 1)    (adjsp q 21)
             (movem o1 -20 q)
             (move o1 -20 q)
             (call length 1)
             (movem o1 -19 q)
             (move o2 (constant 0))
             (move o1 -19 q)
             (call < 2)
             (jumpe o1 4)
             (move o1 -20 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 -20 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 0 o1)
             (movem o1 -19 q)
             (move o1 -20 q)
             (move o1 1 o1)
             (move o1 0 o1)
             (move o1 1 o1)
             (movem o1 -18 q)
             (move o1 -20 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 0 o1)
             (movem o1 -17 q)
             (move o1 -20 q)
             (move o1 1 o1)
             (move o1 1 o1)
             (move o1 1 o1)
             (movem o1 -16 q)
             (move o1 -18 q)
             (call nreverse 1)
             (movem o1 -18 q)
             (move o1 -18 q)
             (move o1 0 o1)
             (movem o1 -14 q)
             (move o1 -18 q)
             (move o1 1 o1)
             (movem o1 -18 q)
             (move o6 -14 q)
             (movem o6 -15 q)
             (move o1 -18 q)
             (move o1 0 o1)
             (movem o1 -13 q)
             (move o1 -18 q)
             (move o1 1 o1)
             (movem o1 -18 q)
             (move o1 -13 q)
             (skipe nil o1)
             (movem o1 -14 q)
             (jumpn o1 6)
             (move o6 (constant 3))
             (movem o6 -14 q)
(label 6)    (move o6 (constant 4))
             (movem o6 -12 q)
             (move o1 -19 q)
             (call symbol-name 1)
             (movem o1 -11 q)
             (move o6 (constant 5))
             (movem o6 -10 q)
             (move o6 -15 q)
             (movem o6 -9 q)
             (move o1 -9 q)
             (call symbolp 1)
             (jumpe o1 7)
             (move o6 (constant 6))
             (movem o6 -8 q)
             (move o1 -8 q)
             (spec-bind (special 7))
             (movem o1 (special 7))
             (move o1 -9 q)
             (call prin1-to-string 1)
             (movem o1 -9 q)
             (unbind 1)
             (jrst 8)
(label 7)    (move o6 -9 q)
             (movem o6 -9 q)
(label 8)    (move o6 (constant 5))
             (movem o6 -8 q)
             (move o6 -14 q)
             (movem o6 -7 q)
             (move o1 -7 q)
             (call symbolp 1)
             (jumpe o1 9)
             (move o6 (constant 6))
             (movem o6 -6 q)
             (move o1 -6 q)
             (spec-bind (special 7))
             (movem o1 (special 7))
             (move o1 -7 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 10)
(label 9)    (push q -7 q)
(label 10)   (push q (constant 5))
             (move o6 (constant 8))
             (movem o6 -9 q)
             (move o1 -9 q)
             (call symbolp 1)
             (jumpe o1 11)
             (move o6 (constant 6))
             (movem o6 -8 q)
             (move o1 -8 q)
             (spec-bind (special 7))
             (movem o1 (special 7))
             (move o1 -9 q)
             (call prin1-to-string 1)
             (push q o1)
             (unbind 1)
             (jrst 12)
(label 11)   (push q -9 q)
(label 12)   (move o1 -15 q)
             (move o2 -14 q)
             (move o3 -13 q)
             (move o4 -12 q)
             (move o5 -11 q)
             (call concatenate 8)
             (movem o1 -12 q)
             (move o1 -19 q)
             (call symbol-package 1)
             (move o2 o1)
             (move o1 -12 q)
             (call intern 2)
             (movem o1 -13 q)
             (move o2 -13 q)
             (move o1 -19 q)
             (call list 2)
             (movem o1 -10 q)
             (move o3 -17 q)
             (move o1 (constant 11))
             (move o2 (constant 12))
             (call list* 3)
             (movem o1 -9 q)
             (move o4 -16 q)
             (move o1 (constant 10))
             (move o2 -10 q)
             (move o3 -9 q)
             (call list* 4)
             (movem o1 -11 q)
             (move o3 -15 q)
             (move o1 -19 q)
             (move o2 -14 q)
             (call list 3)
             (movem o1 -9 q)
             (move o6 (constant 15))
             (movem o6 -7 q)
             (move o6 (constant 16))
             (movem o6 -6 q)
             (move o6 (constant 17))
             (movem o6 -5 q)
             (move o6 (constant 18))
             (movem o6 -4 q)
             (move o2 -13 q)
             (move o1 (constant 19))
             (call list 2)
             (move o2 o1)
             (move o1 (constant 19))
             (call list 2)
             (movem o1 -3 q)
             (push q (constant 20))
             (move o1 -8 q)
             (move o2 -7 q)
             (move o3 -6 q)
             (move o4 -5 q)
             (move o5 -4 q)
             (call list* 6)
             (move o4 o1)
             (move o1 (constant 13))
             (move o2 -9 q)
             (move o3 (constant 14))
             (call list 4)
             (move o3 o1)
             (move o1 (constant 9))
             (move o2 -11 q)
             (call list 3)
(label 3)    (adjsp q -21)
             (popj p)
)

(%put (quote defwhopper) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote defwhopper) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote continue-whopper-all) (quote lisp::%fun-documentation) (quote "See defwhopper.  Continues the combined method with all the passed arguments
  (efficiently).")) 

#_(lap #0_continue-whopper-all macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(1 "Macro ~S cannot be called with ~S args." continue-whopper-all (funcall %continuation %combined-args))
       (code-start)
(label 1)    (adjsp q 5)
             (movem o1 -4 q)
             (move o1 -4 q)
             (call length 1)
             (movem o1 -3 q)
             (move o2 (constant 0))
             (move o1 -3 q)
             (call > 2)
             (jumpe o1 4)
             (move o1 -4 q)
             (call length 1)
             (call 1- 1)
             (move o3 o1)
             (move o1 (constant 1))
             (move o2 (constant 2))
             (call error 3)
             (jrst 3)
(label 4)    (move o1 (constant 3))
             (movei n 1)
(label 3)    (adjsp q -5)
             (popj p)
)

(%put (quote continue-whopper-all) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote continue-whopper-all) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote continue-whopper) (quote lisp::%fun-documentation) (quote "See defwhopper and continue-whopper-all.  Continue-whopper lets you continue
  the combined method with different arguments.")) 

#_(lap #0_continue-whopper macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(funcall %continuation t)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o4 -5 q)
             (move o1 (constant 0))
             (move o2 (constant 1))
             (move o3 (constant 2))
             (call list* 4)
             (adjsp q -7)
             (popj p)
)

(%put (quote continue-whopper) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote continue-whopper) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 
(%put (quote lexpr-continue-whopper) (quote lisp::%fun-documentation) (quote "See defwhopper.")) 

#_(lap #0_lexpr-continue-whopper macro
       (entry-points (2-few 1 2-many 2-many 2-many 2-many 2-many))
       #0_(apply %continuation t)
       (code-start)
(label 1)    (adjsp q 7)
             (movem o1 -6 q)
             (move o1 -6 q)
             (move o1 1 o1)
             (movem o1 -5 q)
             (move o4 -5 q)
             (move o1 (constant 0))
             (move o2 (constant 1))
             (move o3 (constant 2))
             (call list* 4)
             (adjsp q -7)
             (popj p)
)

(%put (quote lexpr-continue-whopper) (quote lisp::%args-documentation) (quote (lisp::**macroarg**))) 
(%put (quote lexpr-continue-whopper) (quote lisp::%source-documentation) (quote "SS:<VICTOR.FLAVORS>FLAVORS.CLISP.7")) 